

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Nov 19 11:29:16 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=2
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=3
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1
    82                           	psect	text69,global,reloc=2,class=CODE,delta=1
    83                           	psect	text70,global,reloc=2,class=CODE,delta=1
    84                           	psect	text71,global,reloc=2,class=CODE,delta=1
    85                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=2
    86                           	psect	text73,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    90                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    91                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    92  0000                     
    93                           ; Version 2.36
    94                           ; Generated 28/01/2022 GMT
    95                           ; 
    96                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F46K22 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     
   129                           	psect	idataBANK0
   130  004ADA                     __pidataBANK0:
   131                           	callstack 0
   132                           
   133                           ;initializer for _flag
   134  004ADA  0001               	dw	1
   135                           
   136                           	psect	smallconst
   137  001000                     __psmallconst:
   138                           	callstack 0
   139  001000  00                 	db	0
   140  001001                     __powers_:
   141                           	callstack 0
   142  001001  00                 	db	0
   143  001002  80                 	db	128
   144  001003  3F                 	db	63
   145  001004  00                 	db	0
   146  001005  20                 	db	32
   147  001006  41                 	db	65
   148  001007  00                 	db	0
   149  001008  C8                 	db	200
   150  001009  42                 	db	66
   151  00100A  00                 	db	0
   152  00100B  7A                 	db	122
   153  00100C  44                 	db	68
   154  00100D  40                 	db	64
   155  00100E  1C                 	db	28
   156  00100F  46                 	db	70
   157  001010  50                 	db	80
   158  001011  C3                 	db	195
   159  001012  47                 	db	71
   160  001013  24                 	db	36
   161  001014  74                 	db	116
   162  001015  49                 	db	73
   163  001016  97                 	db	151
   164  001017  18                 	db	24
   165  001018  4B                 	db	75
   166  001019  BC                 	db	188
   167  00101A  BE                 	db	190
   168  00101B  4C                 	db	76
   169  00101C  6B                 	db	107
   170  00101D  6E                 	db	110
   171  00101E  4E                 	db	78
   172  00101F  03                 	db	3
   173  001020  15                 	db	21
   174  001021  50                 	db	80
   175  001022  79                 	db	121
   176  001023  AD                 	db	173
   177  001024  60                 	db	96
   178  001025  F3                 	db	243
   179  001026  49                 	db	73
   180  001027  71                 	db	113
   181  001028                     __end_of__powers_:
   182                           	callstack 0
   183  001028                     __npowers_:
   184                           	callstack 0
   185  001028  00                 	db	0
   186  001029  80                 	db	128
   187  00102A  3F                 	db	63
   188  00102B  CD                 	db	205
   189  00102C  CC                 	db	204
   190  00102D  3D                 	db	61
   191  00102E  D7                 	db	215
   192  00102F  23                 	db	35
   193  001030  3C                 	db	60
   194  001031  12                 	db	18
   195  001032  83                 	db	131
   196  001033  3A                 	db	58
   197  001034  B7                 	db	183
   198  001035  D1                 	db	209
   199  001036  38                 	db	56
   200  001037  C6                 	db	198
   201  001038  27                 	db	39
   202  001039  37                 	db	55
   203  00103A  38                 	db	56
   204  00103B  86                 	db	134
   205  00103C  35                 	db	53
   206  00103D  C0                 	db	192
   207  00103E  D6                 	db	214
   208  00103F  33                 	db	51
   209  001040  CC                 	db	204
   210  001041  2B                 	db	43
   211  001042  32                 	db	50
   212  001043  70                 	db	112
   213  001044  89                 	db	137
   214  001045  30                 	db	48
   215  001046  E7                 	db	231
   216  001047  DB                 	db	219
   217  001048  2E                 	db	46
   218  001049  E5                 	db	229
   219  00104A  3C                 	db	60
   220  00104B  1E                 	db	30
   221  00104C  42                 	db	66
   222  00104D  A2                 	db	162
   223  00104E  0D                 	db	13
   224  00104F                     __end_of__npowers_:
   225                           	callstack 0
   226  00104F                     _dpowers:
   227                           	callstack 0
   228  00104F  0001               	dw	1
   229  001051  0000               	dw	0
   230  001053  000A               	dw	10
   231  001055  0000               	dw	0
   232  001057  0064               	dw	100
   233  001059  0000               	dw	0
   234  00105B  03E8               	dw	1000
   235  00105D  0000               	dw	0
   236  00105F  2710               	dw	10000
   237  001061  0000               	dw	0
   238  001063  86A0               	dw	34464
   239  001065  0001               	dw	1
   240  001067  4240               	dw	16960
   241  001069  000F               	dw	15
   242  00106B  9680               	dw	38528
   243  00106D  0098               	dw	152
   244  00106F  E100               	dw	57600
   245  001071  05F5               	dw	1525
   246  001073  CA00               	dw	51712
   247  001075  3B9A               	dw	15258
   248  001077                     __end_of_dpowers:
   249                           	callstack 0
   250  0000                     _TRISCbits	set	3988
   251  0000                     _INTEDG1	set	32653
   252  0000                     _SSP1CON2bits	set	4037
   253  0000                     _LATDbits	set	3980
   254  0000                     _LATEbits	set	3981
   255  0000                     _INT1IF	set	32640
   256  0000                     _LATD7	set	31847
   257  0000                     _LATD6	set	31846
   258  0000                     _PEIE	set	32662
   259  0000                     _ANSELB	set	3897
   260  0000                     _ANSELC	set	3898
   261  0000                     _ANSELD	set	3899
   262  0000                     _OSCCON	set	4051
   263  0000                     _INT1IE	set	32643
   264  0000                     _GIE	set	32663
   265  0000                     _LATD	set	3980
   266  0000                     _TRISD	set	3989
   267  0000                     _ANSELE	set	3900
   268  0000                     _RCSTA1	set	4011
   269  0000                     _SPBRG1	set	4015
   270  0000                     _TRISE	set	3990
   271  0000                     _RC1IE	set	31981
   272  0000                     _TRISB	set	3987
   273  0000                     _LATE	set	3981
   274  0000                     _SSP1CON2	set	4037
   275  0000                     _SSP1CON1	set	4038
   276  0000                     _SSP1STAT	set	4039
   277  0000                     _RCREG1	set	4014
   278  0000                     _TXSTA1	set	4012
   279  0000                     _RC1IF	set	31989
   280  0000                     _SSP1BUF	set	4041
   281  0000                     _SSP1ADD	set	4040
   282  0000                     _SSP1CON3	set	4043
   283  001077                     STR_1:
   284  001077  53                 	db	83	;'S'
   285  001078  65                 	db	101	;'e'
   286  001079  72                 	db	114	;'r'
   287  00107A  76                 	db	118	;'v'
   288  00107B  6F                 	db	111	;'o'
   289  00107C  20                 	db	32
   290  00107D  31                 	db	49	;'1'
   291  00107E  3A                 	db	58	;':'
   292  00107F  25                 	db	37
   293  001080  2E                 	db	46
   294  001081  32                 	db	50	;'2'
   295  001082  66                 	db	102	;'f'
   296  001083  20                 	db	32
   297  001084  25                 	db	37
   298  001085  64                 	db	100	;'d'
   299  001086  00                 	db	0
   300  001087                     STR_5:
   301  001087  53                 	db	83	;'S'
   302  001088  65                 	db	101	;'e'
   303  001089  72                 	db	114	;'r'
   304  00108A  76                 	db	118	;'v'
   305  00108B  6F                 	db	111	;'o'
   306  00108C  20                 	db	32
   307  00108D  31                 	db	49	;'1'
   308  00108E  3A                 	db	58	;':'
   309  00108F  25                 	db	37
   310  001090  2E                 	db	46
   311  001091  32                 	db	50	;'2'
   312  001092  66                 	db	102	;'f'
   313  001093  00                 	db	0
   314  001094                     STR_2:
   315  001094  53                 	db	83	;'S'
   316  001095  65                 	db	101	;'e'
   317  001096  72                 	db	114	;'r'
   318  001097  76                 	db	118	;'v'
   319  001098  6F                 	db	111	;'o'
   320  001099  20                 	db	32
   321  00109A  32                 	db	50	;'2'
   322  00109B  3A                 	db	58	;':'
   323  00109C  25                 	db	37
   324  00109D  2E                 	db	46
   325  00109E  32                 	db	50	;'2'
   326  00109F  66                 	db	102	;'f'
   327  0010A0  00                 	db	0
   328  0010A1  00                 	db	0	; dummy byte at the end
   329  0000                     
   330                           ; #config settings
   331                           
   332                           	psect	cinit
   333  004870                     __pcinit:
   334                           	callstack 0
   335  004870                     start_initialization:
   336                           	callstack 0
   337  004870                     __initialization:
   338                           	callstack 0
   339                           
   340                           ; Initialize objects allocated to BANK0 (2 bytes)
   341                           ; load TBLPTR registers with __pidataBANK0
   342  004870  0EDA               	movlw	low __pidataBANK0
   343  004872  6EF6               	movwf	tblptrl,c
   344  004874  0E4A               	movlw	high __pidataBANK0
   345  004876  6EF7               	movwf	tblptrh,c
   346  004878  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   347  00487A  6EF8               	movwf	tblptru,c
   348  00487C  0009               	tblrd		*+	;fetch initializer
   349  00487E  CFF5 F0E4          	movff	tablat,__pdataBANK0
   350  004882  0009               	tblrd		*+	;fetch initializer
   351  004884  CFF5 F0E5          	movff	tablat,__pdataBANK0+1
   352                           
   353                           ; Clear objects allocated to BANK0 (47 bytes)
   354  004888  EE00  F0B5         	lfsr	0,__pbssBANK0
   355  00488C  0E2F               	movlw	47
   356  00488E                     clear_0:
   357  00488E  6AEE               	clrf	postinc0,c
   358  004890  06E8               	decf	wreg,f,c
   359  004892  E1FD               	bnz	clear_0
   360  004894                     end_of_initialization:
   361                           	callstack 0
   362  004894                     __end_of__initialization:
   363                           	callstack 0
   364  004894  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   365  004896  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   366  004898  0E00               	movlw	low (__Lmediumconst shr (0+16))
   367  00489A  6EF8               	movwf	tblptru,c
   368  00489C  0100               	movlb	0
   369  00489E  EFEE  F013         	goto	_main	;jump to C main() function
   370                           
   371                           	psect	bssBANK0
   372  0000B5                     __pbssBANK0:
   373                           	callstack 0
   374  0000B5                     _c:
   375                           	callstack 0
   376  0000B5                     	ds	3
   377  0000B8                     _b:
   378                           	callstack 0
   379  0000B8                     	ds	3
   380  0000BB                     _a:
   381                           	callstack 0
   382  0000BB                     	ds	3
   383  0000BE                     _inter:
   384                           	callstack 0
   385  0000BE                     	ds	2
   386  0000C0                     _led:
   387                           	callstack 0
   388  0000C0                     	ds	2
   389  0000C2                     _DriverPin:
   390                           	callstack 0
   391  0000C2                     	ds	2
   392  0000C4                     _pos:
   393                           	callstack 0
   394  0000C4                     	ds	2
   395  0000C6                     _confir:
   396                           	callstack 0
   397  0000C6                     	ds	2
   398  0000C8                     _i:
   399                           	callstack 0
   400  0000C8                     	ds	2
   401  0000CA                     _data1:
   402                           	callstack 0
   403  0000CA                     	ds	1
   404  0000CB                     _servo:
   405                           	callstack 0
   406  0000CB                     	ds	1
   407  0000CC                     _text:
   408                           	callstack 0
   409  0000CC                     	ds	20
   410  0000E0                     _data2:
   411                           	callstack 0
   412  0000E0                     	ds	4
   413                           
   414                           	psect	dataBANK0
   415  0000E4                     __pdataBANK0:
   416                           	callstack 0
   417  0000E4                     _flag:
   418                           	callstack 0
   419  0000E4                     	ds	2
   420                           
   421                           	psect	cstackBANK1
   422  000100                     __pcstackBANK1:
   423                           	callstack 0
   424  000100                     _sprintf$1124:
   425                           	callstack 0
   426                           
   427                           ; 3 bytes @ 0x0
   428  000100                     	ds	3
   429  000103                     sprintf@ap:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0x3
   433  000103                     	ds	1
   434  000104                     sprintf@flag:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x4
   438  000104                     	ds	2
   439  000106                     sprintf@eexp:
   440                           	callstack 0
   441                           
   442                           ; 2 bytes @ 0x6
   443  000106                     	ds	2
   444  000108                     sprintf@tmpval:
   445                           	callstack 0
   446                           
   447                           ; 4 bytes @ 0x8
   448  000108                     	ds	4
   449  00010C                     sprintf@val:
   450                           	callstack 0
   451                           
   452                           ; 4 bytes @ 0xC
   453  00010C                     	ds	4
   454  000110                     sprintf@prec:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x10
   458  000110                     	ds	2
   459  000112                     sprintf@fval:
   460                           	callstack 0
   461                           
   462                           ; 3 bytes @ 0x12
   463  000112                     	ds	3
   464  000115                     sprintf@c:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x15
   468  000115                     	ds	1
   469                           
   470                           	psect	cstackBANK0
   471  000060                     __pcstackBANK0:
   472                           	callstack 0
   473  000060                     ??_TMR1_ISR:
   474                           
   475                           ; 1 bytes @ 0x0
   476  000060                     	ds	10
   477  00006A                     TMR1_ISR@d:
   478                           	callstack 0
   479                           
   480                           ; 1 bytes @ 0xA
   481  00006A                     	ds	1
   482  00006B                     ??_LCD:
   483  00006B                     ??_readyI2C:
   484  00006B                     ??_isdigit:
   485  00006B                     ?_strlen:
   486                           	callstack 0
   487  00006B                     ?___awmod:
   488                           	callstack 0
   489  00006B                     ?___ftpack:
   490                           	callstack 0
   491  00006B                     ?___ftneg:
   492                           	callstack 0
   493  00006B                     ?__tdiv_to_l_:
   494                           	callstack 0
   495  00006B                     ?__div_to_l_:
   496                           	callstack 0
   497  00006B                     ?___lldiv:
   498                           	callstack 0
   499  00006B                     ___lbmod@divisor:
   500                           	callstack 0
   501  00006B                     strlen@s:
   502                           	callstack 0
   503  00006B                     ___awmod@dividend:
   504                           	callstack 0
   505  00006B                     __div_to_l_@f1:
   506                           	callstack 0
   507  00006B                     ___ftpack@arg:
   508                           	callstack 0
   509  00006B                     __tdiv_to_l_@f1:
   510                           	callstack 0
   511  00006B                     ___ftge@ff1:
   512                           	callstack 0
   513  00006B                     ___ftneg@f1:
   514                           	callstack 0
   515  00006B                     ___lldiv@dividend:
   516                           	callstack 0
   517                           
   518                           ; 4 bytes @ 0xB
   519  00006B                     	ds	1
   520  00006C                     ??_receiveI2C:
   521  00006C                     LCD@data:
   522                           	callstack 0
   523  00006C                     sendI2C@data:
   524                           	callstack 0
   525  00006C                     ___lbmod@dividend:
   526                           	callstack 0
   527  00006C                     _isdigit$930:
   528                           	callstack 0
   529                           
   530                           ; 1 bytes @ 0xC
   531  00006C                     	ds	1
   532  00006D                     SettingsLCD@word:
   533                           	callstack 0
   534  00006D                     WriteLCD@word:
   535                           	callstack 0
   536  00006D                     writeI2C@Register:
   537                           	callstack 0
   538  00006D                     receiveI2C@flag:
   539                           	callstack 0
   540  00006D                     writeI2C1@Register:
   541                           	callstack 0
   542  00006D                     ___lbmod@counter:
   543                           	callstack 0
   544  00006D                     isdigit@c:
   545                           	callstack 0
   546  00006D                     strlen@cp:
   547                           	callstack 0
   548  00006D                     ___awmod@divisor:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0xD
   552  00006D                     	ds	1
   553  00006E                     ??_DataLCD:
   554  00006E                     writeI2C@Data:
   555                           	callstack 0
   556  00006E                     receiveI2C@buffer:
   557                           	callstack 0
   558  00006E                     writeI2C1@Data:
   559                           	callstack 0
   560  00006E                     ___ftpack@exp:
   561                           	callstack 0
   562  00006E                     ___lbmod@rem:
   563                           	callstack 0
   564  00006E                     __div_to_l_@f2:
   565                           	callstack 0
   566  00006E                     __tdiv_to_l_@f2:
   567                           	callstack 0
   568  00006E                     ___ftge@ff2:
   569                           	callstack 0
   570                           
   571                           ; 3 bytes @ 0xE
   572  00006E                     	ds	1
   573  00006F                     ??_writeI2C1:
   574  00006F                     readI2C1@Register:
   575                           	callstack 0
   576  00006F                     ___awmod@counter:
   577                           	callstack 0
   578  00006F                     ___ftpack@sign:
   579                           	callstack 0
   580  00006F                     ___lbdiv@divisor:
   581                           	callstack 0
   582  00006F                     writeI2C@bytes:
   583                           	callstack 0
   584  00006F                     ___lldiv@divisor:
   585                           	callstack 0
   586                           
   587                           ; 4 bytes @ 0xF
   588  00006F                     	ds	1
   589  000070                     ??___ftpack:
   590  000070                     readI2C1@Data:
   591                           	callstack 0
   592  000070                     ___awmod@sign:
   593                           	callstack 0
   594  000070                     ___lbdiv@dividend:
   595                           	callstack 0
   596                           
   597                           ; 1 bytes @ 0x10
   598  000070                     	ds	1
   599  000071                     ??_writeI2C:
   600  000071                     ??__tdiv_to_l_:
   601  000071                     ??___ftge:
   602  000071                     ?___awdiv:
   603                           	callstack 0
   604  000071                     writeI2C1@Address:
   605                           	callstack 0
   606  000071                     ___lbdiv@counter:
   607                           	callstack 0
   608  000071                     readI2C1@bytes:
   609                           	callstack 0
   610  000071                     ___awdiv@dividend:
   611                           	callstack 0
   612  000071                     __div_to_l_@quot:
   613                           	callstack 0
   614                           
   615                           ; 4 bytes @ 0x11
   616  000071                     	ds	1
   617  000072                     ___lbdiv@quotient:
   618                           	callstack 0
   619                           
   620                           ; 1 bytes @ 0x12
   621  000072                     	ds	1
   622  000073                     ??_readI2C1:
   623  000073                     ?___lltoft:
   624                           	callstack 0
   625  000073                     writeI2C@Address:
   626                           	callstack 0
   627  000073                     ___awdiv@divisor:
   628                           	callstack 0
   629  000073                     ___lldiv@quotient:
   630                           	callstack 0
   631  000073                     ___lltoft@c:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x13
   635  000073                     	ds	1
   636  000074                     __tdiv_to_l_@quot:
   637                           	callstack 0
   638                           
   639                           ; 4 bytes @ 0x14
   640  000074                     	ds	1
   641  000075                     readI2C1@Address:
   642                           	callstack 0
   643  000075                     ___awdiv@counter:
   644                           	callstack 0
   645  000075                     __div_to_l_@cntr:
   646                           	callstack 0
   647                           
   648                           ; 1 bytes @ 0x15
   649  000075                     	ds	1
   650  000076                     ___awdiv@sign:
   651                           	callstack 0
   652  000076                     __div_to_l_@exp1:
   653                           	callstack 0
   654                           
   655                           ; 1 bytes @ 0x16
   656  000076                     	ds	1
   657  000077                     ??___lltoft:
   658  000077                     ___lldiv@counter:
   659                           	callstack 0
   660  000077                     ___awdiv@quotient:
   661                           	callstack 0
   662                           
   663                           ; 2 bytes @ 0x17
   664  000077                     	ds	1
   665  000078                     ?___llmod:
   666                           	callstack 0
   667  000078                     __tdiv_to_l_@cntr:
   668                           	callstack 0
   669  000078                     ___llmod@dividend:
   670                           	callstack 0
   671                           
   672                           ; 4 bytes @ 0x18
   673  000078                     	ds	1
   674  000079                     ?___wmul:
   675                           	callstack 0
   676  000079                     ?___ftmul:
   677                           	callstack 0
   678  000079                     __tdiv_to_l_@exp1:
   679                           	callstack 0
   680  000079                     ___wmul@multiplier:
   681                           	callstack 0
   682  000079                     ___ftmul@f1:
   683                           	callstack 0
   684                           
   685                           ; 3 bytes @ 0x19
   686  000079                     	ds	2
   687  00007B                     ___lltoft@exp:
   688                           	callstack 0
   689  00007B                     ___wmul@multiplicand:
   690                           	callstack 0
   691                           
   692                           ; 2 bytes @ 0x1B
   693  00007B                     	ds	1
   694  00007C                     ?___ftdiv:
   695                           	callstack 0
   696  00007C                     ___ftdiv@f1:
   697                           	callstack 0
   698  00007C                     ___ftmul@f2:
   699                           	callstack 0
   700  00007C                     ___llmod@divisor:
   701                           	callstack 0
   702                           
   703                           ; 4 bytes @ 0x1C
   704  00007C                     	ds	1
   705  00007D                     ___wmul@product:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x1D
   709  00007D                     	ds	2
   710  00007F                     ??___ftmul:
   711  00007F                     ___ftdiv@f2:
   712                           	callstack 0
   713                           
   714                           ; 3 bytes @ 0x1F
   715  00007F                     	ds	1
   716  000080                     ___llmod@counter:
   717                           	callstack 0
   718                           
   719                           ; 1 bytes @ 0x20
   720  000080                     	ds	2
   721  000082                     ??___ftdiv:
   722  000082                     ___ftmul@exp:
   723                           	callstack 0
   724                           
   725                           ; 1 bytes @ 0x22
   726  000082                     	ds	1
   727  000083                     ___ftmul@f3_as_product:
   728                           	callstack 0
   729                           
   730                           ; 3 bytes @ 0x23
   731  000083                     	ds	2
   732  000085                     ___ftdiv@cntr:
   733                           	callstack 0
   734                           
   735                           ; 1 bytes @ 0x25
   736  000085                     	ds	1
   737  000086                     ___ftmul@cntr:
   738                           	callstack 0
   739  000086                     ___ftdiv@f3:
   740                           	callstack 0
   741                           
   742                           ; 3 bytes @ 0x26
   743  000086                     	ds	1
   744  000087                     ___ftmul@sign:
   745                           	callstack 0
   746                           
   747                           ; 1 bytes @ 0x27
   748  000087                     	ds	1
   749  000088                     ?_fround:
   750                           	callstack 0
   751  000088                     ?_scale:
   752                           	callstack 0
   753                           
   754                           ; 3 bytes @ 0x28
   755  000088                     	ds	1
   756  000089                     ___ftdiv@exp:
   757                           	callstack 0
   758                           
   759                           ; 1 bytes @ 0x29
   760  000089                     	ds	1
   761  00008A                     ___ftdiv@sign:
   762                           	callstack 0
   763                           
   764                           ; 1 bytes @ 0x2A
   765  00008A                     	ds	1
   766  00008B                     ??_fround:
   767  00008B                     ??_scale:
   768                           
   769                           ; 1 bytes @ 0x2B
   770  00008B                     	ds	4
   771  00008F                     _fround$1122:
   772                           	callstack 0
   773  00008F                     _scale$1123:
   774                           	callstack 0
   775                           
   776                           ; 3 bytes @ 0x2F
   777  00008F                     	ds	3
   778  000092                     scale@scl:
   779                           	callstack 0
   780  000092                     _fround$1121:
   781                           	callstack 0
   782                           
   783                           ; 3 bytes @ 0x32
   784  000092                     	ds	1
   785  000093                     ?___fttol:
   786                           	callstack 0
   787  000093                     ___fttol@f1:
   788                           	callstack 0
   789                           
   790                           ; 3 bytes @ 0x33
   791  000093                     	ds	2
   792  000095                     fround@prec:
   793                           	callstack 0
   794                           
   795                           ; 1 bytes @ 0x35
   796  000095                     	ds	1
   797  000096                     ?___ftadd:
   798                           	callstack 0
   799  000096                     ___ftadd@f1:
   800                           	callstack 0
   801                           
   802                           ; 3 bytes @ 0x36
   803  000096                     	ds	1
   804  000097                     ??___fttol:
   805                           
   806                           ; 1 bytes @ 0x37
   807  000097                     	ds	2
   808  000099                     ___ftadd@f2:
   809                           	callstack 0
   810                           
   811                           ; 3 bytes @ 0x39
   812  000099                     	ds	3
   813  00009C                     ??___ftadd:
   814  00009C                     ___fttol@sign1:
   815                           	callstack 0
   816                           
   817                           ; 1 bytes @ 0x3C
   818  00009C                     	ds	1
   819  00009D                     ___fttol@lval:
   820                           	callstack 0
   821                           
   822                           ; 4 bytes @ 0x3D
   823  00009D                     	ds	2
   824  00009F                     ___ftadd@sign:
   825                           	callstack 0
   826                           
   827                           ; 1 bytes @ 0x3F
   828  00009F                     	ds	1
   829  0000A0                     ___ftadd@exp2:
   830                           	callstack 0
   831                           
   832                           ; 1 bytes @ 0x40
   833  0000A0                     	ds	1
   834  0000A1                     ___ftadd@exp1:
   835                           	callstack 0
   836  0000A1                     ___fttol@exp1:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0x41
   840  0000A1                     	ds	1
   841  0000A2                     ?_map:
   842                           	callstack 0
   843  0000A2                     ?___ftsub:
   844                           	callstack 0
   845  0000A2                     map@x:
   846                           	callstack 0
   847  0000A2                     setPWMFreq@freq:
   848                           	callstack 0
   849  0000A2                     ___ftsub@f1:
   850                           	callstack 0
   851                           
   852                           ; 3 bytes @ 0x42
   853  0000A2                     	ds	2
   854  0000A4                     map@In_Min:
   855                           	callstack 0
   856                           
   857                           ; 2 bytes @ 0x44
   858  0000A4                     	ds	1
   859  0000A5                     ??_setPWMFreq:
   860  0000A5                     ___ftsub@f2:
   861                           	callstack 0
   862                           
   863                           ; 3 bytes @ 0x45
   864  0000A5                     	ds	1
   865  0000A6                     setPWMFreq@prescale:
   866                           	callstack 0
   867  0000A6                     map@In_Max:
   868                           	callstack 0
   869                           
   870                           ; 2 bytes @ 0x46
   871  0000A6                     	ds	1
   872  0000A7                     setPWMFreq@prescaleval:
   873                           	callstack 0
   874                           
   875                           ; 4 bytes @ 0x47
   876  0000A7                     	ds	1
   877  0000A8                     ?_sprintf:
   878                           	callstack 0
   879  0000A8                     sprintf@sp:
   880                           	callstack 0
   881  0000A8                     map@Out_Min:
   882                           	callstack 0
   883                           
   884                           ; 2 bytes @ 0x48
   885  0000A8                     	ds	1
   886  0000A9                     sprintf@f:
   887                           	callstack 0
   888                           
   889                           ; 1 bytes @ 0x49
   890  0000A9                     	ds	1
   891  0000AA                     map@Out_Max:
   892                           	callstack 0
   893                           
   894                           ; 2 bytes @ 0x4A
   895  0000AA                     	ds	1
   896  0000AB                     ??_settings:
   897                           
   898                           ; 1 bytes @ 0x4B
   899  0000AB                     	ds	1
   900  0000AC                     
   901                           ; 1 bytes @ 0x4C
   902  0000AC                     	ds	3
   903  0000AF                     ??_sprintf:
   904                           
   905                           ; 1 bytes @ 0x4F
   906  0000AF                     	ds	6
   907  0000B5                     
   908                           ; 1 bytes @ 0x55
   909                           
   910                           	psect	cstackCOMRAM
   911  000001                     __pcstackCOMRAM:
   912                           	callstack 0
   913  000001                     ??i2_LCD:
   914  000001                     ??i2_readyI2C:
   915  000001                     ??i2_isdigit:
   916  000001                     ?i2___awmod:
   917                           	callstack 0
   918  000001                     ?i2_strlen:
   919                           	callstack 0
   920  000001                     ?i2___ftpack:
   921                           	callstack 0
   922  000001                     ?i2___ftneg:
   923                           	callstack 0
   924  000001                     ?i2___lldiv:
   925                           	callstack 0
   926  000001                     ?i2__div_to_l_:
   927                           	callstack 0
   928  000001                     ?i2__tdiv_to_l_:
   929                           	callstack 0
   930  000001                     i2___lbmod@divisor:
   931                           	callstack 0
   932  000001                     i2strlen@s:
   933                           	callstack 0
   934  000001                     i2___awmod@dividend:
   935                           	callstack 0
   936  000001                     i2__div_to_l_@f1:
   937                           	callstack 0
   938  000001                     i2___ftpack@arg:
   939                           	callstack 0
   940  000001                     i2__tdiv_to_l_@f1:
   941                           	callstack 0
   942  000001                     i2___ftge@ff1:
   943                           	callstack 0
   944  000001                     i2___ftneg@f1:
   945                           	callstack 0
   946  000001                     i2___lldiv@dividend:
   947                           	callstack 0
   948                           
   949                           ; 4 bytes @ 0x0
   950  000001                     	ds	1
   951  000002                     i2LCD@data:
   952                           	callstack 0
   953  000002                     i2sendI2C@data:
   954                           	callstack 0
   955  000002                     i2___lbmod@dividend:
   956                           	callstack 0
   957  000002                     i2_isdigit$930:
   958                           	callstack 0
   959                           
   960                           ; 1 bytes @ 0x1
   961  000002                     	ds	1
   962  000003                     i2SettingsLCD@word:
   963                           	callstack 0
   964  000003                     i2WriteLCD@word:
   965                           	callstack 0
   966  000003                     i2writeI2C@Register:
   967                           	callstack 0
   968  000003                     i2___lbmod@counter:
   969                           	callstack 0
   970  000003                     i2isdigit@c:
   971                           	callstack 0
   972  000003                     i2strlen@cp:
   973                           	callstack 0
   974  000003                     i2___awmod@divisor:
   975                           	callstack 0
   976                           
   977                           ; 2 bytes @ 0x2
   978  000003                     	ds	1
   979  000004                     ??i2_DataLCD:
   980  000004                     i2writeI2C@Data:
   981                           	callstack 0
   982  000004                     i2___ftpack@exp:
   983                           	callstack 0
   984  000004                     i2___lbmod@rem:
   985                           	callstack 0
   986  000004                     i2__div_to_l_@f2:
   987                           	callstack 0
   988  000004                     i2__tdiv_to_l_@f2:
   989                           	callstack 0
   990  000004                     i2___ftge@ff2:
   991                           	callstack 0
   992                           
   993                           ; 3 bytes @ 0x3
   994  000004                     	ds	1
   995  000005                     i2___awmod@counter:
   996                           	callstack 0
   997  000005                     i2___ftpack@sign:
   998                           	callstack 0
   999  000005                     i2___lbdiv@divisor:
  1000                           	callstack 0
  1001  000005                     i2writeI2C@bytes:
  1002                           	callstack 0
  1003  000005                     i2___lldiv@divisor:
  1004                           	callstack 0
  1005                           
  1006                           ; 4 bytes @ 0x4
  1007  000005                     	ds	1
  1008  000006                     ??i2___ftpack:
  1009  000006                     i2___awmod@sign:
  1010                           	callstack 0
  1011  000006                     i2___lbdiv@dividend:
  1012                           	callstack 0
  1013                           
  1014                           ; 1 bytes @ 0x5
  1015  000006                     	ds	1
  1016  000007                     ??i2_writeI2C:
  1017  000007                     ??i2__tdiv_to_l_:
  1018  000007                     ??i2___ftge:
  1019  000007                     ?i2___awdiv:
  1020                           	callstack 0
  1021  000007                     i2___lbdiv@counter:
  1022                           	callstack 0
  1023  000007                     i2___awdiv@dividend:
  1024                           	callstack 0
  1025  000007                     i2__div_to_l_@quot:
  1026                           	callstack 0
  1027                           
  1028                           ; 4 bytes @ 0x6
  1029  000007                     	ds	1
  1030  000008                     i2___lbdiv@quotient:
  1031                           	callstack 0
  1032                           
  1033                           ; 1 bytes @ 0x7
  1034  000008                     	ds	1
  1035  000009                     ?___awtoft:
  1036                           	callstack 0
  1037  000009                     ?i2___lltoft:
  1038                           	callstack 0
  1039  000009                     i2writeI2C@Address:
  1040                           	callstack 0
  1041  000009                     ___awtoft@c:
  1042                           	callstack 0
  1043  000009                     i2___awdiv@divisor:
  1044                           	callstack 0
  1045  000009                     i2___lldiv@quotient:
  1046                           	callstack 0
  1047  000009                     i2___lltoft@c:
  1048                           	callstack 0
  1049                           
  1050                           ; 4 bytes @ 0x8
  1051  000009                     	ds	1
  1052  00000A                     i2__tdiv_to_l_@quot:
  1053                           	callstack 0
  1054                           
  1055                           ; 4 bytes @ 0x9
  1056  00000A                     	ds	1
  1057  00000B                     i2___awdiv@counter:
  1058                           	callstack 0
  1059  00000B                     i2__div_to_l_@cntr:
  1060                           	callstack 0
  1061                           
  1062                           ; 1 bytes @ 0xA
  1063  00000B                     	ds	1
  1064  00000C                     ___awtoft@sign:
  1065                           	callstack 0
  1066  00000C                     i2___awdiv@sign:
  1067                           	callstack 0
  1068  00000C                     i2__div_to_l_@exp1:
  1069                           	callstack 0
  1070                           
  1071                           ; 1 bytes @ 0xB
  1072  00000C                     	ds	1
  1073  00000D                     ??i2___lltoft:
  1074  00000D                     i2___lldiv@counter:
  1075                           	callstack 0
  1076  00000D                     i2___awdiv@quotient:
  1077                           	callstack 0
  1078                           
  1079                           ; 2 bytes @ 0xC
  1080  00000D                     	ds	1
  1081  00000E                     ?i2___llmod:
  1082                           	callstack 0
  1083  00000E                     i2__tdiv_to_l_@cntr:
  1084                           	callstack 0
  1085  00000E                     i2___llmod@dividend:
  1086                           	callstack 0
  1087                           
  1088                           ; 4 bytes @ 0xD
  1089  00000E                     	ds	1
  1090  00000F                     ?i2___wmul:
  1091                           	callstack 0
  1092  00000F                     ?i2___ftmul:
  1093                           	callstack 0
  1094  00000F                     i2__tdiv_to_l_@exp1:
  1095                           	callstack 0
  1096  00000F                     i2___wmul@multiplier:
  1097                           	callstack 0
  1098  00000F                     i2___ftmul@f1:
  1099                           	callstack 0
  1100                           
  1101                           ; 3 bytes @ 0xE
  1102  00000F                     	ds	2
  1103  000011                     i2___lltoft@exp:
  1104                           	callstack 0
  1105  000011                     i2___wmul@multiplicand:
  1106                           	callstack 0
  1107                           
  1108                           ; 2 bytes @ 0x10
  1109  000011                     	ds	1
  1110  000012                     i2___ftmul@f2:
  1111                           	callstack 0
  1112  000012                     i2___llmod@divisor:
  1113                           	callstack 0
  1114                           
  1115                           ; 4 bytes @ 0x11
  1116  000012                     	ds	1
  1117  000013                     i2___wmul@product:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x12
  1121  000013                     	ds	2
  1122  000015                     ??i2___ftmul:
  1123                           
  1124                           ; 1 bytes @ 0x14
  1125  000015                     	ds	1
  1126  000016                     i2___llmod@counter:
  1127                           	callstack 0
  1128                           
  1129                           ; 1 bytes @ 0x15
  1130  000016                     	ds	2
  1131  000018                     i2___ftmul@exp:
  1132                           	callstack 0
  1133                           
  1134                           ; 1 bytes @ 0x17
  1135  000018                     	ds	1
  1136  000019                     i2___ftmul@f3_as_product:
  1137                           	callstack 0
  1138                           
  1139                           ; 3 bytes @ 0x18
  1140  000019                     	ds	3
  1141  00001C                     i2___ftmul@cntr:
  1142                           	callstack 0
  1143                           
  1144                           ; 1 bytes @ 0x1B
  1145  00001C                     	ds	1
  1146  00001D                     i2___ftmul@sign:
  1147                           	callstack 0
  1148                           
  1149                           ; 1 bytes @ 0x1C
  1150  00001D                     	ds	1
  1151  00001E                     ?i2_fround:
  1152                           	callstack 0
  1153  00001E                     ?i2_scale:
  1154                           	callstack 0
  1155  00001E                     ?i2___fttol:
  1156                           	callstack 0
  1157  00001E                     i2___fttol@f1:
  1158                           	callstack 0
  1159                           
  1160                           ; 3 bytes @ 0x1D
  1161  00001E                     	ds	3
  1162  000021                     ??i2_fround:
  1163  000021                     ??i2_scale:
  1164                           
  1165                           ; 1 bytes @ 0x20
  1166  000021                     	ds	1
  1167  000022                     ??i2___fttol:
  1168                           
  1169                           ; 1 bytes @ 0x21
  1170  000022                     	ds	3
  1171  000025                     i2_fround$1354:
  1172                           	callstack 0
  1173  000025                     i2_scale$1355:
  1174                           	callstack 0
  1175                           
  1176                           ; 3 bytes @ 0x24
  1177  000025                     	ds	2
  1178  000027                     i2___fttol@sign1:
  1179                           	callstack 0
  1180                           
  1181                           ; 1 bytes @ 0x26
  1182  000027                     	ds	1
  1183  000028                     i2scale@scl:
  1184                           	callstack 0
  1185  000028                     i2_fround$1353:
  1186                           	callstack 0
  1187  000028                     i2___fttol@lval:
  1188                           	callstack 0
  1189                           
  1190                           ; 4 bytes @ 0x27
  1191  000028                     	ds	3
  1192  00002B                     i2fround@prec:
  1193                           	callstack 0
  1194                           
  1195                           ; 1 bytes @ 0x2A
  1196  00002B                     	ds	1
  1197  00002C                     ?i2___ftadd:
  1198                           	callstack 0
  1199  00002C                     i2___fttol@exp1:
  1200                           	callstack 0
  1201  00002C                     i2___ftadd@f1:
  1202                           	callstack 0
  1203                           
  1204                           ; 3 bytes @ 0x2B
  1205  00002C                     	ds	1
  1206  00002D                     ?i2_map:
  1207                           	callstack 0
  1208  00002D                     i2map@x:
  1209                           	callstack 0
  1210                           
  1211                           ; 2 bytes @ 0x2C
  1212  00002D                     	ds	2
  1213  00002F                     i2map@In_Min:
  1214                           	callstack 0
  1215  00002F                     i2___ftadd@f2:
  1216                           	callstack 0
  1217                           
  1218                           ; 3 bytes @ 0x2E
  1219  00002F                     	ds	2
  1220  000031                     i2map@In_Max:
  1221                           	callstack 0
  1222                           
  1223                           ; 2 bytes @ 0x30
  1224  000031                     	ds	1
  1225  000032                     ??i2___ftadd:
  1226                           
  1227                           ; 1 bytes @ 0x31
  1228  000032                     	ds	1
  1229  000033                     i2map@Out_Min:
  1230                           	callstack 0
  1231                           
  1232                           ; 2 bytes @ 0x32
  1233  000033                     	ds	2
  1234  000035                     i2___ftadd@sign:
  1235                           	callstack 0
  1236  000035                     i2map@Out_Max:
  1237                           	callstack 0
  1238                           
  1239                           ; 2 bytes @ 0x34
  1240  000035                     	ds	1
  1241  000036                     i2___ftadd@exp2:
  1242                           	callstack 0
  1243                           
  1244                           ; 1 bytes @ 0x35
  1245  000036                     	ds	1
  1246  000037                     i2___ftadd@exp1:
  1247                           	callstack 0
  1248                           
  1249                           ; 1 bytes @ 0x36
  1250  000037                     	ds	1
  1251  000038                     ?i2___ftsub:
  1252                           	callstack 0
  1253  000038                     i2___ftsub@f1:
  1254                           	callstack 0
  1255                           
  1256                           ; 3 bytes @ 0x37
  1257  000038                     	ds	3
  1258  00003B                     i2___ftsub@f2:
  1259                           	callstack 0
  1260                           
  1261                           ; 3 bytes @ 0x3A
  1262  00003B                     	ds	3
  1263  00003E                     ?i2_sprintf:
  1264                           	callstack 0
  1265  00003E                     i2sprintf@sp:
  1266                           	callstack 0
  1267                           
  1268                           ; 1 bytes @ 0x3D
  1269  00003E                     	ds	1
  1270  00003F                     i2sprintf@f:
  1271                           	callstack 0
  1272                           
  1273                           ; 1 bytes @ 0x3E
  1274  00003F                     	ds	4
  1275  000043                     ??i2_sprintf:
  1276                           
  1277                           ; 1 bytes @ 0x42
  1278  000043                     	ds	6
  1279  000049                     i2_sprintf$1356:
  1280                           	callstack 0
  1281                           
  1282                           ; 3 bytes @ 0x48
  1283  000049                     	ds	3
  1284  00004C                     i2sprintf@ap:
  1285                           	callstack 0
  1286                           
  1287                           ; 1 bytes @ 0x4B
  1288  00004C                     	ds	1
  1289  00004D                     i2sprintf@flag:
  1290                           	callstack 0
  1291                           
  1292                           ; 2 bytes @ 0x4C
  1293  00004D                     	ds	2
  1294  00004F                     i2sprintf@eexp:
  1295                           	callstack 0
  1296                           
  1297                           ; 2 bytes @ 0x4E
  1298  00004F                     	ds	2
  1299  000051                     i2sprintf@tmpval:
  1300                           	callstack 0
  1301                           
  1302                           ; 4 bytes @ 0x50
  1303  000051                     	ds	4
  1304  000055                     i2sprintf@val:
  1305                           	callstack 0
  1306                           
  1307                           ; 4 bytes @ 0x54
  1308  000055                     	ds	4
  1309  000059                     i2sprintf@prec:
  1310                           	callstack 0
  1311                           
  1312                           ; 2 bytes @ 0x58
  1313  000059                     	ds	2
  1314  00005B                     i2sprintf@fval:
  1315                           	callstack 0
  1316                           
  1317                           ; 3 bytes @ 0x5A
  1318  00005B                     	ds	3
  1319  00005E                     i2sprintf@c:
  1320                           	callstack 0
  1321                           
  1322                           ; 1 bytes @ 0x5D
  1323  00005E                     	ds	1
  1324                           
  1325 ;;
  1326 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1327 ;;
  1328 ;; *************** function _main *****************
  1329 ;; Defined at:
  1330 ;;		line 93 in file "BORRAR.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 3F/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1348 ;;Total ram usage:        0 bytes
  1349 ;; Hardware stack levels required when called: 10
  1350 ;; This function calls:
  1351 ;;		_DataLCD
  1352 ;;		_SettingsLCD
  1353 ;;		___fttol
  1354 ;;		_map
  1355 ;;		_settings
  1356 ;;		_sprintf
  1357 ;;		_writeI2C
  1358 ;; This function is called by:
  1359 ;;		Startup code after reset
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text0
  1364  0027DC                     __ptext0:
  1365                           	callstack 0
  1366  0027DC                     _main:
  1367                           	callstack 21
  1368                           
  1369                           ;BORRAR.c: 94: settings();
  1370                           
  1371                           ;incstack = 0
  1372  0027DC  ECFD  F01C         	call	_settings	;wreg free
  1373  0027E0                     l6618:
  1374                           
  1375                           ;BORRAR.c: 97: if(inter == 1){
  1376  0027E0  0100               	movlb	0	; () banked
  1377  0027E2  05BE               	decf	_inter& (0+255),w,b
  1378  0027E4  11BF               	iorwf	(_inter+1)& (0+255),w,b
  1379  0027E6  A4D8               	btfss	status,2,c
  1380  0027E8  D0AD               	goto	l6652
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;BORRAR.c: 98: b = 108.1755;
  1384  0027EA  0E5A               	movlw	90
  1385  0027EC  6FB8               	movwf	_b& (0+255),b
  1386  0027EE  0ED8               	movlw	216
  1387  0027F0  6FB9               	movwf	(_b+1)& (0+255),b
  1388  0027F2  0E42               	movlw	66
  1389  0027F4  6FBA               	movwf	(_b+2)& (0+255),b
  1390                           
  1391                           ;BORRAR.c: 99: c = 63.2563;
  1392  0027F6  0E06               	movlw	6
  1393  0027F8  6FB5               	movwf	_c& (0+255),b
  1394  0027FA  0E7D               	movlw	125
  1395  0027FC  6FB6               	movwf	(_c+1)& (0+255),b
  1396  0027FE  0E42               	movlw	66
  1397  002800  6FB7               	movwf	(_c+2)& (0+255),b
  1398                           
  1399                           ;BORRAR.c: 100: data2[0] = 0;
  1400  002802  0E00               	movlw	0
  1401  002804  6FE0               	movwf	_data2& (0+255),b
  1402                           
  1403                           ;BORRAR.c: 101: data2[1] = 0;
  1404  002806  0E00               	movlw	0
  1405  002808  6FE1               	movwf	(_data2+1)& (0+255),b
  1406                           
  1407                           ;BORRAR.c: 103: DriverPin = 0;
  1408  00280A  0E00               	movlw	0
  1409  00280C  6FC3               	movwf	(_DriverPin+1)& (0+255),b
  1410  00280E  0E00               	movlw	0
  1411  002810  6FC2               	movwf	_DriverPin& (0+255),b
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;BORRAR.c: 104: pos = map(b, 0, 180, 110, 510);
  1415  002812  C0B8  F093         	movff	_b,___fttol@f1
  1416  002816  C0B9  F094         	movff	_b+1,___fttol@f1+1
  1417  00281A  C0BA  F095         	movff	_b+2,___fttol@f1+2
  1418  00281E  EC6F  F01D         	call	___fttol	;wreg free
  1419  002822  C093  F0A2         	movff	?___fttol,map@x
  1420  002826  C094  F0A3         	movff	?___fttol+1,map@x+1
  1421  00282A  0E00               	movlw	0
  1422  00282C  6FA5               	movwf	(map@In_Min+1)& (0+255),b
  1423  00282E  0E00               	movlw	0
  1424  002830  6FA4               	movwf	map@In_Min& (0+255),b
  1425  002832  0E00               	movlw	0
  1426  002834  6FA7               	movwf	(map@In_Max+1)& (0+255),b
  1427  002836  0EB4               	movlw	180
  1428  002838  6FA6               	movwf	map@In_Max& (0+255),b
  1429  00283A  0E00               	movlw	0
  1430  00283C  6FA9               	movwf	(map@Out_Min+1)& (0+255),b
  1431  00283E  0E6E               	movlw	110
  1432  002840  6FA8               	movwf	map@Out_Min& (0+255),b
  1433  002842  0E01               	movlw	1
  1434  002844  6FAB               	movwf	(map@Out_Max+1)& (0+255),b
  1435  002846  0EFE               	movlw	254
  1436  002848  6FAA               	movwf	map@Out_Max& (0+255),b
  1437  00284A  EC26  F023         	call	_map	;wreg free
  1438  00284E  C0A2  F0C4         	movff	?_map,_pos
  1439  002852  C0A3  F0C5         	movff	?_map+1,_pos+1
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;BORRAR.c: 105: data2[2] = pos;
  1443  002856  C0C4  F0E2         	movff	_pos,_data2+2
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;BORRAR.c: 106: data2[3] = pos >> 8;
  1447  00285A  51C5               	movf	(_pos+1)& (0+255),w,b
  1448  00285C  6FE3               	movwf	(_data2+3)& (0+255),b
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;BORRAR.c: 108: writeI2C(0x80, 0x06 + (4 * DriverPin), data2, 4);
  1452  00285E  51C2               	movf	_DriverPin& (0+255),w,b
  1453  002860  0D04               	mullw	4
  1454  002862  50F3               	movf	243,w,c
  1455  002864  0F06               	addlw	6
  1456  002866  6F6D               	movwf	writeI2C@Register& (0+255),b
  1457  002868  0EE0               	movlw	low _data2
  1458  00286A  6F6E               	movwf	writeI2C@Data& (0+255),b
  1459  00286C  0E00               	movlw	0
  1460  00286E  6F70               	movwf	(writeI2C@bytes+1)& (0+255),b
  1461  002870  0E04               	movlw	4
  1462  002872  6F6F               	movwf	writeI2C@bytes& (0+255),b
  1463  002874  0E80               	movlw	128
  1464  002876  ECB4  F022         	call	_writeI2C
  1465                           
  1466                           ;BORRAR.c: 111: DriverPin = 1;
  1467  00287A  0E00               	movlw	0
  1468  00287C  0100               	movlb	0	; () banked
  1469  00287E  6FC3               	movwf	(_DriverPin+1)& (0+255),b
  1470  002880  0E01               	movlw	1
  1471  002882  6FC2               	movwf	_DriverPin& (0+255),b
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;BORRAR.c: 112: pos = map(c, 0, 180, 110, 510);
  1475  002884  C0B5  F093         	movff	_c,___fttol@f1
  1476  002888  C0B6  F094         	movff	_c+1,___fttol@f1+1
  1477  00288C  C0B7  F095         	movff	_c+2,___fttol@f1+2
  1478  002890  EC6F  F01D         	call	___fttol	;wreg free
  1479  002894  C093  F0A2         	movff	?___fttol,map@x
  1480  002898  C094  F0A3         	movff	?___fttol+1,map@x+1
  1481  00289C  0E00               	movlw	0
  1482  00289E  6FA5               	movwf	(map@In_Min+1)& (0+255),b
  1483  0028A0  0E00               	movlw	0
  1484  0028A2  6FA4               	movwf	map@In_Min& (0+255),b
  1485  0028A4  0E00               	movlw	0
  1486  0028A6  6FA7               	movwf	(map@In_Max+1)& (0+255),b
  1487  0028A8  0EB4               	movlw	180
  1488  0028AA  6FA6               	movwf	map@In_Max& (0+255),b
  1489  0028AC  0E00               	movlw	0
  1490  0028AE  6FA9               	movwf	(map@Out_Min+1)& (0+255),b
  1491  0028B0  0E6E               	movlw	110
  1492  0028B2  6FA8               	movwf	map@Out_Min& (0+255),b
  1493  0028B4  0E01               	movlw	1
  1494  0028B6  6FAB               	movwf	(map@Out_Max+1)& (0+255),b
  1495  0028B8  0EFE               	movlw	254
  1496  0028BA  6FAA               	movwf	map@Out_Max& (0+255),b
  1497  0028BC  EC26  F023         	call	_map	;wreg free
  1498  0028C0  C0A2  F0C4         	movff	?_map,_pos
  1499  0028C4  C0A3  F0C5         	movff	?_map+1,_pos+1
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;BORRAR.c: 113: data2[2] = pos;
  1503  0028C8  C0C4  F0E2         	movff	_pos,_data2+2
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;BORRAR.c: 114: data2[3] = pos >> 8;
  1507  0028CC  51C5               	movf	(_pos+1)& (0+255),w,b
  1508  0028CE  6FE3               	movwf	(_data2+3)& (0+255),b
  1509                           
  1510                           ;BORRAR.c: 116: writeI2C(0x80, 0x06 + (4 * DriverPin), data2, 4);
  1511  0028D0  51C2               	movf	_DriverPin& (0+255),w,b
  1512  0028D2  0D04               	mullw	4
  1513  0028D4  50F3               	movf	243,w,c
  1514  0028D6  0F06               	addlw	6
  1515  0028D8  6F6D               	movwf	writeI2C@Register& (0+255),b
  1516  0028DA  0EE0               	movlw	low _data2
  1517  0028DC  6F6E               	movwf	writeI2C@Data& (0+255),b
  1518  0028DE  0E00               	movlw	0
  1519  0028E0  6F70               	movwf	(writeI2C@bytes+1)& (0+255),b
  1520  0028E2  0E04               	movlw	4
  1521  0028E4  6F6F               	movwf	writeI2C@bytes& (0+255),b
  1522  0028E6  0E80               	movlw	128
  1523  0028E8  ECB4  F022         	call	_writeI2C
  1524                           
  1525                           ;BORRAR.c: 118: SettingsLCD(0x01);
  1526  0028EC  0E01               	movlw	1
  1527  0028EE  EC09  F025         	call	_SettingsLCD
  1528                           
  1529                           ;BORRAR.c: 119: SettingsLCD(0x80);
  1530  0028F2  0E80               	movlw	128
  1531  0028F4  EC09  F025         	call	_SettingsLCD
  1532                           
  1533                           ;BORRAR.c: 120: sprintf(text,"Servo 1:%.2f %d",b, inter);
  1534  0028F8  0ECC               	movlw	low _text
  1535  0028FA  0100               	movlb	0	; () banked
  1536  0028FC  6FA8               	movwf	sprintf@sp& (0+255),b
  1537  0028FE  0E77               	movlw	low STR_1
  1538  002900  6FA9               	movwf	sprintf@f& (0+255),b
  1539  002902  C0B8  F0AA         	movff	_b,?_sprintf+2
  1540  002906  C0B9  F0AB         	movff	_b+1,?_sprintf+3
  1541  00290A  C0BA  F0AC         	movff	_b+2,?_sprintf+4
  1542  00290E  C0BE  F0AD         	movff	_inter,?_sprintf+5
  1543  002912  C0BF  F0AE         	movff	_inter+1,?_sprintf+6
  1544  002916  EC51  F008         	call	_sprintf	;wreg free
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;BORRAR.c: 121: DataLCD();
  1548  00291A  ECE0  F022         	call	_DataLCD	;wreg free
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;BORRAR.c: 124: SettingsLCD(0xC0);
  1552  00291E  0EC0               	movlw	192
  1553  002920  EC09  F025         	call	_SettingsLCD
  1554                           
  1555                           ;BORRAR.c: 125: sprintf(text,"Servo 2:%.2f",c);
  1556  002924  0ECC               	movlw	low _text
  1557  002926  0100               	movlb	0	; () banked
  1558  002928  6FA8               	movwf	sprintf@sp& (0+255),b
  1559  00292A  0E94               	movlw	low STR_2
  1560  00292C  6FA9               	movwf	sprintf@f& (0+255),b
  1561  00292E  C0B5  F0AA         	movff	_c,?_sprintf+2
  1562  002932  C0B6  F0AB         	movff	_c+1,?_sprintf+3
  1563  002936  C0B7  F0AC         	movff	_c+2,?_sprintf+4
  1564  00293A  EC51  F008         	call	_sprintf	;wreg free
  1565  00293E                     l6650:
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;BORRAR.c: 126: DataLCD();
  1569  00293E  ECE0  F022         	call	_DataLCD	;wreg free
  1570                           
  1571                           ;BORRAR.c: 128: }
  1572  002942  D74E               	goto	l6618
  1573  002944                     l6652:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;BORRAR.c: 130: else if(inter == 2){
  1577  002944  0E02               	movlw	2
  1578  002946  19BE               	xorwf	_inter& (0+255),w,b
  1579  002948  11BF               	iorwf	(_inter+1)& (0+255),w,b
  1580  00294A  A4D8               	btfss	status,2,c
  1581  00294C  D749               	goto	l6618
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;BORRAR.c: 131: inter=0;
  1585  00294E  0E00               	movlw	0
  1586  002950  6FBF               	movwf	(_inter+1)& (0+255),b
  1587  002952  0E00               	movlw	0
  1588  002954  6FBE               	movwf	_inter& (0+255),b
  1589                           
  1590                           ;BORRAR.c: 132: b = 111.8151;
  1591  002956  0EA1               	movlw	161
  1592  002958  6FB8               	movwf	_b& (0+255),b
  1593  00295A  0EDF               	movlw	223
  1594  00295C  6FB9               	movwf	(_b+1)& (0+255),b
  1595  00295E  0E42               	movlw	66
  1596  002960  6FBA               	movwf	(_b+2)& (0+255),b
  1597                           
  1598                           ;BORRAR.c: 133: c = 46.3699;
  1599  002962  0E7B               	movlw	123
  1600  002964  6FB5               	movwf	_c& (0+255),b
  1601  002966  0E39               	movlw	57
  1602  002968  6FB6               	movwf	(_c+1)& (0+255),b
  1603  00296A  0E42               	movlw	66
  1604  00296C  6FB7               	movwf	(_c+2)& (0+255),b
  1605                           
  1606                           ;BORRAR.c: 134: data2[0] = 0;
  1607  00296E  0E00               	movlw	0
  1608  002970  6FE0               	movwf	_data2& (0+255),b
  1609                           
  1610                           ;BORRAR.c: 135: data2[1] = 0;
  1611  002972  0E00               	movlw	0
  1612  002974  6FE1               	movwf	(_data2+1)& (0+255),b
  1613                           
  1614                           ;BORRAR.c: 137: DriverPin = 0;
  1615  002976  0E00               	movlw	0
  1616  002978  6FC3               	movwf	(_DriverPin+1)& (0+255),b
  1617  00297A  0E00               	movlw	0
  1618  00297C  6FC2               	movwf	_DriverPin& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;BORRAR.c: 138: pos = map(b, 0, 180, 110, 510);
  1622  00297E  C0B8  F093         	movff	_b,___fttol@f1
  1623  002982  C0B9  F094         	movff	_b+1,___fttol@f1+1
  1624  002986  C0BA  F095         	movff	_b+2,___fttol@f1+2
  1625  00298A  EC6F  F01D         	call	___fttol	;wreg free
  1626  00298E  C093  F0A2         	movff	?___fttol,map@x
  1627  002992  C094  F0A3         	movff	?___fttol+1,map@x+1
  1628  002996  0E00               	movlw	0
  1629  002998  6FA5               	movwf	(map@In_Min+1)& (0+255),b
  1630  00299A  0E00               	movlw	0
  1631  00299C  6FA4               	movwf	map@In_Min& (0+255),b
  1632  00299E  0E00               	movlw	0
  1633  0029A0  6FA7               	movwf	(map@In_Max+1)& (0+255),b
  1634  0029A2  0EB4               	movlw	180
  1635  0029A4  6FA6               	movwf	map@In_Max& (0+255),b
  1636  0029A6  0E00               	movlw	0
  1637  0029A8  6FA9               	movwf	(map@Out_Min+1)& (0+255),b
  1638  0029AA  0E6E               	movlw	110
  1639  0029AC  6FA8               	movwf	map@Out_Min& (0+255),b
  1640  0029AE  0E01               	movlw	1
  1641  0029B0  6FAB               	movwf	(map@Out_Max+1)& (0+255),b
  1642  0029B2  0EFE               	movlw	254
  1643  0029B4  6FAA               	movwf	map@Out_Max& (0+255),b
  1644  0029B6  EC26  F023         	call	_map	;wreg free
  1645  0029BA  C0A2  F0C4         	movff	?_map,_pos
  1646  0029BE  C0A3  F0C5         	movff	?_map+1,_pos+1
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;BORRAR.c: 139: data2[2] = pos;
  1650  0029C2  C0C4  F0E2         	movff	_pos,_data2+2
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;BORRAR.c: 140: data2[3] = pos >> 8;
  1654  0029C6  51C5               	movf	(_pos+1)& (0+255),w,b
  1655  0029C8  6FE3               	movwf	(_data2+3)& (0+255),b
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;BORRAR.c: 142: writeI2C(0x80, 0x06 + (4 * DriverPin), data2, 4);
  1659  0029CA  51C2               	movf	_DriverPin& (0+255),w,b
  1660  0029CC  0D04               	mullw	4
  1661  0029CE  50F3               	movf	243,w,c
  1662  0029D0  0F06               	addlw	6
  1663  0029D2  6F6D               	movwf	writeI2C@Register& (0+255),b
  1664  0029D4  0EE0               	movlw	low _data2
  1665  0029D6  6F6E               	movwf	writeI2C@Data& (0+255),b
  1666  0029D8  0E00               	movlw	0
  1667  0029DA  6F70               	movwf	(writeI2C@bytes+1)& (0+255),b
  1668  0029DC  0E04               	movlw	4
  1669  0029DE  6F6F               	movwf	writeI2C@bytes& (0+255),b
  1670  0029E0  0E80               	movlw	128
  1671  0029E2  ECB4  F022         	call	_writeI2C
  1672                           
  1673                           ;BORRAR.c: 145: DriverPin = 1;
  1674  0029E6  0E00               	movlw	0
  1675  0029E8  0100               	movlb	0	; () banked
  1676  0029EA  6FC3               	movwf	(_DriverPin+1)& (0+255),b
  1677  0029EC  0E01               	movlw	1
  1678  0029EE  6FC2               	movwf	_DriverPin& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;BORRAR.c: 146: pos = map(c, 0, 180, 110, 510);
  1682  0029F0  C0B5  F093         	movff	_c,___fttol@f1
  1683  0029F4  C0B6  F094         	movff	_c+1,___fttol@f1+1
  1684  0029F8  C0B7  F095         	movff	_c+2,___fttol@f1+2
  1685  0029FC  EC6F  F01D         	call	___fttol	;wreg free
  1686  002A00  C093  F0A2         	movff	?___fttol,map@x
  1687  002A04  C094  F0A3         	movff	?___fttol+1,map@x+1
  1688  002A08  0E00               	movlw	0
  1689  002A0A  6FA5               	movwf	(map@In_Min+1)& (0+255),b
  1690  002A0C  0E00               	movlw	0
  1691  002A0E  6FA4               	movwf	map@In_Min& (0+255),b
  1692  002A10  0E00               	movlw	0
  1693  002A12  6FA7               	movwf	(map@In_Max+1)& (0+255),b
  1694  002A14  0EB4               	movlw	180
  1695  002A16  6FA6               	movwf	map@In_Max& (0+255),b
  1696  002A18  0E00               	movlw	0
  1697  002A1A  6FA9               	movwf	(map@Out_Min+1)& (0+255),b
  1698  002A1C  0E6E               	movlw	110
  1699  002A1E  6FA8               	movwf	map@Out_Min& (0+255),b
  1700  002A20  0E01               	movlw	1
  1701  002A22  6FAB               	movwf	(map@Out_Max+1)& (0+255),b
  1702  002A24  0EFE               	movlw	254
  1703  002A26  6FAA               	movwf	map@Out_Max& (0+255),b
  1704  002A28  EC26  F023         	call	_map	;wreg free
  1705  002A2C  C0A2  F0C4         	movff	?_map,_pos
  1706  002A30  C0A3  F0C5         	movff	?_map+1,_pos+1
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;BORRAR.c: 147: data2[2] = pos;
  1710  002A34  C0C4  F0E2         	movff	_pos,_data2+2
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;BORRAR.c: 148: data2[3] = pos >> 8;
  1714  002A38  51C5               	movf	(_pos+1)& (0+255),w,b
  1715  002A3A  6FE3               	movwf	(_data2+3)& (0+255),b
  1716                           
  1717                           ;BORRAR.c: 150: writeI2C(0x80, 0x06 + (4 * DriverPin), data2, 4);
  1718  002A3C  51C2               	movf	_DriverPin& (0+255),w,b
  1719  002A3E  0D04               	mullw	4
  1720  002A40  50F3               	movf	243,w,c
  1721  002A42  0F06               	addlw	6
  1722  002A44  6F6D               	movwf	writeI2C@Register& (0+255),b
  1723  002A46  0EE0               	movlw	low _data2
  1724  002A48  6F6E               	movwf	writeI2C@Data& (0+255),b
  1725  002A4A  0E00               	movlw	0
  1726  002A4C  6F70               	movwf	(writeI2C@bytes+1)& (0+255),b
  1727  002A4E  0E04               	movlw	4
  1728  002A50  6F6F               	movwf	writeI2C@bytes& (0+255),b
  1729  002A52  0E80               	movlw	128
  1730  002A54  ECB4  F022         	call	_writeI2C
  1731                           
  1732                           ;BORRAR.c: 153: SettingsLCD(0x01);
  1733  002A58  0E01               	movlw	1
  1734  002A5A  EC09  F025         	call	_SettingsLCD
  1735                           
  1736                           ;BORRAR.c: 154: SettingsLCD(0x80);
  1737  002A5E  0E80               	movlw	128
  1738  002A60  EC09  F025         	call	_SettingsLCD
  1739                           
  1740                           ;BORRAR.c: 155: sprintf(text,"Servo 1:%.2f %d",b,inter);
  1741  002A64  0ECC               	movlw	low _text
  1742  002A66  0100               	movlb	0	; () banked
  1743  002A68  6FA8               	movwf	sprintf@sp& (0+255),b
  1744  002A6A  0E77               	movlw	low STR_1
  1745  002A6C  6FA9               	movwf	sprintf@f& (0+255),b
  1746  002A6E  C0B8  F0AA         	movff	_b,?_sprintf+2
  1747  002A72  C0B9  F0AB         	movff	_b+1,?_sprintf+3
  1748  002A76  C0BA  F0AC         	movff	_b+2,?_sprintf+4
  1749  002A7A  C0BE  F0AD         	movff	_inter,?_sprintf+5
  1750  002A7E  C0BF  F0AE         	movff	_inter+1,?_sprintf+6
  1751  002A82  EC51  F008         	call	_sprintf	;wreg free
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;BORRAR.c: 156: DataLCD();
  1755  002A86  ECE0  F022         	call	_DataLCD	;wreg free
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;BORRAR.c: 159: SettingsLCD(0xC0);
  1759  002A8A  0EC0               	movlw	192
  1760  002A8C  EC09  F025         	call	_SettingsLCD
  1761                           
  1762                           ;BORRAR.c: 160: sprintf(text,"Servo 2:%.2f",c);
  1763  002A90  0ECC               	movlw	low _text
  1764  002A92  0100               	movlb	0	; () banked
  1765  002A94  6FA8               	movwf	sprintf@sp& (0+255),b
  1766  002A96  0E94               	movlw	low STR_2
  1767  002A98  6FA9               	movwf	sprintf@f& (0+255),b
  1768  002A9A  C0B5  F0AA         	movff	_c,?_sprintf+2
  1769  002A9E  C0B6  F0AB         	movff	_c+1,?_sprintf+3
  1770  002AA2  C0B7  F0AC         	movff	_c+2,?_sprintf+4
  1771  002AA6  EC51  F008         	call	_sprintf	;wreg free
  1772  002AAA  D749               	goto	l6650
  1773  002AAC                     __end_of_main:
  1774                           	callstack 0
  1775                           
  1776 ;; *************** function _writeI2C *****************
  1777 ;; Defined at:
  1778 ;;		line 361 in file "BORRAR.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  Address         1    wreg     unsigned char 
  1781 ;;  Register        1   13[BANK0 ] unsigned char 
  1782 ;;  Data            1   14[BANK0 ] PTR unsigned char 
  1783 ;;		 -> data2(4), 
  1784 ;;  bytes           2   15[BANK0 ] int 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  Address         1   19[BANK0 ] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 3F/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1796 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;Total ram usage:        7 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; Hardware stack levels required when called: 7
  1803 ;; This function calls:
  1804 ;;		_sendI2C
  1805 ;;		_startI2C
  1806 ;;		_stopI2C
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text1
  1813  004568                     __ptext1:
  1814                           	callstack 0
  1815  004568                     _writeI2C:
  1816                           	callstack 23
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;incstack = 0
  1820                           ;writeI2C@Address stored from wreg
  1821  004568  6F73               	movwf	writeI2C@Address& (0+255),b
  1822                           
  1823                           ;BORRAR.c: 362: startI2C();
  1824  00456A  EC5D  F025         	call	_startI2C	;wreg free
  1825                           
  1826                           ;BORRAR.c: 363: sendI2C(Address);
  1827  00456E  5173               	movf	writeI2C@Address& (0+255),w,b
  1828  004570  EC4D  F025         	call	_sendI2C
  1829                           
  1830                           ;BORRAR.c: 364: sendI2C(Register);
  1831  004574  516D               	movf	writeI2C@Register& (0+255),w,b
  1832  004576  EC4D  F025         	call	_sendI2C
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;BORRAR.c: 365: for (i = 0; i < bytes; i++) {
  1836  00457A  0E00               	movlw	0
  1837  00457C  6FC9               	movwf	(_i+1)& (0+255),b
  1838  00457E  0E00               	movlw	0
  1839  004580  6FC8               	movwf	_i& (0+255),b
  1840  004582  D009               	goto	l4910
  1841  004584                     l4904:
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;BORRAR.c: 366: sendI2C(*Data);
  1845  004584  516E               	movf	writeI2C@Data& (0+255),w,b
  1846  004586  6ED9               	movwf	fsr2l,c
  1847  004588  6ADA               	clrf	fsr2h,c
  1848  00458A  50DF               	movf	indf2,w,c
  1849  00458C  EC4D  F025         	call	_sendI2C
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;BORRAR.c: 367: Data++;
  1853  004590  2B6E               	incf	writeI2C@Data& (0+255),f,b
  1854                           
  1855                           ; BSR set to: 0
  1856  004592  4BC8               	infsnz	_i& (0+255),f,b
  1857  004594  2BC9               	incf	(_i+1)& (0+255),f,b
  1858  004596                     l4910:
  1859                           
  1860                           ; BSR set to: 0
  1861  004596  516F               	movf	writeI2C@bytes& (0+255),w,b
  1862  004598  5DC8               	subwf	_i& (0+255),w,b
  1863  00459A  5170               	movf	(writeI2C@bytes+1)& (0+255),w,b
  1864  00459C  59C9               	subwfb	(_i+1)& (0+255),w,b
  1865  00459E  A0D8               	btfss	status,0,c
  1866  0045A0  D7F1               	goto	l4904
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;BORRAR.c: 368: };BORRAR.c: 369: stopI2C();
  1870  0045A2  EC59  F025         	call	_stopI2C	;wreg free
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;BORRAR.c: 370: _delay((unsigned long)((100)*(16000000/4000.0)));
  1874  0045A6  0E03               	movlw	3
  1875  0045A8  0100               	movlb	0	; () banked
  1876  0045AA  6F72               	movwf	(??_writeI2C+1)& (0+255),b
  1877  0045AC  0E08               	movlw	8
  1878  0045AE  6F71               	movwf	??_writeI2C& (0+255),b
  1879  0045B0  0E77               	movlw	119
  1880  0045B2                     u7737:
  1881  0045B2  2EE8               	decfsz	wreg,f,c
  1882  0045B4  D7FE               	bra	u7737
  1883  0045B6  2F71               	decfsz	??_writeI2C& (0+255),f,b
  1884  0045B8  D7FC               	bra	u7737
  1885  0045BA  2F72               	decfsz	(??_writeI2C+1)& (0+255),f,b
  1886  0045BC  D7FA               	bra	u7737
  1887  0045BE  0012               	return		;funcret
  1888  0045C0                     __end_of_writeI2C:
  1889                           	callstack 0
  1890                           
  1891 ;; *************** function _sprintf *****************
  1892 ;; Defined at:
  1893 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  sp              1   72[BANK0 ] PTR unsigned char 
  1896 ;;		 -> text(20), 
  1897 ;;  f               1   73[BANK0 ] PTR const unsigned char 
  1898 ;;		 -> STR_6(13), STR_5(13), STR_4(13), STR_3(16), 
  1899 ;;		 -> STR_2(13), STR_1(16), 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  val             4   12[BANK1 ] unsigned long 
  1902 ;;  tmpval          4    8[BANK1 ] struct .
  1903 ;;  fval            3   18[BANK1 ] struct .
  1904 ;;  cp              3    0        PTR const unsigned char 
  1905 ;;  prec            2   16[BANK1 ] int 
  1906 ;;  eexp            2    6[BANK1 ] int 
  1907 ;;  flag            2    4[BANK1 ] unsigned short 
  1908 ;;  len             2    0        unsigned int 
  1909 ;;  width           2    0        int 
  1910 ;;  c               1   21[BANK1 ] unsigned char 
  1911 ;;  ap              1    3[BANK1 ] PTR void [1]
  1912 ;;		 -> ?_sprintf(2), 
  1913 ;;  d               1    0        unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  2   72[BANK0 ] int 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 3F/0
  1920 ;;		On exit  : 3F/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         0      13      22       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:       35 bytes
  1928 ;; Hardware stack levels used: 1
  1929 ;; Hardware stack levels required when called: 8
  1930 ;; This function calls:
  1931 ;;		___awdiv
  1932 ;;		___ftadd
  1933 ;;		___ftge
  1934 ;;		___ftmul
  1935 ;;		___ftneg
  1936 ;;		___ftsub
  1937 ;;		___fttol
  1938 ;;		___lldiv
  1939 ;;		___llmod
  1940 ;;		___lltoft
  1941 ;;		___wmul
  1942 ;;		__div_to_l_
  1943 ;;		__tdiv_to_l_
  1944 ;;		_fround
  1945 ;;		_isdigit
  1946 ;;		_scale
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text2
  1953  0010A2                     __ptext2:
  1954                           	callstack 0
  1955  0010A2                     _sprintf:
  1956                           	callstack 22
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1960                           
  1961                           ;incstack = 0
  1962  0010A2  0EAA               	movlw	low (?_sprintf+2)
  1963  0010A4  0101               	movlb	1	; () banked
  1964  0010A6  6F03               	movwf	sprintf@ap& (0+255),b
  1965                           
  1966                           ;doprnt.c: 553: while((c = *f++)) {
  1967  0010A8  EF5E  F00C         	goto	u7690
  1968  0010AC                     l6378:
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;doprnt.c: 555: if(c != '%')
  1972  0010AC  0E25               	movlw	37
  1973  0010AE  1915               	xorwf	sprintf@c& (0+255),w,b
  1974  0010B0  B4D8               	btfsc	status,2,c
  1975  0010B2  D008               	goto	l6384
  1976                           
  1977                           ; BSR set to: 1
  1978                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1979  0010B4  0100               	movlb	0	; () banked
  1980  0010B6  51A8               	movf	sprintf@sp& (0+255),w,b
  1981  0010B8  6ED9               	movwf	fsr2l,c
  1982  0010BA  6ADA               	clrf	fsr2h,c
  1983  0010BC  C115  FFDF         	movff	sprintf@c,indf2
  1984                           
  1985                           ; BSR set to: 0
  1986  0010C0  2BA8               	incf	sprintf@sp& (0+255),f,b
  1987                           
  1988                           ;doprnt.c: 559: continue;
  1989  0010C2  D3FC               	goto	u7690
  1990  0010C4                     l6384:
  1991                           
  1992                           ; BSR set to: 1
  1993                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1994  0010C4  0E00               	movlw	0
  1995  0010C6  6F05               	movwf	(sprintf@flag+1)& (0+255),b
  1996  0010C8  0E00               	movlw	0
  1997  0010CA  6F04               	movwf	sprintf@flag& (0+255),b
  1998                           
  1999                           ; BSR set to: 1
  2000                           ;doprnt.c: 628: if(*f == '.') {
  2001  0010CC  C0A9  FFF6         	movff	sprintf@f,tblptrl
  2002  0010D0                     	if	1	;There is more than 1 active tblptr byte
  2003  0010D0  0E10               	movlw	high __smallconst
  2004  0010D2  6EF7               	movwf	tblptrh,c
  2005  0010D4                     	endif
  2006  0010D4                     	if	0	;tblptru may be non-zero
  2007  0010D4                     	endif
  2008  0010D4                     	if	0	;tblptru may be non-zero
  2009  0010D4                     	endif
  2010  0010D4  0008               	tblrd		*
  2011  0010D6  50F5               	movf	tablat,w,c
  2012  0010D8  0A2E               	xorlw	46
  2013  0010DA  A4D8               	btfss	status,2,c
  2014  0010DC  D03B               	goto	l6400
  2015                           
  2016                           ; BSR set to: 1
  2017                           ;doprnt.c: 629: flag |= 0x4000;
  2018  0010DE  8D05               	bsf	(sprintf@flag+1)& (0+255),6,b
  2019                           
  2020                           ;doprnt.c: 630: f++;
  2021  0010E0  0100               	movlb	0	; () banked
  2022  0010E2  2BA9               	incf	sprintf@f& (0+255),f,b
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  2026  0010E4  0E00               	movlw	0
  2027  0010E6  0101               	movlb	1	; () banked
  2028  0010E8  6F11               	movwf	(sprintf@prec+1)& (0+255),b
  2029  0010EA  0E00               	movlw	0
  2030  0010EC  6F10               	movwf	sprintf@prec& (0+255),b
  2031                           
  2032                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  2033  0010EE  D027               	goto	l6398
  2034  0010F0                     l6392:
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;doprnt.c: 647: prec *= 10;
  2038  0010F0  C110  F079         	movff	sprintf@prec,___wmul@multiplier
  2039  0010F4  C111  F07A         	movff	sprintf@prec+1,___wmul@multiplier+1
  2040  0010F8  0E00               	movlw	0
  2041  0010FA  6F7C               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2042  0010FC  0E0A               	movlw	10
  2043  0010FE  6F7B               	movwf	___wmul@multiplicand& (0+255),b
  2044  001100  EC8F  F024         	call	___wmul	;wreg free
  2045  001104  C079  F110         	movff	?___wmul,sprintf@prec
  2046  001108  C07A  F111         	movff	?___wmul+1,sprintf@prec+1
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;doprnt.c: 648: prec += *f++ - '0';
  2050  00110C  0ED0               	movlw	208
  2051  00110E  6FAF               	movwf	??_sprintf& (0+255),b
  2052  001110  0EFF               	movlw	255
  2053  001112  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  2054  001114  C0A9  FFF6         	movff	sprintf@f,tblptrl
  2055  001118                     	if	1	;There is more than 1 active tblptr byte
  2056  001118  0E10               	movlw	high __smallconst
  2057  00111A  6EF7               	movwf	tblptrh,c
  2058  00111C                     	endif
  2059  00111C                     	if	0	;tblptru may be non-zero
  2060  00111C                     	endif
  2061  00111C                     	if	0	;tblptru may be non-zero
  2062  00111C                     	endif
  2063  00111C  0008               	tblrd		*
  2064  00111E  50F5               	movf	tablat,w,c
  2065  001120  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  2066  001122  6BB2               	clrf	(??_sprintf+3)& (0+255),b
  2067  001124  51AF               	movf	??_sprintf& (0+255),w,b
  2068  001126  27B1               	addwf	(??_sprintf+2)& (0+255),f,b
  2069  001128  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  2070  00112A  23B2               	addwfc	(??_sprintf+3)& (0+255),f,b
  2071  00112C  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  2072  00112E  0101               	movlb	1	; () banked
  2073  001130  2710               	addwf	sprintf@prec& (0+255),f,b
  2074  001132  0100               	movlb	0	; () banked
  2075  001134  51B2               	movf	(??_sprintf+3)& (0+255),w,b
  2076  001136  0101               	movlb	1	; () banked
  2077  001138  2311               	addwfc	(sprintf@prec+1)& (0+255),f,b
  2078                           
  2079                           ; BSR set to: 1
  2080  00113A  0100               	movlb	0	; () banked
  2081  00113C  2BA9               	incf	sprintf@f& (0+255),f,b
  2082  00113E                     l6398:
  2083  00113E  C0A9  FFF6         	movff	sprintf@f,tblptrl
  2084  001142                     	if	1	;There is more than 1 active tblptr byte
  2085  001142  0E10               	movlw	high __smallconst
  2086  001144  6EF7               	movwf	tblptrh,c
  2087  001146                     	endif
  2088  001146                     	if	0	;tblptru may be non-zero
  2089  001146                     	endif
  2090  001146                     	if	0	;tblptru may be non-zero
  2091  001146                     	endif
  2092  001146  0008               	tblrd		*
  2093  001148  50F5               	movf	tablat,w,c
  2094  00114A  ECC7  F024         	call	_isdigit
  2095  00114E  A0D8               	btfss	status,0,c
  2096  001150  D009               	goto	l6408
  2097  001152  D7CE               	goto	l6392
  2098  001154                     l6400:
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;doprnt.c: 652: prec = 0;
  2102  001154  0E00               	movlw	0
  2103  001156  6F11               	movwf	(sprintf@prec+1)& (0+255),b
  2104  001158  0E00               	movlw	0
  2105  00115A  6F10               	movwf	sprintf@prec& (0+255),b
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;doprnt.c: 654: flag |= 0x1000;
  2109  00115C  8905               	bsf	(sprintf@flag+1)& (0+255),4,b
  2110  00115E  D002               	goto	l6408
  2111  001160                     l6404:
  2112                           
  2113                           ; BSR set to: 1
  2114                           ;doprnt.c: 689: flag |= 0x400;
  2115  001160  8505               	bsf	(sprintf@flag+1)& (0+255),2,b
  2116                           
  2117                           ;doprnt.c: 690: break;
  2118  001162  D019               	goto	l6410
  2119  001164                     l6408:
  2120  001164  0100               	movlb	0	; () banked
  2121  001166  2BA9               	incf	sprintf@f& (0+255),f,b
  2122  001168  05A9               	decf	sprintf@f& (0+255),w,b
  2123  00116A  6FAF               	movwf	??_sprintf& (0+255),b
  2124  00116C  C0AF  FFF6         	movff	??_sprintf,tblptrl
  2125  001170                     	if	1	;There is more than 1 active tblptr byte
  2126  001170  0E10               	movlw	high __smallconst
  2127  001172  6EF7               	movwf	tblptrh,c
  2128  001174                     	endif
  2129  001174                     	if	0	;tblptru may be non-zero
  2130  001174                     	endif
  2131  001174                     	if	0	;tblptru may be non-zero
  2132  001174                     	endif
  2133  001174  0008               	tblrd		*
  2134  001176  CFF5 F115          	movff	tablat,sprintf@c
  2135  00117A  0101               	movlb	1	; () banked
  2136  00117C  5115               	movf	sprintf@c& (0+255),w,b
  2137                           
  2138                           ; Switch size 1, requested type "simple"
  2139                           ; Number of cases is 4, Range of values is 0 to 105
  2140                           ; switch strategies available:
  2141                           ; Name         Instructions Cycles
  2142                           ; simple_byte           13     7 (average)
  2143                           ;	Chosen strategy is simple_byte
  2144  00117E  0A00               	xorlw	0	; case 0
  2145  001180  B4D8               	btfsc	status,2,c
  2146  001182  D3AC               	goto	u7700
  2147  001184  0A64               	xorlw	100	; case 100
  2148  001186  B4D8               	btfsc	status,2,c
  2149  001188  D006               	goto	l6410
  2150  00118A  0A02               	xorlw	2	; case 102
  2151  00118C  B4D8               	btfsc	status,2,c
  2152  00118E  D7E8               	goto	l6404
  2153  001190  0A0F               	xorlw	15	; case 105
  2154  001192  A4D8               	btfss	status,2,c
  2155  001194  D393               	goto	u7690
  2156  001196                     l6410:
  2157                           
  2158                           ; BSR set to: 1
  2159                           ;doprnt.c: 851: if(flag & (0x700)) {
  2160  001196  0E07               	movlw	7
  2161  001198  1505               	andwf	(sprintf@flag+1)& (0+255),w,b
  2162  00119A  B4D8               	btfsc	status,2,c
  2163  00119C  D2CE               	goto	l6558
  2164                           
  2165                           ; BSR set to: 1
  2166                           ;doprnt.c: 853: if(flag & 0x1000)
  2167  00119E  A905               	btfss	(sprintf@flag+1)& (0+255),4,b
  2168  0011A0  D004               	goto	l6416
  2169                           
  2170                           ; BSR set to: 1
  2171                           ;doprnt.c: 855: prec = 6;
  2172  0011A2  0E00               	movlw	0
  2173  0011A4  6F11               	movwf	(sprintf@prec+1)& (0+255),b
  2174  0011A6  0E06               	movlw	6
  2175  0011A8  6F10               	movwf	sprintf@prec& (0+255),b
  2176  0011AA                     l6416:
  2177                           
  2178                           ; BSR set to: 1
  2179                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2180  0011AA  5103               	movf	sprintf@ap& (0+255),w,b
  2181  0011AC  6ED9               	movwf	fsr2l,c
  2182  0011AE  6ADA               	clrf	fsr2h,c
  2183  0011B0  CFDE F112          	movff	postinc2,sprintf@fval
  2184  0011B4  CFDE F113          	movff	postinc2,sprintf@fval+1
  2185  0011B8  CFDD F114          	movff	postdec2,sprintf@fval+2
  2186                           
  2187                           ; BSR set to: 1
  2188  0011BC  0E03               	movlw	3
  2189  0011BE  2703               	addwf	sprintf@ap& (0+255),f,b
  2190                           
  2191                           ; BSR set to: 1
  2192                           ;doprnt.c: 857: if(fval < 0.0) {
  2193  0011C0  AF14               	btfss	(sprintf@fval+2)& (0+255),7,b
  2194  0011C2  D011               	goto	l6426
  2195                           
  2196                           ; BSR set to: 1
  2197                           ;doprnt.c: 858: fval = -fval;
  2198  0011C4  C112  F06B         	movff	sprintf@fval,___ftneg@f1
  2199  0011C8  C113  F06C         	movff	sprintf@fval+1,___ftneg@f1+1
  2200  0011CC  C114  F06D         	movff	sprintf@fval+2,___ftneg@f1+2
  2201  0011D0  EC7C  F024         	call	___ftneg	;wreg free
  2202  0011D4  C06B  F112         	movff	?___ftneg,sprintf@fval
  2203  0011D8  C06C  F113         	movff	?___ftneg+1,sprintf@fval+1
  2204  0011DC  C06D  F114         	movff	?___ftneg+2,sprintf@fval+2
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;doprnt.c: 859: flag |= 0x03;
  2208  0011E0  0E03               	movlw	3
  2209  0011E2  0101               	movlb	1	; () banked
  2210  0011E4  1304               	iorwf	sprintf@flag& (0+255),f,b
  2211  0011E6                     l6426:
  2212                           
  2213                           ; BSR set to: 1
  2214                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2215  0011E6  0E00               	movlw	0
  2216  0011E8  6F07               	movwf	(sprintf@eexp+1)& (0+255),b
  2217  0011EA  0E00               	movlw	0
  2218  0011EC  6F06               	movwf	sprintf@eexp& (0+255),b
  2219                           
  2220                           ; BSR set to: 1
  2221                           ;doprnt.c: 862: if( fval!=0) {
  2222  0011EE  5112               	movf	sprintf@fval& (0+255),w,b
  2223  0011F0  1113               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2224  0011F2  1114               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2225  0011F4  B4D8               	btfsc	status,2,c
  2226  0011F6  D08B               	goto	l6454
  2227                           
  2228                           ; BSR set to: 1
  2229                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2230  0011F8  0E82               	movlw	130
  2231  0011FA  0100               	movlb	0	; () banked
  2232  0011FC  6FAF               	movwf	??_sprintf& (0+255),b
  2233  0011FE  0EFF               	movlw	255
  2234  001200  6FB0               	movwf	(??_sprintf+1)& (0+255),b
  2235  001202  C112  F0B1         	movff	sprintf@fval,??_sprintf+2
  2236  001206  C113  F0B2         	movff	sprintf@fval+1,??_sprintf+3
  2237  00120A  C114  F0B3         	movff	sprintf@fval+2,??_sprintf+4
  2238  00120E  C115  F0B4         	movff	sprintf@fval+3,??_sprintf+5
  2239  001212  0E10               	movlw	16
  2240  001214  D005               	goto	u7420
  2241  001216                     u7425:
  2242  001216  90D8               	bcf	status,0,c
  2243  001218  33B4               	rrcf	(??_sprintf+5)& (0+255),f,b
  2244  00121A  33B3               	rrcf	(??_sprintf+4)& (0+255),f,b
  2245  00121C  33B2               	rrcf	(??_sprintf+3)& (0+255),f,b
  2246  00121E  33B1               	rrcf	(??_sprintf+2)& (0+255),f,b
  2247  001220                     u7420:
  2248  001220  2EE8               	decfsz	wreg,f,c
  2249  001222  D7F9               	goto	u7425
  2250  001224  51B1               	movf	(??_sprintf+2)& (0+255),w,b
  2251  001226  25AF               	addwf	??_sprintf& (0+255),w,b
  2252  001228  0101               	movlb	1	; () banked
  2253  00122A  6F06               	movwf	sprintf@eexp& (0+255),b
  2254  00122C  0E00               	movlw	0
  2255  00122E  0100               	movlb	0	; () banked
  2256  001230  21B0               	addwfc	(??_sprintf+1)& (0+255),w,b
  2257  001232  0101               	movlb	1	; () banked
  2258  001234  6F07               	movwf	(sprintf@eexp+1)& (0+255),b
  2259                           
  2260                           ; BSR set to: 1
  2261                           ;doprnt.c: 864: eexp--;
  2262  001236  0706               	decf	sprintf@eexp& (0+255),f,b
  2263  001238  A0D8               	btfss	status,0,c
  2264  00123A  0707               	decf	(sprintf@eexp+1)& (0+255),f,b
  2265                           
  2266                           ; BSR set to: 1
  2267                           ;doprnt.c: 865: eexp *= 3;
  2268  00123C  C106  F079         	movff	sprintf@eexp,___wmul@multiplier
  2269  001240  C107  F07A         	movff	sprintf@eexp+1,___wmul@multiplier+1
  2270  001244  0E00               	movlw	0
  2271  001246  0100               	movlb	0	; () banked
  2272  001248  6F7C               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2273  00124A  0E03               	movlw	3
  2274  00124C  6F7B               	movwf	___wmul@multiplicand& (0+255),b
  2275  00124E  EC8F  F024         	call	___wmul	;wreg free
  2276  001252  C079  F106         	movff	?___wmul,sprintf@eexp
  2277  001256  C07A  F107         	movff	?___wmul+1,sprintf@eexp+1
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;doprnt.c: 866: eexp /= 10;
  2281  00125A  C106  F071         	movff	sprintf@eexp,___awdiv@dividend
  2282  00125E  C107  F072         	movff	sprintf@eexp+1,___awdiv@dividend+1
  2283  001262  0E00               	movlw	0
  2284  001264  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  2285  001266  0E0A               	movlw	10
  2286  001268  6F73               	movwf	___awdiv@divisor& (0+255),b
  2287  00126A  EC99  F01F         	call	___awdiv	;wreg free
  2288  00126E  C071  F106         	movff	?___awdiv,sprintf@eexp
  2289  001272  C072  F107         	movff	?___awdiv+1,sprintf@eexp+1
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 867: if(eexp < 0)
  2293  001276  0101               	movlb	1	; () banked
  2294  001278  AF07               	btfss	(sprintf@eexp+1)& (0+255),7,b
  2295  00127A  D003               	goto	l6442
  2296                           
  2297                           ; BSR set to: 1
  2298                           ;doprnt.c: 868: eexp--;
  2299  00127C  0706               	decf	sprintf@eexp& (0+255),f,b
  2300  00127E  A0D8               	btfss	status,0,c
  2301  001280  0707               	decf	(sprintf@eexp+1)& (0+255),f,b
  2302  001282                     l6442:
  2303                           
  2304                           ; BSR set to: 1
  2305                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2306  001282  5106               	movf	sprintf@eexp& (0+255),w,b
  2307  001284  0800               	sublw	0
  2308  001286  EC54  F010         	call	_scale
  2309  00128A  C088  F108         	movff	?_scale,sprintf@tmpval
  2310  00128E  C089  F109         	movff	?_scale+1,sprintf@tmpval+1
  2311  001292  C08A  F10A         	movff	?_scale+2,sprintf@tmpval+2
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;doprnt.c: 873: tmpval.integ *= fval;
  2315  001296  C108  F079         	movff	sprintf@tmpval,___ftmul@f1
  2316  00129A  C109  F07A         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2317  00129E  C10A  F07B         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2318  0012A2  C112  F07C         	movff	sprintf@fval,___ftmul@f2
  2319  0012A6  C113  F07D         	movff	sprintf@fval+1,___ftmul@f2+1
  2320  0012AA  C114  F07E         	movff	sprintf@fval+2,___ftmul@f2+2
  2321  0012AE  EC1C  F01B         	call	___ftmul	;wreg free
  2322  0012B2  C079  F108         	movff	?___ftmul,sprintf@tmpval
  2323  0012B6  C07A  F109         	movff	?___ftmul+1,sprintf@tmpval+1
  2324  0012BA  C07B  F10A         	movff	?___ftmul+2,sprintf@tmpval+2
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2328  0012BE  C108  F06B         	movff	sprintf@tmpval,___ftge@ff1
  2329  0012C2  C109  F06C         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2330  0012C6  C10A  F06D         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2331  0012CA  0E00               	movlw	0
  2332  0012CC  6F6E               	movwf	___ftge@ff2& (0+255),b
  2333  0012CE  0E80               	movlw	128
  2334  0012D0  6F6F               	movwf	(___ftge@ff2+1)& (0+255),b
  2335  0012D2  0E3F               	movlw	63
  2336  0012D4  6F70               	movwf	(___ftge@ff2+2)& (0+255),b
  2337  0012D6  ECE0  F020         	call	___ftge	;wreg free
  2338  0012DA  B0D8               	btfsc	status,0,c
  2339  0012DC  D005               	goto	l6450
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;doprnt.c: 875: eexp--;
  2343  0012DE  0101               	movlb	1	; () banked
  2344  0012E0  0706               	decf	sprintf@eexp& (0+255),f,b
  2345  0012E2  A0D8               	btfss	status,0,c
  2346  0012E4  0707               	decf	(sprintf@eexp+1)& (0+255),f,b
  2347  0012E6  D013               	goto	l6454
  2348  0012E8                     l6450:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2352  0012E8  C108  F06B         	movff	sprintf@tmpval,___ftge@ff1
  2353  0012EC  C109  F06C         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2354  0012F0  C10A  F06D         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2355  0012F4  0E00               	movlw	0
  2356  0012F6  6F6E               	movwf	___ftge@ff2& (0+255),b
  2357  0012F8  0E20               	movlw	32
  2358  0012FA  6F6F               	movwf	(___ftge@ff2+1)& (0+255),b
  2359  0012FC  0E41               	movlw	65
  2360  0012FE  6F70               	movwf	(___ftge@ff2+2)& (0+255),b
  2361  001300  ECE0  F020         	call	___ftge	;wreg free
  2362  001304  A0D8               	btfss	status,0,c
  2363  001306  D003               	goto	l6454
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;doprnt.c: 877: eexp++;
  2367  001308  0101               	movlb	1	; () banked
  2368  00130A  4B06               	infsnz	sprintf@eexp& (0+255),f,b
  2369  00130C  2B07               	incf	(sprintf@eexp+1)& (0+255),f,b
  2370  00130E                     l6454:
  2371                           
  2372                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2373  00130E  0101               	movlb	1	; () banked
  2374  001310  BF11               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2375  001312  D006               	goto	u7460
  2376  001314  5111               	movf	(sprintf@prec+1)& (0+255),w,b
  2377  001316  E11B               	bnz	l6458
  2378  001318  0E0D               	movlw	13
  2379  00131A  5D10               	subwf	sprintf@prec& (0+255),w,b
  2380  00131C  B0D8               	btfsc	status,0,c
  2381  00131E  D017               	goto	l6458
  2382  001320                     u7460:
  2383                           
  2384                           ; BSR set to: 1
  2385                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2386  001320  C112  F096         	movff	sprintf@fval,___ftadd@f1
  2387  001324  C113  F097         	movff	sprintf@fval+1,___ftadd@f1+1
  2388  001328  C114  F098         	movff	sprintf@fval+2,___ftadd@f1+2
  2389  00132C  5110               	movf	sprintf@prec& (0+255),w,b
  2390  00132E  EC56  F015         	call	_fround
  2391  001332  C088  F099         	movff	?_fround,___ftadd@f2
  2392  001336  C089  F09A         	movff	?_fround+1,___ftadd@f2+1
  2393  00133A  C08A  F09B         	movff	?_fround+2,___ftadd@f2+2
  2394  00133E  EC34  F017         	call	___ftadd	;wreg free
  2395  001342  C096  F112         	movff	?___ftadd,sprintf@fval
  2396  001346  C097  F113         	movff	?___ftadd+1,sprintf@fval+1
  2397  00134A  C098  F114         	movff	?___ftadd+2,sprintf@fval+2
  2398  00134E                     l6458:
  2399                           
  2400                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2401  00134E  0101               	movlb	1	; () banked
  2402  001350  BF07               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  2403  001352  D006               	goto	u7470
  2404  001354  5107               	movf	(sprintf@eexp+1)& (0+255),w,b
  2405  001356  E120               	bnz	l6466
  2406  001358  0E0A               	movlw	10
  2407  00135A  5D06               	subwf	sprintf@eexp& (0+255),w,b
  2408  00135C  B0D8               	btfsc	status,0,c
  2409  00135E  D01C               	goto	u7500
  2410  001360                     u7470:
  2411                           
  2412                           ; BSR set to: 1
  2413  001360  5112               	movf	sprintf@fval& (0+255),w,b
  2414  001362  1113               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2415  001364  1114               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2416  001366  B4D8               	btfsc	status,2,c
  2417  001368  D057               	goto	l6480
  2418                           
  2419                           ; BSR set to: 1
  2420  00136A  C112  F093         	movff	sprintf@fval,___fttol@f1
  2421  00136E  C113  F094         	movff	sprintf@fval+1,___fttol@f1+1
  2422  001372  C114  F095         	movff	sprintf@fval+2,___fttol@f1+2
  2423  001376  EC6F  F01D         	call	___fttol	;wreg free
  2424  00137A  5193               	movf	?___fttol& (0+255),w,b
  2425  00137C  1194               	iorwf	(?___fttol+1)& (0+255),w,b
  2426  00137E  1195               	iorwf	(?___fttol+2)& (0+255),w,b
  2427  001380  1196               	iorwf	(?___fttol+3)& (0+255),w,b
  2428  001382  A4D8               	btfss	status,2,c
  2429  001384  D049               	goto	l6480
  2430                           
  2431                           ; BSR set to: 0
  2432  001386  0101               	movlb	1	; () banked
  2433  001388  BF07               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  2434  00138A  D046               	goto	l6480
  2435  00138C  5107               	movf	(sprintf@eexp+1)& (0+255),w,b
  2436  00138E  E104               	bnz	u7500
  2437  001390  0E02               	movlw	2
  2438  001392  5D06               	subwf	sprintf@eexp& (0+255),w,b
  2439  001394  A0D8               	btfss	status,0,c
  2440  001396  D040               	goto	l6480
  2441  001398                     u7500:
  2442  001398                     l6466:
  2443                           
  2444                           ; BSR set to: 1
  2445                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2446  001398  C108  F06B         	movff	sprintf@tmpval,___ftge@ff1
  2447  00139C  C109  F06C         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2448  0013A0  C10A  F06D         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2449  0013A4  0E70               	movlw	112
  2450  0013A6  0100               	movlb	0	; () banked
  2451  0013A8  6F6E               	movwf	___ftge@ff2& (0+255),b
  2452  0013AA  0E89               	movlw	137
  2453  0013AC  6F6F               	movwf	(___ftge@ff2+1)& (0+255),b
  2454  0013AE  0E40               	movlw	64
  2455  0013B0  6F70               	movwf	(___ftge@ff2+2)& (0+255),b
  2456  0013B2  ECE0  F020         	call	___ftge	;wreg free
  2457  0013B6  B0D8               	btfsc	status,0,c
  2458  0013B8  D003               	goto	l6470
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2462  0013BA  0101               	movlb	1	; () banked
  2463  0013BC  0EF7               	movlw	247
  2464  0013BE  D002               	goto	L1
  2465  0013C0                     l6470:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2469  0013C0  0101               	movlb	1	; () banked
  2470  0013C2  0EF8               	movlw	248
  2471  0013C4                     L1:
  2472  0013C4  2706               	addwf	sprintf@eexp& (0+255),f,b
  2473  0013C6  0EFF               	movlw	255
  2474  0013C8  2307               	addwfc	(sprintf@eexp+1)& (0+255),f,b
  2475                           
  2476                           ; BSR set to: 1
  2477                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2478  0013CA  5106               	movf	sprintf@eexp& (0+255),w,b
  2479  0013CC  EC54  F010         	call	_scale
  2480  0013D0  C088  F108         	movff	?_scale,sprintf@tmpval
  2481  0013D4  C089  F109         	movff	?_scale+1,sprintf@tmpval+1
  2482  0013D8  C08A  F10A         	movff	?_scale+2,sprintf@tmpval+2
  2483                           
  2484                           ; BSR set to: 0
  2485                           
  2486                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2487  0013DC  C112  F06B         	movff	sprintf@fval,__tdiv_to_l_@f1
  2488  0013E0  C113  F06C         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2489  0013E4  C114  F06D         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2490  0013E8  C108  F06E         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2491  0013EC  C109  F06F         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2492  0013F0  C10A  F070         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2493  0013F4  ECA3  F019         	call	__tdiv_to_l_	;wreg free
  2494  0013F8  C06B  F10C         	movff	?__tdiv_to_l_,sprintf@val
  2495  0013FC  C06C  F10D         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2496  001400  C06D  F10E         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2497  001404  C06E  F10F         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;doprnt.c: 1155: fval = 0.0;
  2501  001408  0E00               	movlw	0
  2502  00140A  0101               	movlb	1	; () banked
  2503  00140C  6F12               	movwf	sprintf@fval& (0+255),b
  2504  00140E  0E00               	movlw	0
  2505  001410  6F13               	movwf	(sprintf@fval+1)& (0+255),b
  2506  001412  0E00               	movlw	0
  2507  001414  6F14               	movwf	(sprintf@fval+2)& (0+255),b
  2508                           
  2509                           ;doprnt.c: 1156: } else {
  2510  001416  D033               	goto	l6484
  2511  001418                     l6480:
  2512                           
  2513                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2514  001418  C112  F093         	movff	sprintf@fval,___fttol@f1
  2515  00141C  C113  F094         	movff	sprintf@fval+1,___fttol@f1+1
  2516  001420  C114  F095         	movff	sprintf@fval+2,___fttol@f1+2
  2517  001424  EC6F  F01D         	call	___fttol	;wreg free
  2518  001428  C093  F10C         	movff	?___fttol,sprintf@val
  2519  00142C  C094  F10D         	movff	?___fttol+1,sprintf@val+1
  2520  001430  C095  F10E         	movff	?___fttol+2,sprintf@val+2
  2521  001434  C096  F10F         	movff	?___fttol+3,sprintf@val+3
  2522                           
  2523                           ;doprnt.c: 1158: fval -= (double)val;
  2524  001438  C112  F0A2         	movff	sprintf@fval,___ftsub@f1
  2525  00143C  C113  F0A3         	movff	sprintf@fval+1,___ftsub@f1+1
  2526  001440  C114  F0A4         	movff	sprintf@fval+2,___ftsub@f1+2
  2527  001444  C10C  F073         	movff	sprintf@val,___lltoft@c
  2528  001448  C10D  F074         	movff	sprintf@val+1,___lltoft@c+1
  2529  00144C  C10E  F075         	movff	sprintf@val+2,___lltoft@c+2
  2530  001450  C10F  F076         	movff	sprintf@val+3,___lltoft@c+3
  2531  001454  EC2A  F022         	call	___lltoft	;wreg free
  2532  001458  C073  F0A5         	movff	?___lltoft,___ftsub@f2
  2533  00145C  C074  F0A6         	movff	?___lltoft+1,___ftsub@f2+1
  2534  001460  C075  F0A7         	movff	?___lltoft+2,___ftsub@f2+2
  2535  001464  EC68  F023         	call	___ftsub	;wreg free
  2536  001468  C0A2  F112         	movff	?___ftsub,sprintf@fval
  2537  00146C  C0A3  F113         	movff	?___ftsub+1,sprintf@fval+1
  2538  001470  C0A4  F114         	movff	?___ftsub+2,sprintf@fval+2
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;doprnt.c: 1159: eexp = 0;
  2542  001474  0E00               	movlw	0
  2543  001476  0101               	movlb	1	; () banked
  2544  001478  6F07               	movwf	(sprintf@eexp+1)& (0+255),b
  2545  00147A  0E00               	movlw	0
  2546  00147C  6F06               	movwf	sprintf@eexp& (0+255),b
  2547  00147E                     l6484:
  2548                           
  2549                           ; BSR set to: 1
  2550                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2551  00147E  0E01               	movlw	1
  2552  001480  6F15               	movwf	sprintf@c& (0+255),b
  2553  001482                     l6490:
  2554                           
  2555                           ; BSR set to: 1
  2556                           ;doprnt.c: 1163: if(val < dpowers[c])
  2557  001482  5115               	movf	sprintf@c& (0+255),w,b
  2558  001484  0D04               	mullw	4
  2559  001486  50F3               	movf	243,w,c
  2560  001488  0F4F               	addlw	low _dpowers
  2561  00148A  0100               	movlb	0	; () banked
  2562  00148C  6FAF               	movwf	??_sprintf& (0+255),b
  2563  00148E  C0AF  FFF6         	movff	??_sprintf,tblptrl
  2564  001492                     	if	1	;There is more than 1 active tblptr byte
  2565  001492  0E10               	movlw	high __smallconst
  2566  001494  6EF7               	movwf	tblptrh,c
  2567  001496                     	endif
  2568  001496                     	if	0	;tblptru may be non-zero
  2569  001496                     	endif
  2570  001496                     	if	0	;tblptru may be non-zero
  2571  001496                     	endif
  2572  001496  0009               	tblrd		*+
  2573  001498  50F5               	movf	tablat,w,c
  2574  00149A  0101               	movlb	1	; () banked
  2575  00149C  5D0C               	subwf	sprintf@val& (0+255),w,b
  2576  00149E  0009               	tblrd		*+
  2577  0014A0  50F5               	movf	tablat,w,c
  2578  0014A2  590D               	subwfb	(sprintf@val+1)& (0+255),w,b
  2579  0014A4  0009               	tblrd		*+
  2580  0014A6  50F5               	movf	tablat,w,c
  2581  0014A8  590E               	subwfb	(sprintf@val+2)& (0+255),w,b
  2582  0014AA  0009               	tblrd		*+
  2583  0014AC  50F5               	movf	tablat,w,c
  2584  0014AE  590F               	subwfb	(sprintf@val+3)& (0+255),w,b
  2585  0014B0  A0D8               	btfss	status,0,c
  2586  0014B2  D005               	goto	u7530
  2587                           
  2588                           ; BSR set to: 1
  2589  0014B4  2B15               	incf	sprintf@c& (0+255),f,b
  2590                           
  2591                           ; BSR set to: 1
  2592  0014B6  0E0A               	movlw	10
  2593  0014B8  1915               	xorwf	sprintf@c& (0+255),w,b
  2594  0014BA  A4D8               	btfss	status,2,c
  2595  0014BC  D7E2               	goto	l6490
  2596  0014BE                     u7530:
  2597                           
  2598                           ; BSR set to: 1
  2599                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2600  0014BE  C104  F0AF         	movff	sprintf@flag,??_sprintf
  2601  0014C2  0E03               	movlw	3
  2602  0014C4  0100               	movlb	0	; () banked
  2603  0014C6  17AF               	andwf	??_sprintf& (0+255),f,b
  2604  0014C8  B4D8               	btfsc	status,2,c
  2605  0014CA  D051               	goto	l6512
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  2609  0014CC  51A8               	movf	sprintf@sp& (0+255),w,b
  2610  0014CE  6ED9               	movwf	fsr2l,c
  2611  0014D0  6ADA               	clrf	fsr2h,c
  2612  0014D2  0E2D               	movlw	45
  2613  0014D4  6EDF               	movwf	indf2,c
  2614  0014D6  0100               	movlb	0	; () banked
  2615  0014D8  2BA8               	incf	sprintf@sp& (0+255),f,b
  2616  0014DA  D049               	goto	l6512
  2617  0014DC                     l6504:
  2618                           
  2619                           ; BSR set to: 1
  2620                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2621  0014DC  C10C  F06B         	movff	sprintf@val,___lldiv@dividend
  2622  0014E0  C10D  F06C         	movff	sprintf@val+1,___lldiv@dividend+1
  2623  0014E4  C10E  F06D         	movff	sprintf@val+2,___lldiv@dividend+2
  2624  0014E8  C10F  F06E         	movff	sprintf@val+3,___lldiv@dividend+3
  2625  0014EC  5115               	movf	sprintf@c& (0+255),w,b
  2626  0014EE  0D04               	mullw	4
  2627  0014F0  50F3               	movf	243,w,c
  2628  0014F2  0F4F               	addlw	low _dpowers
  2629  0014F4  0100               	movlb	0	; () banked
  2630  0014F6  6FAF               	movwf	??_sprintf& (0+255),b
  2631  0014F8  C0AF  FFF6         	movff	??_sprintf,tblptrl
  2632  0014FC                     	if	1	;There is more than 1 active tblptr byte
  2633  0014FC  0E10               	movlw	high __smallconst
  2634  0014FE  6EF7               	movwf	tblptrh,c
  2635  001500                     	endif
  2636  001500                     	if	0	;tblptru may be non-zero
  2637  001500                     	endif
  2638  001500                     	if	0	;tblptru may be non-zero
  2639  001500                     	endif
  2640  001500  0009               	tblrd		*+
  2641  001502  CFF5 F06F          	movff	tablat,___lldiv@divisor
  2642  001506  0009               	tblrd		*+
  2643  001508  CFF5 F070          	movff	tablat,___lldiv@divisor+1
  2644  00150C  0009               	tblrd		*+
  2645  00150E  CFF5 F071          	movff	tablat,___lldiv@divisor+2
  2646  001512  000A               	tblrd		*-
  2647  001514  CFF5 F072          	movff	tablat,___lldiv@divisor+3
  2648  001518  EC1D  F020         	call	___lldiv	;wreg free
  2649  00151C  C06B  F108         	movff	?___lldiv,sprintf@tmpval
  2650  001520  C06C  F109         	movff	?___lldiv+1,sprintf@tmpval+1
  2651  001524  C06D  F10A         	movff	?___lldiv+2,sprintf@tmpval+2
  2652  001528  C06E  F10B         	movff	?___lldiv+3,sprintf@tmpval+3
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 1228: tmpval.vd %= 10;
  2656  00152C  C108  F078         	movff	sprintf@tmpval,___llmod@dividend
  2657  001530  C109  F079         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2658  001534  C10A  F07A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2659  001538  C10B  F07B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2660  00153C  0E0A               	movlw	10
  2661  00153E  6F7C               	movwf	___llmod@divisor& (0+255),b
  2662  001540  0E00               	movlw	0
  2663  001542  6F7D               	movwf	(___llmod@divisor+1)& (0+255),b
  2664  001544  0E00               	movlw	0
  2665  001546  6F7E               	movwf	(___llmod@divisor+2)& (0+255),b
  2666  001548  0E00               	movlw	0
  2667  00154A  6F7F               	movwf	(___llmod@divisor+3)& (0+255),b
  2668  00154C  ECC4  F021         	call	___llmod	;wreg free
  2669  001550  C078  F108         	movff	?___llmod,sprintf@tmpval
  2670  001554  C079  F109         	movff	?___llmod+1,sprintf@tmpval+1
  2671  001558  C07A  F10A         	movff	?___llmod+2,sprintf@tmpval+2
  2672  00155C  C07B  F10B         	movff	?___llmod+3,sprintf@tmpval+3
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  2676  001560  51A8               	movf	sprintf@sp& (0+255),w,b
  2677  001562  6ED9               	movwf	fsr2l,c
  2678  001564  6ADA               	clrf	fsr2h,c
  2679  001566  0101               	movlb	1	; () banked
  2680  001568  5108               	movf	sprintf@tmpval& (0+255),w,b
  2681  00156A  0F30               	addlw	48
  2682  00156C  D7B3               	goto	L2
  2683  00156E                     l6512:
  2684                           
  2685                           ; BSR set to: 0
  2686  00156E  0101               	movlb	1	; () banked
  2687  001570  0715               	decf	sprintf@c& (0+255),f,b
  2688  001572  2915               	incf	sprintf@c& (0+255),w,b
  2689  001574  B4D8               	btfsc	status,2,c
  2690  001576  D00C               	goto	l6520
  2691  001578  D7B1               	goto	l6504
  2692  00157A                     l6514:
  2693                           
  2694                           ; BSR set to: 1
  2695                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  2696  00157A  0100               	movlb	0	; () banked
  2697  00157C  51A8               	movf	sprintf@sp& (0+255),w,b
  2698  00157E  6ED9               	movwf	fsr2l,c
  2699  001580  6ADA               	clrf	fsr2h,c
  2700  001582  0E30               	movlw	48
  2701  001584  6EDF               	movwf	indf2,c
  2702                           
  2703                           ; BSR set to: 0
  2704  001586  2BA8               	incf	sprintf@sp& (0+255),f,b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;doprnt.c: 1235: eexp--;
  2708  001588  0101               	movlb	1	; () banked
  2709  00158A  0706               	decf	sprintf@eexp& (0+255),f,b
  2710  00158C  A0D8               	btfss	status,0,c
  2711  00158E  0707               	decf	(sprintf@eexp+1)& (0+255),f,b
  2712  001590                     l6520:
  2713                           
  2714                           ; BSR set to: 1
  2715  001590  BF07               	btfsc	(sprintf@eexp+1)& (0+255),7,b
  2716  001592  D005               	goto	u7560
  2717  001594  5107               	movf	(sprintf@eexp+1)& (0+255),w,b
  2718  001596  E1F1               	bnz	l6514
  2719  001598  0506               	decf	sprintf@eexp& (0+255),w,b
  2720  00159A  B0D8               	btfsc	status,0,c
  2721  00159C  D7EE               	goto	l6514
  2722  00159E                     u7560:
  2723                           
  2724                           ; BSR set to: 1
  2725                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2726  00159E  BF11               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2727  0015A0  D009               	goto	l319
  2728  0015A2  5111               	movf	(sprintf@prec+1)& (0+255),w,b
  2729  0015A4  E104               	bnz	u7570
  2730  0015A6  0E09               	movlw	9
  2731  0015A8  5D10               	subwf	sprintf@prec& (0+255),w,b
  2732  0015AA  A0D8               	btfss	status,0,c
  2733  0015AC  D003               	goto	l319
  2734  0015AE                     u7570:
  2735                           
  2736                           ; BSR set to: 1
  2737                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2738  0015AE  0E08               	movlw	8
  2739  0015B0  6F15               	movwf	sprintf@c& (0+255),b
  2740  0015B2  D002               	goto	l6526
  2741  0015B4                     l319:
  2742                           
  2743                           ; BSR set to: 1
  2744                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  2745  0015B4  C110  F115         	movff	sprintf@prec,sprintf@c
  2746  0015B8                     l6526:
  2747                           
  2748                           ; BSR set to: 1
  2749                           ;doprnt.c: 1241: prec -= (int)c;
  2750  0015B8  5115               	movf	sprintf@c& (0+255),w,b
  2751  0015BA  5F10               	subwf	sprintf@prec& (0+255),f,b
  2752  0015BC  0E00               	movlw	0
  2753  0015BE  5B11               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2754                           
  2755                           ; BSR set to: 1
  2756                           ;doprnt.c: 1245: if(c)
  2757  0015C0  5115               	movf	sprintf@c& (0+255),w,b
  2758  0015C2  B4D8               	btfsc	status,2,c
  2759  0015C4  D007               	goto	l6534
  2760                           
  2761                           ; BSR set to: 1
  2762                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  2763  0015C6  0100               	movlb	0	; () banked
  2764  0015C8  51A8               	movf	sprintf@sp& (0+255),w,b
  2765  0015CA  6ED9               	movwf	fsr2l,c
  2766  0015CC  6ADA               	clrf	fsr2h,c
  2767  0015CE  0E2E               	movlw	46
  2768  0015D0  6EDF               	movwf	indf2,c
  2769                           
  2770                           ; BSR set to: 0
  2771  0015D2  2BA8               	incf	sprintf@sp& (0+255),f,b
  2772  0015D4                     l6534:
  2773                           
  2774                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2775  0015D4  0101               	movlb	1	; () banked
  2776  0015D6  5115               	movf	sprintf@c& (0+255),w,b
  2777  0015D8  EC54  F010         	call	_scale
  2778  0015DC  C088  F100         	movff	?_scale,_sprintf$1124
  2779  0015E0  C089  F101         	movff	?_scale+1,_sprintf$1124+1
  2780  0015E4  C08A  F102         	movff	?_scale+2,_sprintf$1124+2
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2784  0015E8  C112  F07C         	movff	sprintf@fval,___ftmul@f2
  2785  0015EC  C113  F07D         	movff	sprintf@fval+1,___ftmul@f2+1
  2786  0015F0  C114  F07E         	movff	sprintf@fval+2,___ftmul@f2+2
  2787  0015F4  C100  F079         	movff	_sprintf$1124,___ftmul@f1
  2788  0015F8  C101  F07A         	movff	_sprintf$1124+1,___ftmul@f1+1
  2789  0015FC  C102  F07B         	movff	_sprintf$1124+2,___ftmul@f1+2
  2790  001600  EC1C  F01B         	call	___ftmul	;wreg free
  2791  001604  C079  F093         	movff	?___ftmul,___fttol@f1
  2792  001608  C07A  F094         	movff	?___ftmul+1,___fttol@f1+1
  2793  00160C  C07B  F095         	movff	?___ftmul+2,___fttol@f1+2
  2794  001610  EC6F  F01D         	call	___fttol	;wreg free
  2795  001614  C093  F10C         	movff	?___fttol,sprintf@val
  2796  001618  C094  F10D         	movff	?___fttol+1,sprintf@val+1
  2797  00161C  C095  F10E         	movff	?___fttol+2,sprintf@val+2
  2798  001620  C096  F10F         	movff	?___fttol+3,sprintf@val+3
  2799                           
  2800                           ;doprnt.c: 1254: while(c--) {
  2801  001624  D074               	goto	l6548
  2802  001626                     l6538:
  2803                           
  2804                           ; BSR set to: 1
  2805                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  2806  001626  C10C  F06B         	movff	sprintf@val,___lldiv@dividend
  2807  00162A  C10D  F06C         	movff	sprintf@val+1,___lldiv@dividend+1
  2808  00162E  C10E  F06D         	movff	sprintf@val+2,___lldiv@dividend+2
  2809  001632  C10F  F06E         	movff	sprintf@val+3,___lldiv@dividend+3
  2810  001636  5115               	movf	sprintf@c& (0+255),w,b
  2811  001638  0D04               	mullw	4
  2812  00163A  50F3               	movf	243,w,c
  2813  00163C  0F4F               	addlw	low _dpowers
  2814  00163E  0100               	movlb	0	; () banked
  2815  001640  6FAF               	movwf	??_sprintf& (0+255),b
  2816  001642  C0AF  FFF6         	movff	??_sprintf,tblptrl
  2817  001646                     	if	1	;There is more than 1 active tblptr byte
  2818  001646  0E10               	movlw	high __smallconst
  2819  001648  6EF7               	movwf	tblptrh,c
  2820  00164A                     	endif
  2821  00164A                     	if	0	;tblptru may be non-zero
  2822  00164A                     	endif
  2823  00164A                     	if	0	;tblptru may be non-zero
  2824  00164A                     	endif
  2825  00164A  0009               	tblrd		*+
  2826  00164C  CFF5 F06F          	movff	tablat,___lldiv@divisor
  2827  001650  0009               	tblrd		*+
  2828  001652  CFF5 F070          	movff	tablat,___lldiv@divisor+1
  2829  001656  0009               	tblrd		*+
  2830  001658  CFF5 F071          	movff	tablat,___lldiv@divisor+2
  2831  00165C  000A               	tblrd		*-
  2832  00165E  CFF5 F072          	movff	tablat,___lldiv@divisor+3
  2833  001662  EC1D  F020         	call	___lldiv	;wreg free
  2834  001666  C06B  F108         	movff	?___lldiv,sprintf@tmpval
  2835  00166A  C06C  F109         	movff	?___lldiv+1,sprintf@tmpval+1
  2836  00166E  C06D  F10A         	movff	?___lldiv+2,sprintf@tmpval+2
  2837  001672  C06E  F10B         	movff	?___lldiv+3,sprintf@tmpval+3
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;doprnt.c: 1256: tmpval.vd %= 10;
  2841  001676  C108  F078         	movff	sprintf@tmpval,___llmod@dividend
  2842  00167A  C109  F079         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2843  00167E  C10A  F07A         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2844  001682  C10B  F07B         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2845  001686  0E0A               	movlw	10
  2846  001688  6F7C               	movwf	___llmod@divisor& (0+255),b
  2847  00168A  0E00               	movlw	0
  2848  00168C  6F7D               	movwf	(___llmod@divisor+1)& (0+255),b
  2849  00168E  0E00               	movlw	0
  2850  001690  6F7E               	movwf	(___llmod@divisor+2)& (0+255),b
  2851  001692  0E00               	movlw	0
  2852  001694  6F7F               	movwf	(___llmod@divisor+3)& (0+255),b
  2853  001696  ECC4  F021         	call	___llmod	;wreg free
  2854  00169A  C078  F108         	movff	?___llmod,sprintf@tmpval
  2855  00169E  C079  F109         	movff	?___llmod+1,sprintf@tmpval+1
  2856  0016A2  C07A  F10A         	movff	?___llmod+2,sprintf@tmpval+2
  2857  0016A6  C07B  F10B         	movff	?___llmod+3,sprintf@tmpval+3
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  2861  0016AA  51A8               	movf	sprintf@sp& (0+255),w,b
  2862  0016AC  6ED9               	movwf	fsr2l,c
  2863  0016AE  6ADA               	clrf	fsr2h,c
  2864  0016B0  0101               	movlb	1	; () banked
  2865  0016B2  5108               	movf	sprintf@tmpval& (0+255),w,b
  2866  0016B4  0F30               	addlw	48
  2867  0016B6  6EDF               	movwf	indf2,c
  2868                           
  2869                           ; BSR set to: 1
  2870  0016B8  0100               	movlb	0	; () banked
  2871  0016BA  2BA8               	incf	sprintf@sp& (0+255),f,b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;doprnt.c: 1258: val %= dpowers[c];
  2875  0016BC  C10C  F078         	movff	sprintf@val,___llmod@dividend
  2876  0016C0  C10D  F079         	movff	sprintf@val+1,___llmod@dividend+1
  2877  0016C4  C10E  F07A         	movff	sprintf@val+2,___llmod@dividend+2
  2878  0016C8  C10F  F07B         	movff	sprintf@val+3,___llmod@dividend+3
  2879  0016CC  0101               	movlb	1	; () banked
  2880  0016CE  5115               	movf	sprintf@c& (0+255),w,b
  2881  0016D0  0D04               	mullw	4
  2882  0016D2  50F3               	movf	243,w,c
  2883  0016D4  0F4F               	addlw	low _dpowers
  2884  0016D6  0100               	movlb	0	; () banked
  2885  0016D8  6FAF               	movwf	??_sprintf& (0+255),b
  2886  0016DA  C0AF  FFF6         	movff	??_sprintf,tblptrl
  2887  0016DE                     	if	1	;There is more than 1 active tblptr byte
  2888  0016DE  0E10               	movlw	high __smallconst
  2889  0016E0  6EF7               	movwf	tblptrh,c
  2890  0016E2                     	endif
  2891  0016E2                     	if	0	;tblptru may be non-zero
  2892  0016E2                     	endif
  2893  0016E2                     	if	0	;tblptru may be non-zero
  2894  0016E2                     	endif
  2895  0016E2  0009               	tblrd		*+
  2896  0016E4  CFF5 F07C          	movff	tablat,___llmod@divisor
  2897  0016E8  0009               	tblrd		*+
  2898  0016EA  CFF5 F07D          	movff	tablat,___llmod@divisor+1
  2899  0016EE  0009               	tblrd		*+
  2900  0016F0  CFF5 F07E          	movff	tablat,___llmod@divisor+2
  2901  0016F4  000A               	tblrd		*-
  2902  0016F6  CFF5 F07F          	movff	tablat,___llmod@divisor+3
  2903  0016FA  ECC4  F021         	call	___llmod	;wreg free
  2904  0016FE  C078  F10C         	movff	?___llmod,sprintf@val
  2905  001702  C079  F10D         	movff	?___llmod+1,sprintf@val+1
  2906  001706  C07A  F10E         	movff	?___llmod+2,sprintf@val+2
  2907  00170A  C07B  F10F         	movff	?___llmod+3,sprintf@val+3
  2908  00170E                     l6548:
  2909                           
  2910                           ; BSR set to: 0
  2911  00170E  0101               	movlb	1	; () banked
  2912  001710  0715               	decf	sprintf@c& (0+255),f,b
  2913  001712  2915               	incf	sprintf@c& (0+255),w,b
  2914  001714  B4D8               	btfsc	status,2,c
  2915  001716  D00C               	goto	l6556
  2916  001718  D786               	goto	l6538
  2917  00171A                     l6550:
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  2921  00171A  0100               	movlb	0	; () banked
  2922  00171C  51A8               	movf	sprintf@sp& (0+255),w,b
  2923  00171E  6ED9               	movwf	fsr2l,c
  2924  001720  6ADA               	clrf	fsr2h,c
  2925  001722  0E30               	movlw	48
  2926  001724  6EDF               	movwf	indf2,c
  2927                           
  2928                           ; BSR set to: 0
  2929  001726  2BA8               	incf	sprintf@sp& (0+255),f,b
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;doprnt.c: 1263: prec--;
  2933  001728  0101               	movlb	1	; () banked
  2934  00172A  0710               	decf	sprintf@prec& (0+255),f,b
  2935  00172C  A0D8               	btfss	status,0,c
  2936  00172E  0711               	decf	(sprintf@prec+1)& (0+255),f,b
  2937  001730                     l6556:
  2938                           
  2939                           ; BSR set to: 1
  2940  001730  5110               	movf	sprintf@prec& (0+255),w,b
  2941  001732  1111               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2942  001734  B4D8               	btfsc	status,2,c
  2943  001736  D0C2               	goto	u7690
  2944  001738  D7F0               	goto	l6550
  2945  00173A                     l6558:
  2946                           
  2947                           ; BSR set to: 1
  2948                           ;doprnt.c: 1272: };doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_
      +                          arg((*(int **)ap), (int)0));
  2949  00173A  5103               	movf	sprintf@ap& (0+255),w,b
  2950  00173C  6ED9               	movwf	fsr2l,c
  2951  00173E  6ADA               	clrf	fsr2h,c
  2952  001740  CFDE F10C          	movff	postinc2,sprintf@val
  2953  001744  CFDD F10D          	movff	postdec2,sprintf@val+1
  2954  001748  0E00               	movlw	0
  2955  00174A  BF0D               	btfsc	(sprintf@val+1)& (0+255),7,b
  2956  00174C  0EFF               	movlw	-1
  2957  00174E  6F0E               	movwf	(sprintf@val+2)& (0+255),b
  2958  001750  6F0F               	movwf	(sprintf@val+3)& (0+255),b
  2959                           
  2960                           ; BSR set to: 1
  2961  001752  0E02               	movlw	2
  2962  001754  2703               	addwf	sprintf@ap& (0+255),f,b
  2963                           
  2964                           ; BSR set to: 1
  2965                           ;doprnt.c: 1287: if((long)val < 0) {
  2966  001756  AF0F               	btfss	(sprintf@val+3)& (0+255),7,b
  2967  001758  D00A               	goto	l6568
  2968                           
  2969                           ; BSR set to: 1
  2970                           ;doprnt.c: 1288: flag |= 0x03;
  2971  00175A  0E03               	movlw	3
  2972  00175C  1304               	iorwf	sprintf@flag& (0+255),f,b
  2973                           
  2974                           ; BSR set to: 1
  2975                           ;doprnt.c: 1289: val = -val;
  2976  00175E  1F0F               	comf	(sprintf@val+3)& (0+255),f,b
  2977  001760  1F0E               	comf	(sprintf@val+2)& (0+255),f,b
  2978  001762  1F0D               	comf	(sprintf@val+1)& (0+255),f,b
  2979  001764  6D0C               	negf	sprintf@val& (0+255),b
  2980  001766  0E00               	movlw	0
  2981  001768  230D               	addwfc	(sprintf@val+1)& (0+255),f,b
  2982  00176A  230E               	addwfc	(sprintf@val+2)& (0+255),f,b
  2983  00176C  230F               	addwfc	(sprintf@val+3)& (0+255),f,b
  2984  00176E                     l6568:
  2985                           
  2986                           ; BSR set to: 1
  2987                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1316: if(prec == 0 && val == 0)
  2988  00176E  5110               	movf	sprintf@prec& (0+255),w,b
  2989  001770  1111               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2990  001772  A4D8               	btfss	status,2,c
  2991  001774  D008               	goto	l6574
  2992                           
  2993                           ; BSR set to: 1
  2994  001776  510C               	movf	sprintf@val& (0+255),w,b
  2995  001778  110D               	iorwf	(sprintf@val+1)& (0+255),w,b
  2996  00177A  110E               	iorwf	(sprintf@val+2)& (0+255),w,b
  2997  00177C  110F               	iorwf	(sprintf@val+3)& (0+255),w,b
  2998  00177E  A4D8               	btfss	status,2,c
  2999  001780  D002               	goto	l6574
  3000                           
  3001                           ; BSR set to: 1
  3002                           ;doprnt.c: 1317: prec++;
  3003  001782  4B10               	infsnz	sprintf@prec& (0+255),f,b
  3004  001784  2B11               	incf	(sprintf@prec+1)& (0+255),f,b
  3005  001786                     l6574:
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3009  001786  0E01               	movlw	1
  3010  001788  6F15               	movwf	sprintf@c& (0+255),b
  3011  00178A                     l6580:
  3012                           
  3013                           ; BSR set to: 1
  3014                           ;doprnt.c: 1332: if(val < dpowers[c])
  3015  00178A  5115               	movf	sprintf@c& (0+255),w,b
  3016  00178C  0D04               	mullw	4
  3017  00178E  50F3               	movf	243,w,c
  3018  001790  0F4F               	addlw	low _dpowers
  3019  001792  0100               	movlb	0	; () banked
  3020  001794  6FAF               	movwf	??_sprintf& (0+255),b
  3021  001796  C0AF  FFF6         	movff	??_sprintf,tblptrl
  3022  00179A                     	if	1	;There is more than 1 active tblptr byte
  3023  00179A  0E10               	movlw	high __smallconst
  3024  00179C  6EF7               	movwf	tblptrh,c
  3025  00179E                     	endif
  3026  00179E                     	if	0	;tblptru may be non-zero
  3027  00179E                     	endif
  3028  00179E                     	if	0	;tblptru may be non-zero
  3029  00179E                     	endif
  3030  00179E  0009               	tblrd		*+
  3031  0017A0  50F5               	movf	tablat,w,c
  3032  0017A2  0101               	movlb	1	; () banked
  3033  0017A4  5D0C               	subwf	sprintf@val& (0+255),w,b
  3034  0017A6  0009               	tblrd		*+
  3035  0017A8  50F5               	movf	tablat,w,c
  3036  0017AA  590D               	subwfb	(sprintf@val+1)& (0+255),w,b
  3037  0017AC  0009               	tblrd		*+
  3038  0017AE  50F5               	movf	tablat,w,c
  3039  0017B0  590E               	subwfb	(sprintf@val+2)& (0+255),w,b
  3040  0017B2  0009               	tblrd		*+
  3041  0017B4  50F5               	movf	tablat,w,c
  3042  0017B6  590F               	subwfb	(sprintf@val+3)& (0+255),w,b
  3043  0017B8  A0D8               	btfss	status,0,c
  3044  0017BA  D005               	goto	u7650
  3045                           
  3046                           ; BSR set to: 1
  3047  0017BC  2B15               	incf	sprintf@c& (0+255),f,b
  3048                           
  3049                           ; BSR set to: 1
  3050  0017BE  0E0A               	movlw	10
  3051  0017C0  1915               	xorwf	sprintf@c& (0+255),w,b
  3052  0017C2  A4D8               	btfss	status,2,c
  3053  0017C4  D7E2               	goto	l6580
  3054  0017C6                     u7650:
  3055                           
  3056                           ; BSR set to: 1
  3057                           ;doprnt.c: 1365: if(c < prec)
  3058  0017C6  5115               	movf	sprintf@c& (0+255),w,b
  3059  0017C8  0100               	movlb	0	; () banked
  3060  0017CA  6FAF               	movwf	??_sprintf& (0+255),b
  3061  0017CC  6BB0               	clrf	(??_sprintf+1)& (0+255),b
  3062  0017CE  0101               	movlb	1	; () banked
  3063  0017D0  5110               	movf	sprintf@prec& (0+255),w,b
  3064  0017D2  0100               	movlb	0	; () banked
  3065  0017D4  5DAF               	subwf	??_sprintf& (0+255),w,b
  3066  0017D6  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  3067  0017D8  0A80               	xorlw	128
  3068  0017DA  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  3069  0017DC  0101               	movlb	1	; () banked
  3070  0017DE  5111               	movf	(sprintf@prec+1)& (0+255),w,b
  3071  0017E0  0A80               	xorlw	128
  3072  0017E2  0100               	movlb	0	; () banked
  3073  0017E4  59B1               	subwfb	(??_sprintf+2)& (0+255),w,b
  3074  0017E6  A0D8               	btfss	status,0,c
  3075  0017E8  D015               	goto	l6596
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;doprnt.c: 1367: else if(prec < c)
  3079                           
  3080                           ; BSR set to: 0
  3081  0017EA  0101               	movlb	1	; () banked
  3082  0017EC  5115               	movf	sprintf@c& (0+255),w,b
  3083  0017EE  0100               	movlb	0	; () banked
  3084  0017F0  6FAF               	movwf	??_sprintf& (0+255),b
  3085  0017F2  6BB0               	clrf	(??_sprintf+1)& (0+255),b
  3086  0017F4  51AF               	movf	??_sprintf& (0+255),w,b
  3087  0017F6  0101               	movlb	1	; () banked
  3088  0017F8  5D10               	subwf	sprintf@prec& (0+255),w,b
  3089  0017FA  5111               	movf	(sprintf@prec+1)& (0+255),w,b
  3090  0017FC  0A80               	xorlw	128
  3091  0017FE  0100               	movlb	0	; () banked
  3092  001800  6FB1               	movwf	(??_sprintf+2)& (0+255),b
  3093  001802  51B0               	movf	(??_sprintf+1)& (0+255),w,b
  3094  001804  0A80               	xorlw	128
  3095  001806  59B1               	subwfb	(??_sprintf+2)& (0+255),w,b
  3096  001808  B0D8               	btfsc	status,0,c
  3097  00180A  D004               	goto	l6596
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;doprnt.c: 1368: prec = c;
  3101  00180C  C115  F110         	movff	sprintf@c,sprintf@prec
  3102  001810  0101               	movlb	1	; () banked
  3103  001812  6B11               	clrf	(sprintf@prec+1)& (0+255),b
  3104  001814                     l6596:
  3105                           
  3106                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  3107  001814  C104  F0AF         	movff	sprintf@flag,??_sprintf
  3108  001818  0E03               	movlw	3
  3109  00181A  0100               	movlb	0	; () banked
  3110  00181C  17AF               	andwf	??_sprintf& (0+255),f,b
  3111  00181E  B4D8               	btfsc	status,2,c
  3112  001820  D044               	goto	l6608
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3116  001822  51A8               	movf	sprintf@sp& (0+255),w,b
  3117  001824  6ED9               	movwf	fsr2l,c
  3118  001826  6ADA               	clrf	fsr2h,c
  3119  001828  0E2D               	movlw	45
  3120  00182A  6EDF               	movwf	indf2,c
  3121  00182C                     l6600:
  3122                           
  3123                           ; BSR set to: 0
  3124  00182C  2BA8               	incf	sprintf@sp& (0+255),f,b
  3125  00182E  D03D               	goto	l6608
  3126  001830                     l6602:
  3127                           
  3128                           ; BSR set to: 1
  3129                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
  3130  001830  5110               	movf	sprintf@prec& (0+255),w,b
  3131  001832  0D04               	mullw	4
  3132  001834  50F3               	movf	243,w,c
  3133  001836  0F4F               	addlw	low _dpowers
  3134  001838  0100               	movlb	0	; () banked
  3135  00183A  6FAF               	movwf	??_sprintf& (0+255),b
  3136  00183C  C0AF  FFF6         	movff	??_sprintf,tblptrl
  3137  001840                     	if	1	;There is more than 1 active tblptr byte
  3138  001840  0E10               	movlw	high __smallconst
  3139  001842  6EF7               	movwf	tblptrh,c
  3140  001844                     	endif
  3141  001844                     	if	0	;tblptru may be non-zero
  3142  001844                     	endif
  3143  001844                     	if	0	;tblptru may be non-zero
  3144  001844                     	endif
  3145  001844  0009               	tblrd		*+
  3146  001846  CFF5 F06F          	movff	tablat,___lldiv@divisor
  3147  00184A  0009               	tblrd		*+
  3148  00184C  CFF5 F070          	movff	tablat,___lldiv@divisor+1
  3149  001850  0009               	tblrd		*+
  3150  001852  CFF5 F071          	movff	tablat,___lldiv@divisor+2
  3151  001856  000A               	tblrd		*-
  3152  001858  CFF5 F072          	movff	tablat,___lldiv@divisor+3
  3153  00185C  C10C  F06B         	movff	sprintf@val,___lldiv@dividend
  3154  001860  C10D  F06C         	movff	sprintf@val+1,___lldiv@dividend+1
  3155  001864  C10E  F06D         	movff	sprintf@val+2,___lldiv@dividend+2
  3156  001868  C10F  F06E         	movff	sprintf@val+3,___lldiv@dividend+3
  3157  00186C  EC1D  F020         	call	___lldiv	;wreg free
  3158  001870  C06B  F078         	movff	?___lldiv,___llmod@dividend
  3159  001874  C06C  F079         	movff	?___lldiv+1,___llmod@dividend+1
  3160  001878  C06D  F07A         	movff	?___lldiv+2,___llmod@dividend+2
  3161  00187C  C06E  F07B         	movff	?___lldiv+3,___llmod@dividend+3
  3162  001880  0E0A               	movlw	10
  3163  001882  6F7C               	movwf	___llmod@divisor& (0+255),b
  3164  001884  0E00               	movlw	0
  3165  001886  6F7D               	movwf	(___llmod@divisor+1)& (0+255),b
  3166  001888  0E00               	movlw	0
  3167  00188A  6F7E               	movwf	(___llmod@divisor+2)& (0+255),b
  3168  00188C  0E00               	movlw	0
  3169  00188E  6F7F               	movwf	(___llmod@divisor+3)& (0+255),b
  3170  001890  ECC4  F021         	call	___llmod	;wreg free
  3171  001894  5178               	movf	?___llmod& (0+255),w,b
  3172  001896  0F30               	addlw	48
  3173  001898  0101               	movlb	1	; () banked
  3174  00189A  6F15               	movwf	sprintf@c& (0+255),b
  3175                           
  3176                           ; BSR set to: 1
  3177                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  3178  00189C  0100               	movlb	0	; () banked
  3179  00189E  51A8               	movf	sprintf@sp& (0+255),w,b
  3180  0018A0  6ED9               	movwf	fsr2l,c
  3181  0018A2  6ADA               	clrf	fsr2h,c
  3182  0018A4  C115  FFDF         	movff	sprintf@c,indf2
  3183  0018A8  D7C1               	goto	l6600
  3184  0018AA                     l6608:
  3185                           
  3186                           ; BSR set to: 0
  3187  0018AA  0101               	movlb	1	; () banked
  3188  0018AC  0710               	decf	sprintf@prec& (0+255),f,b
  3189  0018AE  A0D8               	btfss	status,0,c
  3190  0018B0  0711               	decf	(sprintf@prec+1)& (0+255),f,b
  3191  0018B2  2910               	incf	sprintf@prec& (0+255),w,b
  3192  0018B4  E1BD               	bnz	l6602
  3193  0018B6  2911               	incf	(sprintf@prec+1)& (0+255),w,b
  3194  0018B8  A4D8               	btfss	status,2,c
  3195  0018BA  D7BA               	goto	l6602
  3196  0018BC                     u7690:
  3197  0018BC  0100               	movlb	0	; () banked
  3198  0018BE  2BA9               	incf	sprintf@f& (0+255),f,b
  3199  0018C0  05A9               	decf	sprintf@f& (0+255),w,b
  3200  0018C2  6FAF               	movwf	??_sprintf& (0+255),b
  3201  0018C4  C0AF  FFF6         	movff	??_sprintf,tblptrl
  3202  0018C8                     	if	1	;There is more than 1 active tblptr byte
  3203  0018C8  0E10               	movlw	high __smallconst
  3204  0018CA  6EF7               	movwf	tblptrh,c
  3205  0018CC                     	endif
  3206  0018CC                     	if	0	;tblptru may be non-zero
  3207  0018CC                     	endif
  3208  0018CC                     	if	0	;tblptru may be non-zero
  3209  0018CC                     	endif
  3210  0018CC  0008               	tblrd		*
  3211  0018CE  CFF5 F115          	movff	tablat,sprintf@c
  3212  0018D2  0101               	movlb	1	; () banked
  3213  0018D4  5115               	movf	sprintf@c& (0+255),w,b
  3214  0018D6  A4D8               	btfss	status,2,c
  3215  0018D8  EF56  F008         	goto	l6378
  3216  0018DC                     u7700:
  3217                           
  3218                           ; BSR set to: 1
  3219                           ;doprnt.c: 1564: *sp = 0;
  3220  0018DC  0100               	movlb	0	; () banked
  3221  0018DE  51A8               	movf	sprintf@sp& (0+255),w,b
  3222  0018E0  6ED9               	movwf	fsr2l,c
  3223  0018E2  6ADA               	clrf	fsr2h,c
  3224  0018E4  0E00               	movlw	0
  3225  0018E6  6EDF               	movwf	indf2,c
  3226                           
  3227                           ; BSR set to: 0
  3228  0018E8  0012               	return		;funcret
  3229  0018EA                     __end_of_sprintf:
  3230                           	callstack 0
  3231                           
  3232 ;; *************** function _scale *****************
  3233 ;; Defined at:
  3234 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  scl             1    wreg     char 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  scl             1   50[BANK0 ] char 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  3   40[BANK0 ] char 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 3F/1
  3245 ;;		On exit  : 3F/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:       11 bytes
  3253 ;; Hardware stack levels used: 1
  3254 ;; Hardware stack levels required when called: 7
  3255 ;; This function calls:
  3256 ;;		___awdiv
  3257 ;;		___awmod
  3258 ;;		___ftmul
  3259 ;; This function is called by:
  3260 ;;		_sprintf
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text3
  3265  0020A8                     __ptext3:
  3266                           	callstack 0
  3267  0020A8                     _scale:
  3268                           	callstack 22
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;incstack = 0
  3272                           ;scale@scl stored from wreg
  3273  0020A8  0100               	movlb	0	; () banked
  3274  0020AA  6F92               	movwf	scale@scl& (0+255),b
  3275                           
  3276                           ;doprnt.c: 436: if(scl < 0) {
  3277  0020AC  0100               	movlb	0	; () banked
  3278  0020AE  AF92               	btfss	scale@scl& (0+255),7,b
  3279  0020B0  D0E5               	goto	l6106
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;doprnt.c: 437: scl = -scl;
  3283  0020B2  6D92               	negf	scale@scl& (0+255),b
  3284                           
  3285                           ;doprnt.c: 438: if(scl>=110)
  3286  0020B4  5192               	movf	scale@scl& (0+255),w,b
  3287  0020B6  0A80               	xorlw	128
  3288  0020B8  0F12               	addlw	-238
  3289  0020BA  A0D8               	btfss	status,0,c
  3290  0020BC  D080               	goto	l6096
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3294  0020BE  0E00               	movlw	0
  3295  0020C0  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  3296  0020C2  0E0A               	movlw	10
  3297  0020C4  6F73               	movwf	___awdiv@divisor& (0+255),b
  3298  0020C6  0E00               	movlw	0
  3299  0020C8  6F6E               	movwf	(___awmod@divisor+1)& (0+255),b
  3300  0020CA  0E64               	movlw	100
  3301  0020CC  6F6D               	movwf	___awmod@divisor& (0+255),b
  3302  0020CE  5192               	movf	scale@scl& (0+255),w,b
  3303  0020D0  6F6B               	movwf	___awmod@dividend& (0+255),b
  3304  0020D2  6B6C               	clrf	(___awmod@dividend+1)& (0+255),b
  3305  0020D4  BF6B               	btfsc	___awmod@dividend& (0+255),7,b
  3306  0020D6  076C               	decf	(___awmod@dividend+1)& (0+255),f,b
  3307  0020D8  EC54  F021         	call	___awmod	;wreg free
  3308  0020DC  C06B  F071         	movff	?___awmod,___awdiv@dividend
  3309  0020E0  C06C  F072         	movff	?___awmod+1,___awdiv@dividend+1
  3310  0020E4  EC99  F01F         	call	___awdiv	;wreg free
  3311  0020E8  5171               	movf	?___awdiv& (0+255),w,b
  3312  0020EA  0D03               	mullw	3
  3313  0020EC  CFF3 F08B          	movff	prodl,??_scale
  3314  0020F0  0E1B               	movlw	27
  3315  0020F2  278B               	addwf	??_scale& (0+255),f,b
  3316  0020F4  518B               	movf	??_scale& (0+255),w,b
  3317  0020F6  0F28               	addlw	low __npowers_
  3318  0020F8  6F8C               	movwf	(??_scale+1)& (0+255),b
  3319  0020FA  C08C  FFF6         	movff	??_scale+1,tblptrl
  3320  0020FE                     	if	1	;There is more than 1 active tblptr byte
  3321  0020FE  0E10               	movlw	high __smallconst
  3322  002100  6EF7               	movwf	tblptrh,c
  3323  002102                     	endif
  3324  002102                     	if	0	;tblptru may be non-zero
  3325  002102                     	endif
  3326  002102                     	if	0	;tblptru may be non-zero
  3327  002102                     	endif
  3328  002102  0009               	tblrd		*+
  3329  002104  CFF5 F07C          	movff	tablat,___ftmul@f2
  3330  002108  0009               	tblrd		*+
  3331  00210A  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  3332  00210E  000A               	tblrd		*-
  3333  002110  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  3334  002114  0E00               	movlw	0
  3335  002116  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  3336  002118  0E64               	movlw	100
  3337  00211A  6F73               	movwf	___awdiv@divisor& (0+255),b
  3338  00211C  5192               	movf	scale@scl& (0+255),w,b
  3339  00211E  6F71               	movwf	___awdiv@dividend& (0+255),b
  3340  002120  6B72               	clrf	(___awdiv@dividend+1)& (0+255),b
  3341  002122  BF71               	btfsc	___awdiv@dividend& (0+255),7,b
  3342  002124  0772               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3343  002126  EC99  F01F         	call	___awdiv	;wreg free
  3344  00212A  5171               	movf	?___awdiv& (0+255),w,b
  3345  00212C  0D03               	mullw	3
  3346  00212E  CFF3 F08D          	movff	prodl,??_scale+2
  3347  002132  0E36               	movlw	54
  3348  002134  278D               	addwf	(??_scale+2)& (0+255),f,b
  3349  002136  518D               	movf	(??_scale+2)& (0+255),w,b
  3350  002138  0F28               	addlw	low __npowers_
  3351  00213A  6F8E               	movwf	(??_scale+3)& (0+255),b
  3352  00213C  C08E  FFF6         	movff	??_scale+3,tblptrl
  3353  002140                     	if	1	;There is more than 1 active tblptr byte
  3354  002140  0E10               	movlw	high __smallconst
  3355  002142  6EF7               	movwf	tblptrh,c
  3356  002144                     	endif
  3357  002144                     	if	0	;tblptru may be non-zero
  3358  002144                     	endif
  3359  002144                     	if	0	;tblptru may be non-zero
  3360  002144                     	endif
  3361  002144  0009               	tblrd		*+
  3362  002146  CFF5 F079          	movff	tablat,___ftmul@f1
  3363  00214A  0009               	tblrd		*+
  3364  00214C  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  3365  002150  000A               	tblrd		*-
  3366  002152  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  3367  002156  EC1C  F01B         	call	___ftmul	;wreg free
  3368  00215A  C079  F08F         	movff	?___ftmul,_scale$1123
  3369  00215E  C07A  F090         	movff	?___ftmul+1,_scale$1123+1
  3370  002162  C07B  F091         	movff	?___ftmul+2,_scale$1123+2
  3371                           
  3372                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3373  002166  C08F  F079         	movff	_scale$1123,___ftmul@f1
  3374  00216A  C090  F07A         	movff	_scale$1123+1,___ftmul@f1+1
  3375  00216E  C091  F07B         	movff	_scale$1123+2,___ftmul@f1+2
  3376  002172  0E00               	movlw	0
  3377  002174  6F6E               	movwf	(___awmod@divisor+1)& (0+255),b
  3378  002176  0E0A               	movlw	10
  3379  002178  6F6D               	movwf	___awmod@divisor& (0+255),b
  3380  00217A  5192               	movf	scale@scl& (0+255),w,b
  3381  00217C  6F6B               	movwf	___awmod@dividend& (0+255),b
  3382  00217E  6B6C               	clrf	(___awmod@dividend+1)& (0+255),b
  3383  002180  BF6B               	btfsc	___awmod@dividend& (0+255),7,b
  3384  002182  076C               	decf	(___awmod@dividend+1)& (0+255),f,b
  3385  002184  EC54  F021         	call	___awmod	;wreg free
  3386  002188  516B               	movf	?___awmod& (0+255),w,b
  3387  00218A  0D03               	mullw	3
  3388  00218C  50F3               	movf	243,w,c
  3389  00218E  0F28               	addlw	low __npowers_
  3390  002190  6F8B               	movwf	??_scale& (0+255),b
  3391  002192  C08B  FFF6         	movff	??_scale,tblptrl
  3392  002196                     	if	1	;There is more than 1 active tblptr byte
  3393  002196  0E10               	movlw	high __smallconst
  3394  002198  6EF7               	movwf	tblptrh,c
  3395  00219A                     	endif
  3396  00219A                     	if	0	;tblptru may be non-zero
  3397  00219A                     	endif
  3398  00219A                     	if	0	;tblptru may be non-zero
  3399  00219A                     	endif
  3400  00219A  0009               	tblrd		*+
  3401  00219C  CFF5 F07C          	movff	tablat,___ftmul@f2
  3402  0021A0  0009               	tblrd		*+
  3403  0021A2  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  3404  0021A6  000A               	tblrd		*-
  3405  0021A8  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  3406  0021AC  EC1C  F01B         	call	___ftmul	;wreg free
  3407  0021B0  C079  F088         	movff	?___ftmul,?_scale
  3408  0021B4  C07A  F089         	movff	?___ftmul+1,?_scale+1
  3409  0021B8  C07B  F08A         	movff	?___ftmul+2,?_scale+2
  3410  0021BC  0012               	return	
  3411  0021BE                     l6096:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;doprnt.c: 440: else if(scl > 10)
  3415  0021BE  5192               	movf	scale@scl& (0+255),w,b
  3416  0021C0  0A80               	xorlw	128
  3417  0021C2  0F75               	addlw	-139
  3418  0021C4  A0D8               	btfss	status,0,c
  3419  0021C6  D047               	goto	l6102
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3423  0021C8  0E00               	movlw	0
  3424  0021CA  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  3425  0021CC  0E0A               	movlw	10
  3426  0021CE  6F73               	movwf	___awdiv@divisor& (0+255),b
  3427  0021D0  5192               	movf	scale@scl& (0+255),w,b
  3428  0021D2  6F71               	movwf	___awdiv@dividend& (0+255),b
  3429  0021D4  6B72               	clrf	(___awdiv@dividend+1)& (0+255),b
  3430  0021D6  BF71               	btfsc	___awdiv@dividend& (0+255),7,b
  3431  0021D8  0772               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3432  0021DA  EC99  F01F         	call	___awdiv	;wreg free
  3433  0021DE  5171               	movf	?___awdiv& (0+255),w,b
  3434  0021E0  0D03               	mullw	3
  3435  0021E2  CFF3 F08B          	movff	prodl,??_scale
  3436  0021E6  0E1B               	movlw	27
  3437  0021E8  278B               	addwf	??_scale& (0+255),f,b
  3438  0021EA  518B               	movf	??_scale& (0+255),w,b
  3439  0021EC  0F28               	addlw	low __npowers_
  3440  0021EE  6F8C               	movwf	(??_scale+1)& (0+255),b
  3441  0021F0  C08C  FFF6         	movff	??_scale+1,tblptrl
  3442  0021F4                     	if	1	;There is more than 1 active tblptr byte
  3443  0021F4  0E10               	movlw	high __smallconst
  3444  0021F6  6EF7               	movwf	tblptrh,c
  3445  0021F8                     	endif
  3446  0021F8                     	if	0	;tblptru may be non-zero
  3447  0021F8                     	endif
  3448  0021F8                     	if	0	;tblptru may be non-zero
  3449  0021F8                     	endif
  3450  0021F8  0009               	tblrd		*+
  3451  0021FA  CFF5 F079          	movff	tablat,___ftmul@f1
  3452  0021FE  0009               	tblrd		*+
  3453  002200  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  3454  002204  000A               	tblrd		*-
  3455  002206  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  3456  00220A  0E00               	movlw	0
  3457  00220C  6F6E               	movwf	(___awmod@divisor+1)& (0+255),b
  3458  00220E  0E0A               	movlw	10
  3459  002210  6F6D               	movwf	___awmod@divisor& (0+255),b
  3460  002212  5192               	movf	scale@scl& (0+255),w,b
  3461  002214  6F6B               	movwf	___awmod@dividend& (0+255),b
  3462  002216  6B6C               	clrf	(___awmod@dividend+1)& (0+255),b
  3463  002218  BF6B               	btfsc	___awmod@dividend& (0+255),7,b
  3464  00221A  076C               	decf	(___awmod@dividend+1)& (0+255),f,b
  3465  00221C  EC54  F021         	call	___awmod	;wreg free
  3466  002220  516B               	movf	?___awmod& (0+255),w,b
  3467  002222  0D03               	mullw	3
  3468  002224  50F3               	movf	243,w,c
  3469  002226  0F28               	addlw	low __npowers_
  3470  002228  6F8D               	movwf	(??_scale+2)& (0+255),b
  3471  00222A  C08D  FFF6         	movff	??_scale+2,tblptrl
  3472  00222E                     	if	1	;There is more than 1 active tblptr byte
  3473  00222E  0E10               	movlw	high __smallconst
  3474  002230  6EF7               	movwf	tblptrh,c
  3475  002232                     	endif
  3476  002232                     	if	0	;tblptru may be non-zero
  3477  002232                     	endif
  3478  002232                     	if	0	;tblptru may be non-zero
  3479  002232                     	endif
  3480  002232  0009               	tblrd		*+
  3481  002234  CFF5 F07C          	movff	tablat,___ftmul@f2
  3482  002238  0009               	tblrd		*+
  3483  00223A  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  3484  00223E  000A               	tblrd		*-
  3485  002240  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  3486  002244  EC1C  F01B         	call	___ftmul	;wreg free
  3487  002248  C079  F088         	movff	?___ftmul,?_scale
  3488  00224C  C07A  F089         	movff	?___ftmul+1,?_scale+1
  3489  002250  C07B  F08A         	movff	?___ftmul+2,?_scale+2
  3490  002254  0012               	return	
  3491  002256                     l6102:
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3495  002256  5192               	movf	scale@scl& (0+255),w,b
  3496  002258  0D03               	mullw	3
  3497  00225A  50F3               	movf	243,w,c
  3498  00225C  0F28               	addlw	low __npowers_
  3499  00225E  6F8B               	movwf	??_scale& (0+255),b
  3500  002260  C08B  FFF6         	movff	??_scale,tblptrl
  3501  002264                     	if	1	;There is more than 1 active tblptr byte
  3502  002264  0E10               	movlw	high __smallconst
  3503  002266  6EF7               	movwf	tblptrh,c
  3504  002268                     	endif
  3505  002268                     	if	0	;tblptru may be non-zero
  3506  002268                     	endif
  3507  002268                     	if	0	;tblptru may be non-zero
  3508  002268                     	endif
  3509  002268  0009               	tblrd		*+
  3510  00226A  CFF5 F088          	movff	tablat,?_scale
  3511  00226E  0009               	tblrd		*+
  3512  002270  CFF5 F089          	movff	tablat,?_scale+1
  3513  002274  000A               	tblrd		*-
  3514  002276  CFF5 F08A          	movff	tablat,?_scale+2
  3515  00227A  0012               	return	
  3516  00227C                     l6106:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3520  00227C  5192               	movf	scale@scl& (0+255),w,b
  3521  00227E  0A80               	xorlw	128
  3522  002280  0F12               	addlw	-238
  3523  002282  A0D8               	btfss	status,0,c
  3524  002284  D080               	goto	l6114
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3528  002286  0E00               	movlw	0
  3529  002288  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  3530  00228A  0E0A               	movlw	10
  3531  00228C  6F73               	movwf	___awdiv@divisor& (0+255),b
  3532  00228E  0E00               	movlw	0
  3533  002290  6F6E               	movwf	(___awmod@divisor+1)& (0+255),b
  3534  002292  0E64               	movlw	100
  3535  002294  6F6D               	movwf	___awmod@divisor& (0+255),b
  3536  002296  5192               	movf	scale@scl& (0+255),w,b
  3537  002298  6F6B               	movwf	___awmod@dividend& (0+255),b
  3538  00229A  6B6C               	clrf	(___awmod@dividend+1)& (0+255),b
  3539  00229C  BF6B               	btfsc	___awmod@dividend& (0+255),7,b
  3540  00229E  076C               	decf	(___awmod@dividend+1)& (0+255),f,b
  3541  0022A0  EC54  F021         	call	___awmod	;wreg free
  3542  0022A4  C06B  F071         	movff	?___awmod,___awdiv@dividend
  3543  0022A8  C06C  F072         	movff	?___awmod+1,___awdiv@dividend+1
  3544  0022AC  EC99  F01F         	call	___awdiv	;wreg free
  3545  0022B0  5171               	movf	?___awdiv& (0+255),w,b
  3546  0022B2  0D03               	mullw	3
  3547  0022B4  CFF3 F08B          	movff	prodl,??_scale
  3548  0022B8  0E1B               	movlw	27
  3549  0022BA  278B               	addwf	??_scale& (0+255),f,b
  3550  0022BC  518B               	movf	??_scale& (0+255),w,b
  3551  0022BE  0F01               	addlw	low __powers_
  3552  0022C0  6F8C               	movwf	(??_scale+1)& (0+255),b
  3553  0022C2  C08C  FFF6         	movff	??_scale+1,tblptrl
  3554  0022C6                     	if	1	;There is more than 1 active tblptr byte
  3555  0022C6  0E10               	movlw	high __smallconst
  3556  0022C8  6EF7               	movwf	tblptrh,c
  3557  0022CA                     	endif
  3558  0022CA                     	if	0	;tblptru may be non-zero
  3559  0022CA                     	endif
  3560  0022CA                     	if	0	;tblptru may be non-zero
  3561  0022CA                     	endif
  3562  0022CA  0009               	tblrd		*+
  3563  0022CC  CFF5 F07C          	movff	tablat,___ftmul@f2
  3564  0022D0  0009               	tblrd		*+
  3565  0022D2  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  3566  0022D6  000A               	tblrd		*-
  3567  0022D8  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  3568  0022DC  0E00               	movlw	0
  3569  0022DE  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  3570  0022E0  0E64               	movlw	100
  3571  0022E2  6F73               	movwf	___awdiv@divisor& (0+255),b
  3572  0022E4  5192               	movf	scale@scl& (0+255),w,b
  3573  0022E6  6F71               	movwf	___awdiv@dividend& (0+255),b
  3574  0022E8  6B72               	clrf	(___awdiv@dividend+1)& (0+255),b
  3575  0022EA  BF71               	btfsc	___awdiv@dividend& (0+255),7,b
  3576  0022EC  0772               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3577  0022EE  EC99  F01F         	call	___awdiv	;wreg free
  3578  0022F2  5171               	movf	?___awdiv& (0+255),w,b
  3579  0022F4  0D03               	mullw	3
  3580  0022F6  CFF3 F08D          	movff	prodl,??_scale+2
  3581  0022FA  0E36               	movlw	54
  3582  0022FC  278D               	addwf	(??_scale+2)& (0+255),f,b
  3583  0022FE  518D               	movf	(??_scale+2)& (0+255),w,b
  3584  002300  0F01               	addlw	low __powers_
  3585  002302  6F8E               	movwf	(??_scale+3)& (0+255),b
  3586  002304  C08E  FFF6         	movff	??_scale+3,tblptrl
  3587  002308                     	if	1	;There is more than 1 active tblptr byte
  3588  002308  0E10               	movlw	high __smallconst
  3589  00230A  6EF7               	movwf	tblptrh,c
  3590  00230C                     	endif
  3591  00230C                     	if	0	;tblptru may be non-zero
  3592  00230C                     	endif
  3593  00230C                     	if	0	;tblptru may be non-zero
  3594  00230C                     	endif
  3595  00230C  0009               	tblrd		*+
  3596  00230E  CFF5 F079          	movff	tablat,___ftmul@f1
  3597  002312  0009               	tblrd		*+
  3598  002314  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  3599  002318  000A               	tblrd		*-
  3600  00231A  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  3601  00231E  EC1C  F01B         	call	___ftmul	;wreg free
  3602  002322  C079  F08F         	movff	?___ftmul,_scale$1123
  3603  002326  C07A  F090         	movff	?___ftmul+1,_scale$1123+1
  3604  00232A  C07B  F091         	movff	?___ftmul+2,_scale$1123+2
  3605                           
  3606                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3607  00232E  C08F  F079         	movff	_scale$1123,___ftmul@f1
  3608  002332  C090  F07A         	movff	_scale$1123+1,___ftmul@f1+1
  3609  002336  C091  F07B         	movff	_scale$1123+2,___ftmul@f1+2
  3610  00233A  0E00               	movlw	0
  3611  00233C  6F6E               	movwf	(___awmod@divisor+1)& (0+255),b
  3612  00233E  0E0A               	movlw	10
  3613  002340  6F6D               	movwf	___awmod@divisor& (0+255),b
  3614  002342  5192               	movf	scale@scl& (0+255),w,b
  3615  002344  6F6B               	movwf	___awmod@dividend& (0+255),b
  3616  002346  6B6C               	clrf	(___awmod@dividend+1)& (0+255),b
  3617  002348  BF6B               	btfsc	___awmod@dividend& (0+255),7,b
  3618  00234A  076C               	decf	(___awmod@dividend+1)& (0+255),f,b
  3619  00234C  EC54  F021         	call	___awmod	;wreg free
  3620  002350  516B               	movf	?___awmod& (0+255),w,b
  3621  002352  0D03               	mullw	3
  3622  002354  50F3               	movf	243,w,c
  3623  002356  0F01               	addlw	low __powers_
  3624  002358  6F8B               	movwf	??_scale& (0+255),b
  3625  00235A  C08B  FFF6         	movff	??_scale,tblptrl
  3626  00235E                     	if	1	;There is more than 1 active tblptr byte
  3627  00235E  0E10               	movlw	high __smallconst
  3628  002360  6EF7               	movwf	tblptrh,c
  3629  002362                     	endif
  3630  002362                     	if	0	;tblptru may be non-zero
  3631  002362                     	endif
  3632  002362                     	if	0	;tblptru may be non-zero
  3633  002362                     	endif
  3634  002362  0009               	tblrd		*+
  3635  002364  CFF5 F07C          	movff	tablat,___ftmul@f2
  3636  002368  0009               	tblrd		*+
  3637  00236A  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  3638  00236E  000A               	tblrd		*-
  3639  002370  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  3640  002374  EC1C  F01B         	call	___ftmul	;wreg free
  3641  002378  C079  F088         	movff	?___ftmul,?_scale
  3642  00237C  C07A  F089         	movff	?___ftmul+1,?_scale+1
  3643  002380  C07B  F08A         	movff	?___ftmul+2,?_scale+2
  3644  002384  0012               	return	
  3645  002386                     l6114:
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;doprnt.c: 446: else if(scl > 10)
  3649  002386  5192               	movf	scale@scl& (0+255),w,b
  3650  002388  0A80               	xorlw	128
  3651  00238A  0F75               	addlw	-139
  3652  00238C  A0D8               	btfss	status,0,c
  3653  00238E  D047               	goto	l6120
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3657  002390  0E00               	movlw	0
  3658  002392  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  3659  002394  0E0A               	movlw	10
  3660  002396  6F73               	movwf	___awdiv@divisor& (0+255),b
  3661  002398  5192               	movf	scale@scl& (0+255),w,b
  3662  00239A  6F71               	movwf	___awdiv@dividend& (0+255),b
  3663  00239C  6B72               	clrf	(___awdiv@dividend+1)& (0+255),b
  3664  00239E  BF71               	btfsc	___awdiv@dividend& (0+255),7,b
  3665  0023A0  0772               	decf	(___awdiv@dividend+1)& (0+255),f,b
  3666  0023A2  EC99  F01F         	call	___awdiv	;wreg free
  3667  0023A6  5171               	movf	?___awdiv& (0+255),w,b
  3668  0023A8  0D03               	mullw	3
  3669  0023AA  CFF3 F08B          	movff	prodl,??_scale
  3670  0023AE  0E1B               	movlw	27
  3671  0023B0  278B               	addwf	??_scale& (0+255),f,b
  3672  0023B2  518B               	movf	??_scale& (0+255),w,b
  3673  0023B4  0F01               	addlw	low __powers_
  3674  0023B6  6F8C               	movwf	(??_scale+1)& (0+255),b
  3675  0023B8  C08C  FFF6         	movff	??_scale+1,tblptrl
  3676  0023BC                     	if	1	;There is more than 1 active tblptr byte
  3677  0023BC  0E10               	movlw	high __smallconst
  3678  0023BE  6EF7               	movwf	tblptrh,c
  3679  0023C0                     	endif
  3680  0023C0                     	if	0	;tblptru may be non-zero
  3681  0023C0                     	endif
  3682  0023C0                     	if	0	;tblptru may be non-zero
  3683  0023C0                     	endif
  3684  0023C0  0009               	tblrd		*+
  3685  0023C2  CFF5 F079          	movff	tablat,___ftmul@f1
  3686  0023C6  0009               	tblrd		*+
  3687  0023C8  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  3688  0023CC  000A               	tblrd		*-
  3689  0023CE  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  3690  0023D2  0E00               	movlw	0
  3691  0023D4  6F6E               	movwf	(___awmod@divisor+1)& (0+255),b
  3692  0023D6  0E0A               	movlw	10
  3693  0023D8  6F6D               	movwf	___awmod@divisor& (0+255),b
  3694  0023DA  5192               	movf	scale@scl& (0+255),w,b
  3695  0023DC  6F6B               	movwf	___awmod@dividend& (0+255),b
  3696  0023DE  6B6C               	clrf	(___awmod@dividend+1)& (0+255),b
  3697  0023E0  BF6B               	btfsc	___awmod@dividend& (0+255),7,b
  3698  0023E2  076C               	decf	(___awmod@dividend+1)& (0+255),f,b
  3699  0023E4  EC54  F021         	call	___awmod	;wreg free
  3700  0023E8  516B               	movf	?___awmod& (0+255),w,b
  3701  0023EA  0D03               	mullw	3
  3702  0023EC  50F3               	movf	243,w,c
  3703  0023EE  0F01               	addlw	low __powers_
  3704  0023F0  6F8D               	movwf	(??_scale+2)& (0+255),b
  3705  0023F2  C08D  FFF6         	movff	??_scale+2,tblptrl
  3706  0023F6                     	if	1	;There is more than 1 active tblptr byte
  3707  0023F6  0E10               	movlw	high __smallconst
  3708  0023F8  6EF7               	movwf	tblptrh,c
  3709  0023FA                     	endif
  3710  0023FA                     	if	0	;tblptru may be non-zero
  3711  0023FA                     	endif
  3712  0023FA                     	if	0	;tblptru may be non-zero
  3713  0023FA                     	endif
  3714  0023FA  0009               	tblrd		*+
  3715  0023FC  CFF5 F07C          	movff	tablat,___ftmul@f2
  3716  002400  0009               	tblrd		*+
  3717  002402  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  3718  002406  000A               	tblrd		*-
  3719  002408  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  3720  00240C  EC1C  F01B         	call	___ftmul	;wreg free
  3721  002410  C079  F088         	movff	?___ftmul,?_scale
  3722  002414  C07A  F089         	movff	?___ftmul+1,?_scale+1
  3723  002418  C07B  F08A         	movff	?___ftmul+2,?_scale+2
  3724  00241C  0012               	return	
  3725  00241E                     l6120:
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3729  00241E  5192               	movf	scale@scl& (0+255),w,b
  3730  002420  0D03               	mullw	3
  3731  002422  50F3               	movf	243,w,c
  3732  002424  0F01               	addlw	low __powers_
  3733  002426  6F8B               	movwf	??_scale& (0+255),b
  3734  002428  C08B  FFF6         	movff	??_scale,tblptrl
  3735  00242C                     	if	1	;There is more than 1 active tblptr byte
  3736  00242C  0E10               	movlw	high __smallconst
  3737  00242E  6EF7               	movwf	tblptrh,c
  3738  002430                     	endif
  3739  002430                     	if	0	;tblptru may be non-zero
  3740  002430                     	endif
  3741  002430                     	if	0	;tblptru may be non-zero
  3742  002430                     	endif
  3743  002430  0009               	tblrd		*+
  3744  002432  CFF5 F088          	movff	tablat,?_scale
  3745  002436  0009               	tblrd		*+
  3746  002438  CFF5 F089          	movff	tablat,?_scale+1
  3747  00243C  000A               	tblrd		*-
  3748  00243E  CFF5 F08A          	movff	tablat,?_scale+2
  3749                           
  3750                           ; BSR set to: 0
  3751  002442  0012               	return		;funcret
  3752  002444                     __end_of_scale:
  3753                           	callstack 0
  3754                           
  3755 ;; *************** function ___awmod *****************
  3756 ;; Defined at:
  3757 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  dividend        2   11[BANK0 ] int 
  3760 ;;  divisor         2   13[BANK0 ] int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  sign            1   16[BANK0 ] unsigned char 
  3763 ;;  counter         1   15[BANK0 ] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  2   11[BANK0 ] int 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 3F/0
  3770 ;;		On exit  : 3F/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3773 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;Total ram usage:        6 bytes
  3778 ;; Hardware stack levels used: 1
  3779 ;; Hardware stack levels required when called: 5
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_scale
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text4
  3788  0042A8                     __ptext4:
  3789                           	callstack 0
  3790  0042A8                     ___awmod:
  3791                           	callstack 23
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;incstack = 0
  3797  0042A8  0E00               	movlw	0
  3798  0042AA  6F70               	movwf	___awmod@sign& (0+255),b
  3799                           
  3800                           ; BSR set to: 0
  3801  0042AC  AF6C               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3802  0042AE  D006               	goto	l5886
  3803                           
  3804                           ; BSR set to: 0
  3805  0042B0  6D6B               	negf	___awmod@dividend& (0+255),b
  3806  0042B2  1F6C               	comf	(___awmod@dividend+1)& (0+255),f,b
  3807  0042B4  B0D8               	btfsc	status,0,c
  3808  0042B6  2B6C               	incf	(___awmod@dividend+1)& (0+255),f,b
  3809                           
  3810                           ; BSR set to: 0
  3811  0042B8  0E01               	movlw	1
  3812  0042BA  6F70               	movwf	___awmod@sign& (0+255),b
  3813  0042BC                     l5886:
  3814                           
  3815                           ; BSR set to: 0
  3816  0042BC  AF6E               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3817  0042BE  D004               	goto	l5890
  3818                           
  3819                           ; BSR set to: 0
  3820  0042C0  6D6D               	negf	___awmod@divisor& (0+255),b
  3821  0042C2  1F6E               	comf	(___awmod@divisor+1)& (0+255),f,b
  3822  0042C4  B0D8               	btfsc	status,0,c
  3823  0042C6  2B6E               	incf	(___awmod@divisor+1)& (0+255),f,b
  3824  0042C8                     l5890:
  3825                           
  3826                           ; BSR set to: 0
  3827  0042C8  516D               	movf	___awmod@divisor& (0+255),w,b
  3828  0042CA  116E               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3829  0042CC  B4D8               	btfsc	status,2,c
  3830  0042CE  D018               	goto	l5906
  3831                           
  3832                           ; BSR set to: 0
  3833  0042D0  0E01               	movlw	1
  3834  0042D2  6F6F               	movwf	___awmod@counter& (0+255),b
  3835  0042D4  D004               	goto	l5896
  3836  0042D6                     l5894:
  3837                           
  3838                           ; BSR set to: 0
  3839  0042D6  90D8               	bcf	status,0,c
  3840  0042D8  376D               	rlcf	___awmod@divisor& (0+255),f,b
  3841  0042DA  376E               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3842  0042DC  2B6F               	incf	___awmod@counter& (0+255),f,b
  3843  0042DE                     l5896:
  3844                           
  3845                           ; BSR set to: 0
  3846  0042DE  AF6E               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3847  0042E0  D7FA               	goto	l5894
  3848  0042E2                     u6780:
  3849                           
  3850                           ; BSR set to: 0
  3851  0042E2  516D               	movf	___awmod@divisor& (0+255),w,b
  3852  0042E4  5D6B               	subwf	___awmod@dividend& (0+255),w,b
  3853  0042E6  516E               	movf	(___awmod@divisor+1)& (0+255),w,b
  3854  0042E8  596C               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3855  0042EA  A0D8               	btfss	status,0,c
  3856  0042EC  D004               	goto	l5902
  3857                           
  3858                           ; BSR set to: 0
  3859  0042EE  516D               	movf	___awmod@divisor& (0+255),w,b
  3860  0042F0  5F6B               	subwf	___awmod@dividend& (0+255),f,b
  3861  0042F2  516E               	movf	(___awmod@divisor+1)& (0+255),w,b
  3862  0042F4  5B6C               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3863  0042F6                     l5902:
  3864                           
  3865                           ; BSR set to: 0
  3866  0042F6  90D8               	bcf	status,0,c
  3867  0042F8  336E               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3868  0042FA  336D               	rrcf	___awmod@divisor& (0+255),f,b
  3869                           
  3870                           ; BSR set to: 0
  3871  0042FC  2F6F               	decfsz	___awmod@counter& (0+255),f,b
  3872  0042FE  D7F1               	goto	u6780
  3873  004300                     l5906:
  3874                           
  3875                           ; BSR set to: 0
  3876  004300  5170               	movf	___awmod@sign& (0+255),w,b
  3877  004302  B4D8               	btfsc	status,2,c
  3878  004304  D004               	goto	l5910
  3879                           
  3880                           ; BSR set to: 0
  3881  004306  6D6B               	negf	___awmod@dividend& (0+255),b
  3882  004308  1F6C               	comf	(___awmod@dividend+1)& (0+255),f,b
  3883  00430A  B0D8               	btfsc	status,0,c
  3884  00430C  2B6C               	incf	(___awmod@dividend+1)& (0+255),f,b
  3885  00430E                     l5910:
  3886                           
  3887                           ; BSR set to: 0
  3888  00430E  C06B  F06B         	movff	___awmod@dividend,?___awmod
  3889  004312  C06C  F06C         	movff	___awmod@dividend+1,?___awmod+1
  3890                           
  3891                           ; BSR set to: 0
  3892  004316  0012               	return		;funcret
  3893  004318                     __end_of___awmod:
  3894                           	callstack 0
  3895                           
  3896 ;; *************** function _isdigit *****************
  3897 ;; Defined at:
  3898 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\isdigit.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  c               1    wreg     unsigned char 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  c               1   13[BANK0 ] unsigned char 
  3903 ;; Return value:  Size  Location     Type
  3904 ;;		None               void
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0
  3907 ;; Tracked objects:
  3908 ;;		On entry : 3E/1
  3909 ;;		On exit  : 3F/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;Total ram usage:        3 bytes
  3917 ;; Hardware stack levels used: 1
  3918 ;; Hardware stack levels required when called: 5
  3919 ;; This function calls:
  3920 ;;		Nothing
  3921 ;; This function is called by:
  3922 ;;		_sprintf
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text5
  3927  00498E                     __ptext5:
  3928                           	callstack 0
  3929  00498E                     _isdigit:
  3930                           	callstack 24
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;incstack = 0
  3934                           ;isdigit@c stored from wreg
  3935  00498E  0100               	movlb	0	; () banked
  3936  004990  6F6D               	movwf	isdigit@c& (0+255),b
  3937  004992  0E00               	movlw	0
  3938  004994  0100               	movlb	0	; () banked
  3939  004996  6F6C               	movwf	_isdigit$930& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942  004998  0E3A               	movlw	58
  3943  00499A  616D               	cpfslt	isdigit@c& (0+255),b
  3944  00499C  D005               	goto	l6132
  3945                           
  3946                           ; BSR set to: 0
  3947  00499E  0E2F               	movlw	47
  3948  0049A0  656D               	cpfsgt	isdigit@c& (0+255),b
  3949  0049A2  D002               	goto	l6132
  3950                           
  3951                           ; BSR set to: 0
  3952  0049A4  0E01               	movlw	1
  3953  0049A6  6F6C               	movwf	_isdigit$930& (0+255),b
  3954  0049A8                     l6132:
  3955                           
  3956                           ; BSR set to: 0
  3957  0049A8  C06C  F06B         	movff	_isdigit$930,??_isdigit
  3958  0049AC  316B               	rrcf	??_isdigit& (0+255),w,b
  3959                           
  3960                           ; BSR set to: 0
  3961  0049AE  0012               	return		;funcret
  3962  0049B0                     __end_of_isdigit:
  3963                           	callstack 0
  3964                           
  3965 ;; *************** function _fround *****************
  3966 ;; Defined at:
  3967 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  prec            1    wreg     unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  prec            1   53[BANK0 ] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  3   40[BANK0 ] unsigned char 
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 3F/1
  3978 ;;		On exit  : 3F/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3981 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;Total ram usage:       14 bytes
  3986 ;; Hardware stack levels used: 1
  3987 ;; Hardware stack levels required when called: 7
  3988 ;; This function calls:
  3989 ;;		___ftmul
  3990 ;;		___lbdiv
  3991 ;;		___lbmod
  3992 ;; This function is called by:
  3993 ;;		_sprintf
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text6
  3998  002AAC                     __ptext6:
  3999                           	callstack 0
  4000  002AAC                     _fround:
  4001                           	callstack 22
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;incstack = 0
  4005                           ;fround@prec stored from wreg
  4006  002AAC  0100               	movlb	0	; () banked
  4007  002AAE  6F95               	movwf	fround@prec& (0+255),b
  4008                           
  4009                           ;doprnt.c: 421: if(prec>=110)
  4010  002AB0  0E6D               	movlw	109
  4011  002AB2  0100               	movlb	0	; () banked
  4012  002AB4  6595               	cpfsgt	fround@prec& (0+255),b
  4013  002AB6  D079               	goto	l6074
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4017  002AB8  0E0A               	movlw	10
  4018  002ABA  6F6F               	movwf	___lbdiv@divisor& (0+255),b
  4019  002ABC  0E64               	movlw	100
  4020  002ABE  6F6B               	movwf	___lbmod@divisor& (0+255),b
  4021  002AC0  5195               	movf	fround@prec& (0+255),w,b
  4022  002AC2  EC51  F024         	call	___lbmod
  4023  002AC6  ECA8  F023         	call	___lbdiv
  4024  002ACA  0D03               	mullw	3
  4025  002ACC  CFF3 F08B          	movff	prodl,??_fround
  4026  002AD0  0E1B               	movlw	27
  4027  002AD2  278B               	addwf	??_fround& (0+255),f,b
  4028  002AD4  518B               	movf	??_fround& (0+255),w,b
  4029  002AD6  0F28               	addlw	low __npowers_
  4030  002AD8  6F8C               	movwf	(??_fround+1)& (0+255),b
  4031  002ADA  C08C  FFF6         	movff	??_fround+1,tblptrl
  4032  002ADE                     	if	1	;There is more than 1 active tblptr byte
  4033  002ADE  0E10               	movlw	high __smallconst
  4034  002AE0  6EF7               	movwf	tblptrh,c
  4035  002AE2                     	endif
  4036  002AE2                     	if	0	;tblptru may be non-zero
  4037  002AE2                     	endif
  4038  002AE2                     	if	0	;tblptru may be non-zero
  4039  002AE2                     	endif
  4040  002AE2  0009               	tblrd		*+
  4041  002AE4  CFF5 F07C          	movff	tablat,___ftmul@f2
  4042  002AE8  0009               	tblrd		*+
  4043  002AEA  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  4044  002AEE  000A               	tblrd		*-
  4045  002AF0  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  4046  002AF4  0E64               	movlw	100
  4047  002AF6  6F6F               	movwf	___lbdiv@divisor& (0+255),b
  4048  002AF8  5195               	movf	fround@prec& (0+255),w,b
  4049  002AFA  ECA8  F023         	call	___lbdiv
  4050  002AFE  0D03               	mullw	3
  4051  002B00  CFF3 F08D          	movff	prodl,??_fround+2
  4052  002B04  0E36               	movlw	54
  4053  002B06  278D               	addwf	(??_fround+2)& (0+255),f,b
  4054  002B08  518D               	movf	(??_fround+2)& (0+255),w,b
  4055  002B0A  0F28               	addlw	low __npowers_
  4056  002B0C  6F8E               	movwf	(??_fround+3)& (0+255),b
  4057  002B0E  C08E  FFF6         	movff	??_fround+3,tblptrl
  4058  002B12                     	if	1	;There is more than 1 active tblptr byte
  4059  002B12  0E10               	movlw	high __smallconst
  4060  002B14  6EF7               	movwf	tblptrh,c
  4061  002B16                     	endif
  4062  002B16                     	if	0	;tblptru may be non-zero
  4063  002B16                     	endif
  4064  002B16                     	if	0	;tblptru may be non-zero
  4065  002B16                     	endif
  4066  002B16  0009               	tblrd		*+
  4067  002B18  CFF5 F079          	movff	tablat,___ftmul@f1
  4068  002B1C  0009               	tblrd		*+
  4069  002B1E  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  4070  002B22  000A               	tblrd		*-
  4071  002B24  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  4072  002B28  EC1C  F01B         	call	___ftmul	;wreg free
  4073  002B2C  C079  F092         	movff	?___ftmul,_fround$1121
  4074  002B30  C07A  F093         	movff	?___ftmul+1,_fround$1121+1
  4075  002B34  C07B  F094         	movff	?___ftmul+2,_fround$1121+2
  4076                           
  4077                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4078  002B38  0E0A               	movlw	10
  4079  002B3A  6F6B               	movwf	___lbmod@divisor& (0+255),b
  4080  002B3C  5195               	movf	fround@prec& (0+255),w,b
  4081  002B3E  EC51  F024         	call	___lbmod
  4082  002B42  0D03               	mullw	3
  4083  002B44  50F3               	movf	243,w,c
  4084  002B46  0F28               	addlw	low __npowers_
  4085  002B48  6F8B               	movwf	??_fround& (0+255),b
  4086  002B4A  C08B  FFF6         	movff	??_fround,tblptrl
  4087  002B4E                     	if	1	;There is more than 1 active tblptr byte
  4088  002B4E  0E10               	movlw	high __smallconst
  4089  002B50  6EF7               	movwf	tblptrh,c
  4090  002B52                     	endif
  4091  002B52                     	if	0	;tblptru may be non-zero
  4092  002B52                     	endif
  4093  002B52                     	if	0	;tblptru may be non-zero
  4094  002B52                     	endif
  4095  002B52  0009               	tblrd		*+
  4096  002B54  CFF5 F07C          	movff	tablat,___ftmul@f2
  4097  002B58  0009               	tblrd		*+
  4098  002B5A  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  4099  002B5E  000A               	tblrd		*-
  4100  002B60  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  4101  002B64  C092  F079         	movff	_fround$1121,___ftmul@f1
  4102  002B68  C093  F07A         	movff	_fround$1121+1,___ftmul@f1+1
  4103  002B6C  C094  F07B         	movff	_fround$1121+2,___ftmul@f1+2
  4104  002B70  EC1C  F01B         	call	___ftmul	;wreg free
  4105  002B74  C079  F08F         	movff	?___ftmul,_fround$1122
  4106  002B78  C07A  F090         	movff	?___ftmul+1,_fround$1122+1
  4107  002B7C  C07B  F091         	movff	?___ftmul+2,_fround$1122+2
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4111  002B80  C08F  F079         	movff	_fround$1122,___ftmul@f1
  4112  002B84  C090  F07A         	movff	_fround$1122+1,___ftmul@f1+1
  4113  002B88  C091  F07B         	movff	_fround$1122+2,___ftmul@f1+2
  4114  002B8C  0E00               	movlw	0
  4115  002B8E  6F7C               	movwf	___ftmul@f2& (0+255),b
  4116  002B90  0E00               	movlw	0
  4117  002B92  6F7D               	movwf	(___ftmul@f2+1)& (0+255),b
  4118  002B94  0E3F               	movlw	63
  4119  002B96  6F7E               	movwf	(___ftmul@f2+2)& (0+255),b
  4120  002B98  EC1C  F01B         	call	___ftmul	;wreg free
  4121  002B9C  C079  F088         	movff	?___ftmul,?_fround
  4122  002BA0  C07A  F089         	movff	?___ftmul+1,?_fround+1
  4123  002BA4  C07B  F08A         	movff	?___ftmul+2,?_fround+2
  4124  002BA8  0012               	return	
  4125  002BAA                     l6074:
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;doprnt.c: 423: else if(prec > 10)
  4129  002BAA  0E0A               	movlw	10
  4130  002BAC  6595               	cpfsgt	fround@prec& (0+255),b
  4131  002BAE  D04D               	goto	l6082
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4135  002BB0  0E0A               	movlw	10
  4136  002BB2  6F6B               	movwf	___lbmod@divisor& (0+255),b
  4137  002BB4  5195               	movf	fround@prec& (0+255),w,b
  4138  002BB6  EC51  F024         	call	___lbmod
  4139  002BBA  0D03               	mullw	3
  4140  002BBC  50F3               	movf	243,w,c
  4141  002BBE  0F28               	addlw	low __npowers_
  4142  002BC0  6F8B               	movwf	??_fround& (0+255),b
  4143  002BC2  C08B  FFF6         	movff	??_fround,tblptrl
  4144  002BC6                     	if	1	;There is more than 1 active tblptr byte
  4145  002BC6  0E10               	movlw	high __smallconst
  4146  002BC8  6EF7               	movwf	tblptrh,c
  4147  002BCA                     	endif
  4148  002BCA                     	if	0	;tblptru may be non-zero
  4149  002BCA                     	endif
  4150  002BCA                     	if	0	;tblptru may be non-zero
  4151  002BCA                     	endif
  4152  002BCA  0009               	tblrd		*+
  4153  002BCC  CFF5 F07C          	movff	tablat,___ftmul@f2
  4154  002BD0  0009               	tblrd		*+
  4155  002BD2  CFF5 F07D          	movff	tablat,___ftmul@f2+1
  4156  002BD6  000A               	tblrd		*-
  4157  002BD8  CFF5 F07E          	movff	tablat,___ftmul@f2+2
  4158  002BDC  0E0A               	movlw	10
  4159  002BDE  6F6F               	movwf	___lbdiv@divisor& (0+255),b
  4160  002BE0  5195               	movf	fround@prec& (0+255),w,b
  4161  002BE2  ECA8  F023         	call	___lbdiv
  4162  002BE6  0D03               	mullw	3
  4163  002BE8  CFF3 F08C          	movff	prodl,??_fround+1
  4164  002BEC  0E1B               	movlw	27
  4165  002BEE  278C               	addwf	(??_fround+1)& (0+255),f,b
  4166  002BF0  518C               	movf	(??_fround+1)& (0+255),w,b
  4167  002BF2  0F28               	addlw	low __npowers_
  4168  002BF4  6F8D               	movwf	(??_fround+2)& (0+255),b
  4169  002BF6  C08D  FFF6         	movff	??_fround+2,tblptrl
  4170  002BFA                     	if	1	;There is more than 1 active tblptr byte
  4171  002BFA  0E10               	movlw	high __smallconst
  4172  002BFC  6EF7               	movwf	tblptrh,c
  4173  002BFE                     	endif
  4174  002BFE                     	if	0	;tblptru may be non-zero
  4175  002BFE                     	endif
  4176  002BFE                     	if	0	;tblptru may be non-zero
  4177  002BFE                     	endif
  4178  002BFE  0009               	tblrd		*+
  4179  002C00  CFF5 F079          	movff	tablat,___ftmul@f1
  4180  002C04  0009               	tblrd		*+
  4181  002C06  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  4182  002C0A  000A               	tblrd		*-
  4183  002C0C  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  4184  002C10  EC1C  F01B         	call	___ftmul	;wreg free
  4185  002C14  C079  F092         	movff	?___ftmul,_fround$1121
  4186  002C18  C07A  F093         	movff	?___ftmul+1,_fround$1121+1
  4187  002C1C  C07B  F094         	movff	?___ftmul+2,_fround$1121+2
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4191  002C20  C092  F079         	movff	_fround$1121,___ftmul@f1
  4192  002C24  C093  F07A         	movff	_fround$1121+1,___ftmul@f1+1
  4193  002C28  C094  F07B         	movff	_fround$1121+2,___ftmul@f1+2
  4194  002C2C  0E00               	movlw	0
  4195  002C2E  6F7C               	movwf	___ftmul@f2& (0+255),b
  4196  002C30  0E00               	movlw	0
  4197  002C32  6F7D               	movwf	(___ftmul@f2+1)& (0+255),b
  4198  002C34  0E3F               	movlw	63
  4199  002C36  6F7E               	movwf	(___ftmul@f2+2)& (0+255),b
  4200  002C38  EC1C  F01B         	call	___ftmul	;wreg free
  4201  002C3C  C079  F088         	movff	?___ftmul,?_fround
  4202  002C40  C07A  F089         	movff	?___ftmul+1,?_fround+1
  4203  002C44  C07B  F08A         	movff	?___ftmul+2,?_fround+2
  4204  002C48  0012               	return	
  4205  002C4A                     l6082:
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4209  002C4A  5195               	movf	fround@prec& (0+255),w,b
  4210  002C4C  0D03               	mullw	3
  4211  002C4E  50F3               	movf	243,w,c
  4212  002C50  0F28               	addlw	low __npowers_
  4213  002C52  6F8B               	movwf	??_fround& (0+255),b
  4214  002C54  C08B  FFF6         	movff	??_fround,tblptrl
  4215  002C58                     	if	1	;There is more than 1 active tblptr byte
  4216  002C58  0E10               	movlw	high __smallconst
  4217  002C5A  6EF7               	movwf	tblptrh,c
  4218  002C5C                     	endif
  4219  002C5C                     	if	0	;tblptru may be non-zero
  4220  002C5C                     	endif
  4221  002C5C                     	if	0	;tblptru may be non-zero
  4222  002C5C                     	endif
  4223  002C5C  0009               	tblrd		*+
  4224  002C5E  CFF5 F079          	movff	tablat,___ftmul@f1
  4225  002C62  0009               	tblrd		*+
  4226  002C64  CFF5 F07A          	movff	tablat,___ftmul@f1+1
  4227  002C68  000A               	tblrd		*-
  4228  002C6A  CFF5 F07B          	movff	tablat,___ftmul@f1+2
  4229  002C6E  0E00               	movlw	0
  4230  002C70  6F7C               	movwf	___ftmul@f2& (0+255),b
  4231  002C72  0E00               	movlw	0
  4232  002C74  6F7D               	movwf	(___ftmul@f2+1)& (0+255),b
  4233  002C76  0E3F               	movlw	63
  4234  002C78  6F7E               	movwf	(___ftmul@f2+2)& (0+255),b
  4235  002C7A  EC1C  F01B         	call	___ftmul	;wreg free
  4236  002C7E  C079  F088         	movff	?___ftmul,?_fround
  4237  002C82  C07A  F089         	movff	?___ftmul+1,?_fround+1
  4238  002C86  C07B  F08A         	movff	?___ftmul+2,?_fround+2
  4239                           
  4240                           ; BSR set to: 0
  4241  002C8A  0012               	return		;funcret
  4242  002C8C                     __end_of_fround:
  4243                           	callstack 0
  4244                           
  4245 ;; *************** function ___lbmod *****************
  4246 ;; Defined at:
  4247 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  dividend        1    wreg     unsigned char 
  4250 ;;  divisor         1   11[BANK0 ] unsigned char 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  dividend        1   12[BANK0 ] unsigned char 
  4253 ;;  rem             1   14[BANK0 ] unsigned char 
  4254 ;;  counter         1   13[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      unsigned char 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0
  4259 ;; Tracked objects:
  4260 ;;		On entry : 3F/0
  4261 ;;		On exit  : 3F/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4264 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;Total ram usage:        4 bytes
  4269 ;; Hardware stack levels used: 1
  4270 ;; Hardware stack levels required when called: 5
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_fround
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text7
  4279  0048A2                     __ptext7:
  4280                           	callstack 0
  4281  0048A2                     ___lbmod:
  4282                           	callstack 23
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;incstack = 0
  4286                           ;___lbmod@dividend stored from wreg
  4287  0048A2  6F6C               	movwf	___lbmod@dividend& (0+255),b
  4288  0048A4  0E08               	movlw	8
  4289  0048A6  0100               	movlb	0	; () banked
  4290  0048A8  6F6D               	movwf	___lbmod@counter& (0+255),b
  4291  0048AA  0E00               	movlw	0
  4292  0048AC  6F6E               	movwf	___lbmod@rem& (0+255),b
  4293  0048AE                     l6006:
  4294                           
  4295                           ; BSR set to: 0
  4296  0048AE  90D8               	bcf	status,0,c
  4297  0048B0  356C               	rlcf	___lbmod@dividend& (0+255),w,b
  4298  0048B2  356E               	rlcf	___lbmod@rem& (0+255),w,b
  4299  0048B4  6F6E               	movwf	___lbmod@rem& (0+255),b
  4300                           
  4301                           ; BSR set to: 0
  4302  0048B6  90D8               	bcf	status,0,c
  4303  0048B8  376C               	rlcf	___lbmod@dividend& (0+255),f,b
  4304                           
  4305                           ; BSR set to: 0
  4306  0048BA  516B               	movf	___lbmod@divisor& (0+255),w,b
  4307  0048BC  5D6E               	subwf	___lbmod@rem& (0+255),w,b
  4308  0048BE  A0D8               	btfss	status,0,c
  4309  0048C0  D002               	goto	l6014
  4310                           
  4311                           ; BSR set to: 0
  4312  0048C2  516B               	movf	___lbmod@divisor& (0+255),w,b
  4313  0048C4  5F6E               	subwf	___lbmod@rem& (0+255),f,b
  4314  0048C6                     l6014:
  4315                           
  4316                           ; BSR set to: 0
  4317  0048C6  2F6D               	decfsz	___lbmod@counter& (0+255),f,b
  4318  0048C8  D7F2               	goto	l6006
  4319                           
  4320                           ; BSR set to: 0
  4321  0048CA  516E               	movf	___lbmod@rem& (0+255),w,b
  4322                           
  4323                           ; BSR set to: 0
  4324  0048CC  0012               	return		;funcret
  4325  0048CE                     __end_of___lbmod:
  4326                           	callstack 0
  4327                           
  4328 ;; *************** function ___lbdiv *****************
  4329 ;; Defined at:
  4330 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  dividend        1    wreg     unsigned char 
  4333 ;;  divisor         1   15[BANK0 ] unsigned char 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  dividend        1   16[BANK0 ] unsigned char 
  4336 ;;  quotient        1   18[BANK0 ] unsigned char 
  4337 ;;  counter         1   17[BANK0 ] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      unsigned char 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 3F/0
  4344 ;;		On exit  : 3F/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4347 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;Total ram usage:        4 bytes
  4352 ;; Hardware stack levels used: 1
  4353 ;; Hardware stack levels required when called: 5
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_fround
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text8
  4362  004750                     __ptext8:
  4363                           	callstack 0
  4364  004750                     ___lbdiv:
  4365                           	callstack 23
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;incstack = 0
  4369                           ;___lbdiv@dividend stored from wreg
  4370  004750  6F70               	movwf	___lbdiv@dividend& (0+255),b
  4371  004752  0E00               	movlw	0
  4372  004754  0100               	movlb	0	; () banked
  4373  004756  6F72               	movwf	___lbdiv@quotient& (0+255),b
  4374                           
  4375                           ; BSR set to: 0
  4376  004758  516F               	movf	___lbdiv@divisor& (0+255),w,b
  4377  00475A  B4D8               	btfsc	status,2,c
  4378  00475C  D015               	goto	l6000
  4379                           
  4380                           ; BSR set to: 0
  4381  00475E  0E01               	movlw	1
  4382  004760  6F71               	movwf	___lbdiv@counter& (0+255),b
  4383  004762  D003               	goto	l5988
  4384  004764                     l5984:
  4385                           
  4386                           ; BSR set to: 0
  4387  004764  90D8               	bcf	status,0,c
  4388  004766  376F               	rlcf	___lbdiv@divisor& (0+255),f,b
  4389                           
  4390                           ; BSR set to: 0
  4391  004768  2B71               	incf	___lbdiv@counter& (0+255),f,b
  4392  00476A                     l5988:
  4393                           
  4394                           ; BSR set to: 0
  4395  00476A  AF6F               	btfss	___lbdiv@divisor& (0+255),7,b
  4396  00476C  D7FB               	goto	l5984
  4397  00476E                     u6930:
  4398                           
  4399                           ; BSR set to: 0
  4400  00476E  90D8               	bcf	status,0,c
  4401  004770  3772               	rlcf	___lbdiv@quotient& (0+255),f,b
  4402  004772  516F               	movf	___lbdiv@divisor& (0+255),w,b
  4403  004774  5D70               	subwf	___lbdiv@dividend& (0+255),w,b
  4404  004776  A0D8               	btfss	status,0,c
  4405  004778  D003               	goto	l5996
  4406                           
  4407                           ; BSR set to: 0
  4408  00477A  516F               	movf	___lbdiv@divisor& (0+255),w,b
  4409  00477C  5F70               	subwf	___lbdiv@dividend& (0+255),f,b
  4410                           
  4411                           ; BSR set to: 0
  4412  00477E  8172               	bsf	___lbdiv@quotient& (0+255),0,b
  4413  004780                     l5996:
  4414                           
  4415                           ; BSR set to: 0
  4416  004780  90D8               	bcf	status,0,c
  4417  004782  336F               	rrcf	___lbdiv@divisor& (0+255),f,b
  4418                           
  4419                           ; BSR set to: 0
  4420  004784  2F71               	decfsz	___lbdiv@counter& (0+255),f,b
  4421  004786  D7F3               	goto	u6930
  4422  004788                     l6000:
  4423                           
  4424                           ; BSR set to: 0
  4425  004788  5172               	movf	___lbdiv@quotient& (0+255),w,b
  4426                           
  4427                           ; BSR set to: 0
  4428  00478A  0012               	return		;funcret
  4429  00478C                     __end_of___lbdiv:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function ___ftmul *****************
  4433 ;; Defined at:
  4434 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftmul.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  f1              3   25[BANK0 ] float 
  4437 ;;  f2              3   28[BANK0 ] float 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  f3_as_produc    3   35[BANK0 ] unsigned um
  4440 ;;  sign            1   39[BANK0 ] unsigned char 
  4441 ;;  cntr            1   38[BANK0 ] unsigned char 
  4442 ;;  exp             1   34[BANK0 ] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  3   25[BANK0 ] float 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 3F/0
  4449 ;;		On exit  : 3F/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4452 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;Total ram usage:       15 bytes
  4457 ;; Hardware stack levels used: 1
  4458 ;; Hardware stack levels required when called: 6
  4459 ;; This function calls:
  4460 ;;		___ftpack
  4461 ;; This function is called by:
  4462 ;;		_fround
  4463 ;;		_scale
  4464 ;;		_sprintf
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text9
  4469  003638                     __ptext9:
  4470                           	callstack 0
  4471  003638                     ___ftmul:
  4472                           	callstack 22
  4473                           
  4474                           ; BSR set to: 0
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;incstack = 0
  4478  003638  C07B  F07F         	movff	___ftmul@f1+2,??___ftmul
  4479  00363C  6B80               	clrf	(??___ftmul+1)& (0+255),b
  4480  00363E  6B81               	clrf	(??___ftmul+2)& (0+255),b
  4481  003640  357A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4482  003642  377F               	rlcf	??___ftmul& (0+255),f,b
  4483  003644  E301               	bnc	u6631
  4484  003646  8180               	bsf	(??___ftmul+1)& (0+255),0,b
  4485  003648                     u6631:
  4486  003648  517F               	movf	??___ftmul& (0+255),w,b
  4487  00364A  6F82               	movwf	___ftmul@exp& (0+255),b
  4488  00364C  5182               	movf	___ftmul@exp& (0+255),w,b
  4489  00364E  A4D8               	btfss	status,2,c
  4490  003650  D007               	goto	l5792
  4491                           
  4492                           ; BSR set to: 0
  4493  003652  0E00               	movlw	0
  4494  003654  6F79               	movwf	?___ftmul& (0+255),b
  4495  003656  0E00               	movlw	0
  4496  003658  6F7A               	movwf	(?___ftmul+1)& (0+255),b
  4497  00365A  0E00               	movlw	0
  4498  00365C  6F7B               	movwf	(?___ftmul+2)& (0+255),b
  4499  00365E  0012               	return	
  4500  003660                     l5792:
  4501                           
  4502                           ; BSR set to: 0
  4503  003660  C07E  F07F         	movff	___ftmul@f2+2,??___ftmul
  4504  003664  6B80               	clrf	(??___ftmul+1)& (0+255),b
  4505  003666  6B81               	clrf	(??___ftmul+2)& (0+255),b
  4506  003668  357D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4507  00366A  377F               	rlcf	??___ftmul& (0+255),f,b
  4508  00366C  E301               	bnc	u6651
  4509  00366E  8180               	bsf	(??___ftmul+1)& (0+255),0,b
  4510  003670                     u6651:
  4511  003670  517F               	movf	??___ftmul& (0+255),w,b
  4512  003672  6F87               	movwf	___ftmul@sign& (0+255),b
  4513  003674  5187               	movf	___ftmul@sign& (0+255),w,b
  4514  003676  A4D8               	btfss	status,2,c
  4515  003678  D007               	goto	l5798
  4516                           
  4517                           ; BSR set to: 0
  4518  00367A  0E00               	movlw	0
  4519  00367C  6F79               	movwf	?___ftmul& (0+255),b
  4520  00367E  0E00               	movlw	0
  4521  003680  6F7A               	movwf	(?___ftmul+1)& (0+255),b
  4522  003682  0E00               	movlw	0
  4523  003684  6F7B               	movwf	(?___ftmul+2)& (0+255),b
  4524  003686  0012               	return	
  4525  003688                     l5798:
  4526                           
  4527                           ; BSR set to: 0
  4528  003688  5187               	movf	___ftmul@sign& (0+255),w,b
  4529  00368A  0F7B               	addlw	123
  4530  00368C  2782               	addwf	___ftmul@exp& (0+255),f,b
  4531                           
  4532                           ; BSR set to: 0
  4533  00368E  C07B  F087         	movff	___ftmul@f1+2,___ftmul@sign
  4534  003692  517E               	movf	(___ftmul@f2+2)& (0+255),w,b
  4535  003694  1B87               	xorwf	___ftmul@sign& (0+255),f,b
  4536  003696  0E80               	movlw	128
  4537  003698  1787               	andwf	___ftmul@sign& (0+255),f,b
  4538                           
  4539                           ; BSR set to: 0
  4540  00369A  8F7A               	bsf	(___ftmul@f1+1)& (0+255),7,b
  4541                           
  4542                           ; BSR set to: 0
  4543  00369C  8F7D               	bsf	(___ftmul@f2+1)& (0+255),7,b
  4544                           
  4545                           ; BSR set to: 0
  4546  00369E  0EFF               	movlw	255
  4547  0036A0  177C               	andwf	___ftmul@f2& (0+255),f,b
  4548  0036A2  0EFF               	movlw	255
  4549  0036A4  177D               	andwf	(___ftmul@f2+1)& (0+255),f,b
  4550  0036A6  0E00               	movlw	0
  4551  0036A8  177E               	andwf	(___ftmul@f2+2)& (0+255),f,b
  4552                           
  4553                           ; BSR set to: 0
  4554  0036AA  0E00               	movlw	0
  4555  0036AC  6F83               	movwf	___ftmul@f3_as_product& (0+255),b
  4556  0036AE  0E00               	movlw	0
  4557  0036B0  6F84               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  4558  0036B2  0E00               	movlw	0
  4559  0036B4  6F85               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  4560                           
  4561                           ; BSR set to: 0
  4562  0036B6  0E07               	movlw	7
  4563  0036B8  6F86               	movwf	___ftmul@cntr& (0+255),b
  4564  0036BA                     l5812:
  4565                           
  4566                           ; BSR set to: 0
  4567  0036BA  A179               	btfss	___ftmul@f1& (0+255),0,b
  4568  0036BC  D006               	goto	l5816
  4569                           
  4570                           ; BSR set to: 0
  4571  0036BE  517C               	movf	___ftmul@f2& (0+255),w,b
  4572  0036C0  2783               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4573  0036C2  517D               	movf	(___ftmul@f2+1)& (0+255),w,b
  4574  0036C4  2384               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4575  0036C6  517E               	movf	(___ftmul@f2+2)& (0+255),w,b
  4576  0036C8  2385               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4577  0036CA                     l5816:
  4578                           
  4579                           ; BSR set to: 0
  4580  0036CA  90D8               	bcf	status,0,c
  4581  0036CC  337B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4582  0036CE  337A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4583  0036D0  3379               	rrcf	___ftmul@f1& (0+255),f,b
  4584  0036D2  90D8               	bcf	status,0,c
  4585  0036D4  377C               	rlcf	___ftmul@f2& (0+255),f,b
  4586  0036D6  377D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  4587  0036D8  377E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  4588                           
  4589                           ; BSR set to: 0
  4590  0036DA  2F86               	decfsz	___ftmul@cntr& (0+255),f,b
  4591  0036DC  D7EE               	goto	l5812
  4592                           
  4593                           ; BSR set to: 0
  4594  0036DE  0E09               	movlw	9
  4595  0036E0  6F86               	movwf	___ftmul@cntr& (0+255),b
  4596  0036E2                     l5822:
  4597                           
  4598                           ; BSR set to: 0
  4599  0036E2  A179               	btfss	___ftmul@f1& (0+255),0,b
  4600  0036E4  D006               	goto	l5826
  4601                           
  4602                           ; BSR set to: 0
  4603  0036E6  517C               	movf	___ftmul@f2& (0+255),w,b
  4604  0036E8  2783               	addwf	___ftmul@f3_as_product& (0+255),f,b
  4605  0036EA  517D               	movf	(___ftmul@f2+1)& (0+255),w,b
  4606  0036EC  2384               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  4607  0036EE  517E               	movf	(___ftmul@f2+2)& (0+255),w,b
  4608  0036F0  2385               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  4609  0036F2                     l5826:
  4610                           
  4611                           ; BSR set to: 0
  4612  0036F2  90D8               	bcf	status,0,c
  4613  0036F4  337B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  4614  0036F6  337A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  4615  0036F8  3379               	rrcf	___ftmul@f1& (0+255),f,b
  4616  0036FA  90D8               	bcf	status,0,c
  4617  0036FC  3385               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  4618  0036FE  3384               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  4619  003700  3383               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  4620                           
  4621                           ; BSR set to: 0
  4622  003702  2F86               	decfsz	___ftmul@cntr& (0+255),f,b
  4623  003704  D7EE               	goto	l5822
  4624                           
  4625                           ; BSR set to: 0
  4626  003706  C083  F06B         	movff	___ftmul@f3_as_product,___ftpack@arg
  4627  00370A  C084  F06C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4628  00370E  C085  F06D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4629  003712  C082  F06E         	movff	___ftmul@exp,___ftpack@exp
  4630  003716  C087  F06F         	movff	___ftmul@sign,___ftpack@sign
  4631  00371A  EC43  F01E         	call	___ftpack	;wreg free
  4632  00371E  C06B  F079         	movff	?___ftpack,?___ftmul
  4633  003722  C06C  F07A         	movff	?___ftpack+1,?___ftmul+1
  4634  003726  C06D  F07B         	movff	?___ftpack+2,?___ftmul+2
  4635                           
  4636                           ; BSR set to: 0
  4637  00372A  0012               	return		;funcret
  4638  00372C                     __end_of___ftmul:
  4639                           	callstack 0
  4640                           
  4641 ;; *************** function __tdiv_to_l_ *****************
  4642 ;; Defined at:
  4643 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdivl.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  f1              3   11[BANK0 ] float 
  4646 ;;  f2              3   14[BANK0 ] float 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  quot            4   20[BANK0 ] unsigned long 
  4649 ;;  exp1            1   25[BANK0 ] unsigned char 
  4650 ;;  cntr            1   24[BANK0 ] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  4   11[BANK0 ] unsigned long 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 3F/0
  4657 ;;		On exit  : 3F/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4660 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;Total ram usage:       15 bytes
  4665 ;; Hardware stack levels used: 1
  4666 ;; Hardware stack levels required when called: 5
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_sprintf
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text10
  4675  003346                     __ptext10:
  4676                           	callstack 0
  4677  003346                     __tdiv_to_l_:
  4678                           	callstack 24
  4679                           
  4680                           ; BSR set to: 0
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;incstack = 0
  4684  003346  C06D  F071         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4685  00334A  6B72               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4686  00334C  6B73               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4687  00334E  356C               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4688  003350  3771               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4689  003352  E301               	bnc	u7111
  4690  003354  8172               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4691  003356                     u7111:
  4692  003356  5171               	movf	??__tdiv_to_l_& (0+255),w,b
  4693  003358  6F79               	movwf	__tdiv_to_l_@exp1& (0+255),b
  4694  00335A  5179               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4695  00335C  A4D8               	btfss	status,2,c
  4696  00335E  D009               	goto	l6142
  4697  003360                     u7120:
  4698                           
  4699                           ; BSR set to: 0
  4700  003360  0E00               	movlw	0
  4701  003362  6F6B               	movwf	?__tdiv_to_l_& (0+255),b
  4702  003364  0E00               	movlw	0
  4703  003366  6F6C               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4704  003368  0E00               	movlw	0
  4705  00336A  6F6D               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4706  00336C  0E00               	movlw	0
  4707  00336E  6F6E               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4708  003370  0012               	return	
  4709  003372                     l6142:
  4710                           
  4711                           ; BSR set to: 0
  4712  003372  C070  F071         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4713  003376  6B72               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4714  003378  6B73               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4715  00337A  356F               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4716  00337C  3771               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4717  00337E  E301               	bnc	u7131
  4718  003380  8172               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4719  003382                     u7131:
  4720  003382  5171               	movf	??__tdiv_to_l_& (0+255),w,b
  4721  003384  6F78               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4722  003386  5178               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4723  003388  B4D8               	btfsc	status,2,c
  4724  00338A  D7EA               	goto	u7120
  4725                           
  4726                           ; BSR set to: 0
  4727  00338C  8F6C               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  4728                           
  4729                           ; BSR set to: 0
  4730  00338E  0EFF               	movlw	255
  4731  003390  176B               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  4732  003392  0EFF               	movlw	255
  4733  003394  176C               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4734  003396  0E00               	movlw	0
  4735  003398  176D               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4736  00339A  8F6F               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  4737                           
  4738                           ; BSR set to: 0
  4739  00339C  0EFF               	movlw	255
  4740  00339E  176E               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  4741  0033A0  0EFF               	movlw	255
  4742  0033A2  176F               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  4743  0033A4  0E00               	movlw	0
  4744  0033A6  1770               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  4745                           
  4746                           ; BSR set to: 0
  4747  0033A8  0E00               	movlw	0
  4748  0033AA  6F74               	movwf	__tdiv_to_l_@quot& (0+255),b
  4749  0033AC  0E00               	movlw	0
  4750  0033AE  6F75               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  4751  0033B0  0E00               	movlw	0
  4752  0033B2  6F76               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  4753  0033B4  0E00               	movlw	0
  4754  0033B6  6F77               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  4755                           
  4756                           ; BSR set to: 0
  4757  0033B8  0E7F               	movlw	127
  4758  0033BA  5F79               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4759                           
  4760                           ; BSR set to: 0
  4761  0033BC  5178               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4762  0033BE  0F98               	addlw	152
  4763  0033C0  5F79               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4764                           
  4765                           ; BSR set to: 0
  4766  0033C2  0E18               	movlw	24
  4767  0033C4  6F78               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4768  0033C6                     l709:
  4769                           
  4770                           ; BSR set to: 0
  4771  0033C6  90D8               	bcf	status,0,c
  4772  0033C8  3774               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4773  0033CA  3775               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4774  0033CC  3776               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4775  0033CE  3777               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4776                           
  4777                           ; BSR set to: 0
  4778  0033D0  516E               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4779  0033D2  5D6B               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  4780  0033D4  516F               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4781  0033D6  596C               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4782  0033D8  5170               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4783  0033DA  596D               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  4784  0033DC  A0D8               	btfss	status,0,c
  4785  0033DE  D007               	goto	l710
  4786                           
  4787                           ; BSR set to: 0
  4788  0033E0  516E               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4789  0033E2  5F6B               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  4790  0033E4  516F               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4791  0033E6  5B6C               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4792  0033E8  5170               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4793  0033EA  5B6D               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4794                           
  4795                           ; BSR set to: 0
  4796  0033EC  8174               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  4797  0033EE                     l710:
  4798                           
  4799                           ; BSR set to: 0
  4800  0033EE  90D8               	bcf	status,0,c
  4801  0033F0  376B               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  4802  0033F2  376C               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4803  0033F4  376D               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4804                           
  4805                           ; BSR set to: 0
  4806  0033F6  2F78               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  4807  0033F8  D7E6               	goto	l709
  4808                           
  4809                           ; BSR set to: 0
  4810  0033FA  AF79               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  4811  0033FC  D00D               	goto	l6182
  4812                           
  4813                           ; BSR set to: 0
  4814  0033FE  5179               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4815  003400  0A80               	xorlw	128
  4816  003402  0F97               	addlw	151
  4817  003404  A0D8               	btfss	status,0,c
  4818  003406  D7AC               	goto	u7120
  4819  003408                     l6178:
  4820                           
  4821                           ; BSR set to: 0
  4822  003408  90D8               	bcf	status,0,c
  4823  00340A  3377               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4824  00340C  3376               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4825  00340E  3375               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4826  003410  3374               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  4827                           
  4828                           ; BSR set to: 0
  4829  003412  3F79               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  4830  003414  D7F9               	goto	l6178
  4831  003416  D00D               	goto	u7190
  4832  003418                     l6182:
  4833                           
  4834                           ; BSR set to: 0
  4835  003418  0E17               	movlw	23
  4836  00341A  6579               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  4837  00341C  D007               	goto	l6190
  4838  00341E  D7A0               	goto	u7120
  4839  003420                     l6188:
  4840                           
  4841                           ; BSR set to: 0
  4842  003420  90D8               	bcf	status,0,c
  4843  003422  3774               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4844  003424  3775               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4845  003426  3776               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4846  003428  3777               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4847  00342A  0779               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  4848  00342C                     l6190:
  4849                           
  4850                           ; BSR set to: 0
  4851  00342C  5179               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4852  00342E  A4D8               	btfss	status,2,c
  4853  003430  D7F7               	goto	l6188
  4854  003432                     u7190:
  4855                           
  4856                           ; BSR set to: 0
  4857  003432  C074  F06B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4858  003436  C075  F06C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4859  00343A  C076  F06D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4860  00343E  C077  F06E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4861                           
  4862                           ; BSR set to: 0
  4863  003442  0012               	return		;funcret
  4864  003444                     __end_of__tdiv_to_l_:
  4865                           	callstack 0
  4866                           
  4867 ;; *************** function __div_to_l_ *****************
  4868 ;; Defined at:
  4869 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fldivl.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  f1              3   11[BANK0 ] unsigned long 
  4872 ;;  f2              3   14[BANK0 ] unsigned long 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  quot            4   17[BANK0 ] unsigned long 
  4875 ;;  exp1            1   22[BANK0 ] unsigned char 
  4876 ;;  cntr            1   21[BANK0 ] unsigned char 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  4   11[BANK0 ] unsigned long 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 3F/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4886 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;Total ram usage:       12 bytes
  4891 ;; Hardware stack levels used: 1
  4892 ;; Hardware stack levels required when called: 5
  4893 ;; This function calls:
  4894 ;;		Nothing
  4895 ;; This function is called by:
  4896 ;;		_sprintf
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text11
  4901  003542                     __ptext11:
  4902                           	callstack 0
  4903  003542                     __div_to_l_:
  4904                           	callstack 24
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;incstack = 0
  4908  003542  0100               	movlb	0	; () banked
  4909  003544  356D               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  4910  003546  356E               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  4911  003548  6F76               	movwf	__div_to_l_@exp1& (0+255),b
  4912  00354A  5176               	movf	__div_to_l_@exp1& (0+255),w,b
  4913  00354C  A4D8               	btfss	status,2,c
  4914  00354E  D009               	goto	l6198
  4915  003550                     u7200:
  4916                           
  4917                           ; BSR set to: 0
  4918  003550  0E00               	movlw	0
  4919  003552  6F6B               	movwf	?__div_to_l_& (0+255),b
  4920  003554  0E00               	movlw	0
  4921  003556  6F6C               	movwf	(?__div_to_l_+1)& (0+255),b
  4922  003558  0E00               	movlw	0
  4923  00355A  6F6D               	movwf	(?__div_to_l_+2)& (0+255),b
  4924  00355C  0E00               	movlw	0
  4925  00355E  6F6E               	movwf	(?__div_to_l_+3)& (0+255),b
  4926  003560  0012               	return	
  4927  003562                     l6198:
  4928                           
  4929                           ; BSR set to: 0
  4930  003562  3570               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  4931  003564  3571               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  4932  003566  6F75               	movwf	__div_to_l_@cntr& (0+255),b
  4933  003568  5175               	movf	__div_to_l_@cntr& (0+255),w,b
  4934  00356A  B4D8               	btfsc	status,2,c
  4935  00356C  D7F1               	goto	u7200
  4936                           
  4937                           ; BSR set to: 0
  4938  00356E  8F6D               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  4939                           
  4940                           ; BSR set to: 0
  4941  003570  0EFF               	movlw	255
  4942  003572  176B               	andwf	__div_to_l_@f1& (0+255),f,b
  4943  003574  0EFF               	movlw	255
  4944  003576  176C               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  4945  003578  0EFF               	movlw	255
  4946  00357A  176D               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  4947  00357C  0E00               	movlw	0
  4948  00357E  176E               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  4949                           
  4950                           ; BSR set to: 0
  4951  003580  8F70               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  4952  003582  0EFF               	movlw	255
  4953  003584  176E               	andwf	__div_to_l_@f2& (0+255),f,b
  4954  003586  0EFF               	movlw	255
  4955  003588  176F               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  4956  00358A  0EFF               	movlw	255
  4957  00358C  1770               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  4958  00358E  0E00               	movlw	0
  4959  003590  1771               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  4960                           
  4961                           ; BSR set to: 0
  4962  003592  0E00               	movlw	0
  4963  003594  6F71               	movwf	__div_to_l_@quot& (0+255),b
  4964  003596  0E00               	movlw	0
  4965  003598  6F72               	movwf	(__div_to_l_@quot+1)& (0+255),b
  4966  00359A  0E00               	movlw	0
  4967  00359C  6F73               	movwf	(__div_to_l_@quot+2)& (0+255),b
  4968  00359E  0E00               	movlw	0
  4969  0035A0  6F74               	movwf	(__div_to_l_@quot+3)& (0+255),b
  4970                           
  4971                           ; BSR set to: 0
  4972  0035A2  0E7F               	movlw	127
  4973  0035A4  5F76               	subwf	__div_to_l_@exp1& (0+255),f,b
  4974                           
  4975                           ; BSR set to: 0
  4976  0035A6  5175               	movf	__div_to_l_@cntr& (0+255),w,b
  4977  0035A8  0FA0               	addlw	160
  4978  0035AA  5F76               	subwf	__div_to_l_@exp1& (0+255),f,b
  4979                           
  4980                           ; BSR set to: 0
  4981  0035AC  0E20               	movlw	32
  4982  0035AE  6F75               	movwf	__div_to_l_@cntr& (0+255),b
  4983  0035B0                     l6218:
  4984                           
  4985                           ; BSR set to: 0
  4986  0035B0  90D8               	bcf	status,0,c
  4987  0035B2  3771               	rlcf	__div_to_l_@quot& (0+255),f,b
  4988  0035B4  3772               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4989  0035B6  3773               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4990  0035B8  3774               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4991                           
  4992                           ; BSR set to: 0
  4993  0035BA  516E               	movf	__div_to_l_@f2& (0+255),w,b
  4994  0035BC  5D6B               	subwf	__div_to_l_@f1& (0+255),w,b
  4995  0035BE  516F               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4996  0035C0  596C               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  4997  0035C2  5170               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4998  0035C4  596D               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  4999  0035C6  5171               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5000  0035C8  596E               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  5001  0035CA  A0D8               	btfss	status,0,c
  5002  0035CC  D009               	goto	l6226
  5003                           
  5004                           ; BSR set to: 0
  5005  0035CE  516E               	movf	__div_to_l_@f2& (0+255),w,b
  5006  0035D0  5F6B               	subwf	__div_to_l_@f1& (0+255),f,b
  5007  0035D2  516F               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  5008  0035D4  5B6C               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  5009  0035D6  5170               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  5010  0035D8  5B6D               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  5011  0035DA  5171               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  5012  0035DC  5B6E               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  5013                           
  5014                           ; BSR set to: 0
  5015  0035DE  8171               	bsf	__div_to_l_@quot& (0+255),0,b
  5016  0035E0                     l6226:
  5017                           
  5018                           ; BSR set to: 0
  5019  0035E0  90D8               	bcf	status,0,c
  5020  0035E2  376B               	rlcf	__div_to_l_@f1& (0+255),f,b
  5021  0035E4  376C               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  5022  0035E6  376D               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  5023  0035E8  376E               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  5024                           
  5025                           ; BSR set to: 0
  5026  0035EA  2F75               	decfsz	__div_to_l_@cntr& (0+255),f,b
  5027  0035EC  D7E1               	goto	l6218
  5028                           
  5029                           ; BSR set to: 0
  5030  0035EE  AF76               	btfss	__div_to_l_@exp1& (0+255),7,b
  5031  0035F0  D00D               	goto	l6242
  5032                           
  5033                           ; BSR set to: 0
  5034  0035F2  5176               	movf	__div_to_l_@exp1& (0+255),w,b
  5035  0035F4  0A80               	xorlw	128
  5036  0035F6  0F9F               	addlw	159
  5037  0035F8  A0D8               	btfss	status,0,c
  5038  0035FA  D7AA               	goto	u7200
  5039  0035FC                     l6238:
  5040                           
  5041                           ; BSR set to: 0
  5042  0035FC  90D8               	bcf	status,0,c
  5043  0035FE  3374               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  5044  003600  3373               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  5045  003602  3372               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  5046  003604  3371               	rrcf	__div_to_l_@quot& (0+255),f,b
  5047                           
  5048                           ; BSR set to: 0
  5049  003606  3F76               	incfsz	__div_to_l_@exp1& (0+255),f,b
  5050  003608  D7F9               	goto	l6238
  5051  00360A  D00D               	goto	u7260
  5052  00360C                     l6242:
  5053                           
  5054                           ; BSR set to: 0
  5055  00360C  0E1F               	movlw	31
  5056  00360E  6576               	cpfsgt	__div_to_l_@exp1& (0+255),b
  5057  003610  D007               	goto	l6250
  5058  003612  D79E               	goto	u7200
  5059  003614                     l6248:
  5060                           
  5061                           ; BSR set to: 0
  5062  003614  90D8               	bcf	status,0,c
  5063  003616  3771               	rlcf	__div_to_l_@quot& (0+255),f,b
  5064  003618  3772               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  5065  00361A  3773               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  5066  00361C  3774               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  5067  00361E  0776               	decf	__div_to_l_@exp1& (0+255),f,b
  5068  003620                     l6250:
  5069                           
  5070                           ; BSR set to: 0
  5071  003620  5176               	movf	__div_to_l_@exp1& (0+255),w,b
  5072  003622  A4D8               	btfss	status,2,c
  5073  003624  D7F7               	goto	l6248
  5074  003626                     u7260:
  5075                           
  5076                           ; BSR set to: 0
  5077  003626  C071  F06B         	movff	__div_to_l_@quot,?__div_to_l_
  5078  00362A  C072  F06C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5079  00362E  C073  F06D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5080  003632  C074  F06E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5081                           
  5082                           ; BSR set to: 0
  5083  003636  0012               	return		;funcret
  5084  003638                     __end_of__div_to_l_:
  5085                           	callstack 0
  5086                           
  5087 ;; *************** function ___llmod *****************
  5088 ;; Defined at:
  5089 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\llmod.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  dividend        4   24[BANK0 ] unsigned long 
  5092 ;;  divisor         4   28[BANK0 ] unsigned long 
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  counter         1   32[BANK0 ] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  4   24[BANK0 ] unsigned long 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, status,0
  5099 ;; Tracked objects:
  5100 ;;		On entry : 3F/0
  5101 ;;		On exit  : 3F/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:        9 bytes
  5109 ;; Hardware stack levels used: 1
  5110 ;; Hardware stack levels required when called: 5
  5111 ;; This function calls:
  5112 ;;		Nothing
  5113 ;; This function is called by:
  5114 ;;		_sprintf
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text12
  5119  004388                     __ptext12:
  5120                           	callstack 0
  5121  004388                     ___llmod:
  5122                           	callstack 24
  5123                           
  5124                           ; BSR set to: 0
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;incstack = 0
  5128  004388  517C               	movf	___llmod@divisor& (0+255),w,b
  5129  00438A  117D               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5130  00438C  117E               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5131  00438E  117F               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5132  004390  B4D8               	btfsc	status,2,c
  5133  004392  D024               	goto	l786
  5134                           
  5135                           ; BSR set to: 0
  5136  004394  0E01               	movlw	1
  5137  004396  6F80               	movwf	___llmod@counter& (0+255),b
  5138  004398  D006               	goto	l6298
  5139  00439A                     l6296:
  5140                           
  5141                           ; BSR set to: 0
  5142  00439A  90D8               	bcf	status,0,c
  5143  00439C  377C               	rlcf	___llmod@divisor& (0+255),f,b
  5144  00439E  377D               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5145  0043A0  377E               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5146  0043A2  377F               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5147  0043A4  2B80               	incf	___llmod@counter& (0+255),f,b
  5148  0043A6                     l6298:
  5149                           
  5150                           ; BSR set to: 0
  5151  0043A6  AF7F               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5152  0043A8  D7F8               	goto	l6296
  5153  0043AA                     u7330:
  5154                           
  5155                           ; BSR set to: 0
  5156  0043AA  517C               	movf	___llmod@divisor& (0+255),w,b
  5157  0043AC  5D78               	subwf	___llmod@dividend& (0+255),w,b
  5158  0043AE  517D               	movf	(___llmod@divisor+1)& (0+255),w,b
  5159  0043B0  5979               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5160  0043B2  517E               	movf	(___llmod@divisor+2)& (0+255),w,b
  5161  0043B4  597A               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5162  0043B6  517F               	movf	(___llmod@divisor+3)& (0+255),w,b
  5163  0043B8  597B               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5164  0043BA  A0D8               	btfss	status,0,c
  5165  0043BC  D008               	goto	l6304
  5166                           
  5167                           ; BSR set to: 0
  5168  0043BE  517C               	movf	___llmod@divisor& (0+255),w,b
  5169  0043C0  5F78               	subwf	___llmod@dividend& (0+255),f,b
  5170  0043C2  517D               	movf	(___llmod@divisor+1)& (0+255),w,b
  5171  0043C4  5B79               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5172  0043C6  517E               	movf	(___llmod@divisor+2)& (0+255),w,b
  5173  0043C8  5B7A               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5174  0043CA  517F               	movf	(___llmod@divisor+3)& (0+255),w,b
  5175  0043CC  5B7B               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5176  0043CE                     l6304:
  5177                           
  5178                           ; BSR set to: 0
  5179  0043CE  90D8               	bcf	status,0,c
  5180  0043D0  337F               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5181  0043D2  337E               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5182  0043D4  337D               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5183  0043D6  337C               	rrcf	___llmod@divisor& (0+255),f,b
  5184                           
  5185                           ; BSR set to: 0
  5186  0043D8  2F80               	decfsz	___llmod@counter& (0+255),f,b
  5187  0043DA  D7E7               	goto	u7330
  5188  0043DC                     l786:
  5189                           
  5190                           ; BSR set to: 0
  5191  0043DC  C078  F078         	movff	___llmod@dividend,?___llmod
  5192  0043E0  C079  F079         	movff	___llmod@dividend+1,?___llmod+1
  5193  0043E4  C07A  F07A         	movff	___llmod@dividend+2,?___llmod+2
  5194  0043E8  C07B  F07B         	movff	___llmod@dividend+3,?___llmod+3
  5195                           
  5196                           ; BSR set to: 0
  5197  0043EC  0012               	return		;funcret
  5198  0043EE                     __end_of___llmod:
  5199                           	callstack 0
  5200                           
  5201 ;; *************** function ___lldiv *****************
  5202 ;; Defined at:
  5203 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\__lldiv.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  dividend        4   11[BANK0 ] unsigned long 
  5206 ;;  divisor         4   15[BANK0 ] unsigned long 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  quotient        4   19[BANK0 ] unsigned long 
  5209 ;;  counter         1   23[BANK0 ] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  4   11[BANK0 ] unsigned long 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0
  5214 ;; Tracked objects:
  5215 ;;		On entry : 3F/0
  5216 ;;		On exit  : 3F/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5219 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;Total ram usage:       13 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; Hardware stack levels required when called: 5
  5226 ;; This function calls:
  5227 ;;		Nothing
  5228 ;; This function is called by:
  5229 ;;		_sprintf
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	text13
  5234  00403A                     __ptext13:
  5235                           	callstack 0
  5236  00403A                     ___lldiv:
  5237                           	callstack 24
  5238                           
  5239                           ; BSR set to: 0
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;incstack = 0
  5243  00403A  0E00               	movlw	0
  5244  00403C  6F73               	movwf	___lldiv@quotient& (0+255),b
  5245  00403E  0E00               	movlw	0
  5246  004040  6F74               	movwf	(___lldiv@quotient+1)& (0+255),b
  5247  004042  0E00               	movlw	0
  5248  004044  6F75               	movwf	(___lldiv@quotient+2)& (0+255),b
  5249  004046  0E00               	movlw	0
  5250  004048  6F76               	movwf	(___lldiv@quotient+3)& (0+255),b
  5251                           
  5252                           ; BSR set to: 0
  5253  00404A  516F               	movf	___lldiv@divisor& (0+255),w,b
  5254  00404C  1170               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5255  00404E  1171               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5256  004050  1172               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5257  004052  B4D8               	btfsc	status,2,c
  5258  004054  D02A               	goto	l371
  5259                           
  5260                           ; BSR set to: 0
  5261  004056  0E01               	movlw	1
  5262  004058  6F77               	movwf	___lldiv@counter& (0+255),b
  5263  00405A  D006               	goto	l6266
  5264  00405C                     l6264:
  5265                           
  5266                           ; BSR set to: 0
  5267  00405C  90D8               	bcf	status,0,c
  5268  00405E  376F               	rlcf	___lldiv@divisor& (0+255),f,b
  5269  004060  3770               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5270  004062  3771               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5271  004064  3772               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5272  004066  2B77               	incf	___lldiv@counter& (0+255),f,b
  5273  004068                     l6266:
  5274                           
  5275                           ; BSR set to: 0
  5276  004068  AF72               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5277  00406A  D7F8               	goto	l6264
  5278  00406C                     u7280:
  5279                           
  5280                           ; BSR set to: 0
  5281  00406C  90D8               	bcf	status,0,c
  5282  00406E  3773               	rlcf	___lldiv@quotient& (0+255),f,b
  5283  004070  3774               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5284  004072  3775               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5285  004074  3776               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5286                           
  5287                           ; BSR set to: 0
  5288  004076  516F               	movf	___lldiv@divisor& (0+255),w,b
  5289  004078  5D6B               	subwf	___lldiv@dividend& (0+255),w,b
  5290  00407A  5170               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5291  00407C  596C               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5292  00407E  5171               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5293  004080  596D               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5294  004082  5172               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5295  004084  596E               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5296  004086  A0D8               	btfss	status,0,c
  5297  004088  D009               	goto	l6276
  5298                           
  5299                           ; BSR set to: 0
  5300  00408A  516F               	movf	___lldiv@divisor& (0+255),w,b
  5301  00408C  5F6B               	subwf	___lldiv@dividend& (0+255),f,b
  5302  00408E  5170               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5303  004090  5B6C               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5304  004092  5171               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5305  004094  5B6D               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5306  004096  5172               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5307  004098  5B6E               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5308                           
  5309                           ; BSR set to: 0
  5310  00409A  8173               	bsf	___lldiv@quotient& (0+255),0,b
  5311  00409C                     l6276:
  5312                           
  5313                           ; BSR set to: 0
  5314  00409C  90D8               	bcf	status,0,c
  5315  00409E  3372               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5316  0040A0  3371               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5317  0040A2  3370               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5318  0040A4  336F               	rrcf	___lldiv@divisor& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321  0040A6  2F77               	decfsz	___lldiv@counter& (0+255),f,b
  5322  0040A8  D7E1               	goto	u7280
  5323  0040AA                     l371:
  5324                           
  5325                           ; BSR set to: 0
  5326  0040AA  C073  F06B         	movff	___lldiv@quotient,?___lldiv
  5327  0040AE  C074  F06C         	movff	___lldiv@quotient+1,?___lldiv+1
  5328  0040B2  C075  F06D         	movff	___lldiv@quotient+2,?___lldiv+2
  5329  0040B6  C076  F06E         	movff	___lldiv@quotient+3,?___lldiv+3
  5330                           
  5331                           ; BSR set to: 0
  5332  0040BA  0012               	return		;funcret
  5333  0040BC                     __end_of___lldiv:
  5334                           	callstack 0
  5335                           
  5336 ;; *************** function ___ftsub *****************
  5337 ;; Defined at:
  5338 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftsub.c"
  5339 ;; Parameters:    Size  Location     Type
  5340 ;;  f1              3   66[BANK0 ] float 
  5341 ;;  f2              3   69[BANK0 ] float 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  3   66[BANK0 ] float 
  5346 ;; Registers used:
  5347 ;;		wreg, status,2, status,0, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 3F/0
  5350 ;;		On exit  : 3F/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5353 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;Total ram usage:        6 bytes
  5358 ;; Hardware stack levels used: 1
  5359 ;; Hardware stack levels required when called: 7
  5360 ;; This function calls:
  5361 ;;		___ftadd
  5362 ;; This function is called by:
  5363 ;;		_sprintf
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	text14
  5368  0046D0                     __ptext14:
  5369                           	callstack 0
  5370  0046D0                     ___ftsub:
  5371                           	callstack 22
  5372                           
  5373                           ; BSR set to: 0
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;incstack = 0
  5377  0046D0  51A5               	movf	___ftsub@f2& (0+255),w,b
  5378  0046D2  11A6               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5379  0046D4  11A7               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5380  0046D6  B4D8               	btfsc	status,2,c
  5381  0046D8  D006               	goto	l6284
  5382                           
  5383                           ; BSR set to: 0
  5384  0046DA  0E00               	movlw	0
  5385  0046DC  1BA5               	xorwf	___ftsub@f2& (0+255),f,b
  5386  0046DE  0E00               	movlw	0
  5387  0046E0  1BA6               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5388  0046E2  0E80               	movlw	128
  5389  0046E4  1BA7               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5390  0046E6                     l6284:
  5391                           
  5392                           ; BSR set to: 0
  5393  0046E6  C0A2  F096         	movff	___ftsub@f1,___ftadd@f1
  5394  0046EA  C0A3  F097         	movff	___ftsub@f1+1,___ftadd@f1+1
  5395  0046EE  C0A4  F098         	movff	___ftsub@f1+2,___ftadd@f1+2
  5396  0046F2  C0A5  F099         	movff	___ftsub@f2,___ftadd@f2
  5397  0046F6  C0A6  F09A         	movff	___ftsub@f2+1,___ftadd@f2+1
  5398  0046FA  C0A7  F09B         	movff	___ftsub@f2+2,___ftadd@f2+2
  5399  0046FE  EC34  F017         	call	___ftadd	;wreg free
  5400  004702  C096  F0A2         	movff	?___ftadd,?___ftsub
  5401  004706  C097  F0A3         	movff	?___ftadd+1,?___ftsub+1
  5402  00470A  C098  F0A4         	movff	?___ftadd+2,?___ftsub+2
  5403                           
  5404                           ; BSR set to: 0
  5405  00470E  0012               	return		;funcret
  5406  004710                     __end_of___ftsub:
  5407                           	callstack 0
  5408                           
  5409 ;; *************** function ___ftadd *****************
  5410 ;; Defined at:
  5411 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftadd.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  f1              3   54[BANK0 ] float 
  5414 ;;  f2              3   57[BANK0 ] float 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  exp1            1   65[BANK0 ] unsigned char 
  5417 ;;  exp2            1   64[BANK0 ] unsigned char 
  5418 ;;  sign            1   63[BANK0 ] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  3   54[BANK0 ] float 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 3F/0
  5425 ;;		On exit  : 3F/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:       12 bytes
  5433 ;; Hardware stack levels used: 1
  5434 ;; Hardware stack levels required when called: 6
  5435 ;; This function calls:
  5436 ;;		___ftpack
  5437 ;; This function is called by:
  5438 ;;		_sprintf
  5439 ;;		___ftsub
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text15
  5444  002E68                     __ptext15:
  5445                           	callstack 0
  5446  002E68                     ___ftadd:
  5447                           	callstack 22
  5448                           
  5449                           ; BSR set to: 0
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;incstack = 0
  5453  002E68  C098  F09C         	movff	___ftadd@f1+2,??___ftadd
  5454  002E6C  6B9D               	clrf	(??___ftadd+1)& (0+255),b
  5455  002E6E  6B9E               	clrf	(??___ftadd+2)& (0+255),b
  5456  002E70  3597               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5457  002E72  379C               	rlcf	??___ftadd& (0+255),f,b
  5458  002E74  E301               	bnc	u6371
  5459  002E76  819D               	bsf	(??___ftadd+1)& (0+255),0,b
  5460  002E78                     u6371:
  5461  002E78  519C               	movf	??___ftadd& (0+255),w,b
  5462  002E7A  6FA1               	movwf	___ftadd@exp1& (0+255),b
  5463  002E7C  C09B  F09C         	movff	___ftadd@f2+2,??___ftadd
  5464  002E80  6B9D               	clrf	(??___ftadd+1)& (0+255),b
  5465  002E82  6B9E               	clrf	(??___ftadd+2)& (0+255),b
  5466  002E84  359A               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5467  002E86  379C               	rlcf	??___ftadd& (0+255),f,b
  5468  002E88  E301               	bnc	u6381
  5469  002E8A  819D               	bsf	(??___ftadd+1)& (0+255),0,b
  5470  002E8C                     u6381:
  5471  002E8C  519C               	movf	??___ftadd& (0+255),w,b
  5472  002E8E  6FA0               	movwf	___ftadd@exp2& (0+255),b
  5473                           
  5474                           ; BSR set to: 0
  5475  002E90  51A1               	movf	___ftadd@exp1& (0+255),w,b
  5476  002E92  B4D8               	btfsc	status,2,c
  5477  002E94  D00A               	goto	u6410
  5478                           
  5479                           ; BSR set to: 0
  5480  002E96  51A0               	movf	___ftadd@exp2& (0+255),w,b
  5481  002E98  5DA1               	subwf	___ftadd@exp1& (0+255),w,b
  5482  002E9A  B0D8               	btfsc	status,0,c
  5483  002E9C  D00D               	goto	l5678
  5484                           
  5485                           ; BSR set to: 0
  5486  002E9E  51A1               	movf	___ftadd@exp1& (0+255),w,b
  5487  002EA0  5DA0               	subwf	___ftadd@exp2& (0+255),w,b
  5488  002EA2  6F9C               	movwf	??___ftadd& (0+255),b
  5489  002EA4  0E18               	movlw	24
  5490  002EA6  659C               	cpfsgt	??___ftadd& (0+255),b
  5491  002EA8  D007               	goto	l5678
  5492  002EAA                     u6410:
  5493                           
  5494                           ; BSR set to: 0
  5495  002EAA  C099  F096         	movff	___ftadd@f2,?___ftadd
  5496  002EAE  C09A  F097         	movff	___ftadd@f2+1,?___ftadd+1
  5497  002EB2  C09B  F098         	movff	___ftadd@f2+2,?___ftadd+2
  5498  002EB6  0012               	return	
  5499  002EB8                     l5678:
  5500                           
  5501                           ; BSR set to: 0
  5502  002EB8  51A0               	movf	___ftadd@exp2& (0+255),w,b
  5503  002EBA  B4D8               	btfsc	status,2,c
  5504  002EBC  D00A               	goto	u6440
  5505                           
  5506                           ; BSR set to: 0
  5507  002EBE  51A1               	movf	___ftadd@exp1& (0+255),w,b
  5508  002EC0  5DA0               	subwf	___ftadd@exp2& (0+255),w,b
  5509  002EC2  B0D8               	btfsc	status,0,c
  5510  002EC4  D00D               	goto	l5684
  5511                           
  5512                           ; BSR set to: 0
  5513  002EC6  51A0               	movf	___ftadd@exp2& (0+255),w,b
  5514  002EC8  5DA1               	subwf	___ftadd@exp1& (0+255),w,b
  5515  002ECA  6F9C               	movwf	??___ftadd& (0+255),b
  5516  002ECC  0E18               	movlw	24
  5517  002ECE  659C               	cpfsgt	??___ftadd& (0+255),b
  5518  002ED0  D007               	goto	l5684
  5519  002ED2                     u6440:
  5520                           
  5521                           ; BSR set to: 0
  5522  002ED2  C096  F096         	movff	___ftadd@f1,?___ftadd
  5523  002ED6  C097  F097         	movff	___ftadd@f1+1,?___ftadd+1
  5524  002EDA  C098  F098         	movff	___ftadd@f1+2,?___ftadd+2
  5525  002EDE  0012               	return	
  5526  002EE0                     l5684:
  5527                           
  5528                           ; BSR set to: 0
  5529  002EE0  0E06               	movlw	6
  5530  002EE2  6F9F               	movwf	___ftadd@sign& (0+255),b
  5531                           
  5532                           ; BSR set to: 0
  5533  002EE4  BF98               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5534                           
  5535                           ; BSR set to: 0
  5536  002EE6  8F9F               	bsf	___ftadd@sign& (0+255),7,b
  5537                           
  5538                           ; BSR set to: 0
  5539  002EE8  BF9B               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5540                           
  5541                           ; BSR set to: 0
  5542  002EEA  8D9F               	bsf	___ftadd@sign& (0+255),6,b
  5543                           
  5544                           ; BSR set to: 0
  5545  002EEC  8F97               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5546                           
  5547                           ; BSR set to: 0
  5548  002EEE  0EFF               	movlw	255
  5549  002EF0  1796               	andwf	___ftadd@f1& (0+255),f,b
  5550  002EF2  0EFF               	movlw	255
  5551  002EF4  1797               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5552  002EF6  0E00               	movlw	0
  5553  002EF8  1798               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5554  002EFA  8F9A               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5555                           
  5556                           ; BSR set to: 0
  5557  002EFC  0EFF               	movlw	255
  5558  002EFE  1799               	andwf	___ftadd@f2& (0+255),f,b
  5559  002F00  0EFF               	movlw	255
  5560  002F02  179A               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5561  002F04  0E00               	movlw	0
  5562  002F06  179B               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5563                           
  5564                           ; BSR set to: 0
  5565  002F08  51A0               	movf	___ftadd@exp2& (0+255),w,b
  5566  002F0A  5DA1               	subwf	___ftadd@exp1& (0+255),w,b
  5567  002F0C  B0D8               	btfsc	status,0,c
  5568  002F0E  D01B               	goto	l5710
  5569  002F10                     u6470:
  5570                           
  5571                           ; BSR set to: 0
  5572  002F10  90D8               	bcf	status,0,c
  5573  002F12  3799               	rlcf	___ftadd@f2& (0+255),f,b
  5574  002F14  379A               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5575  002F16  379B               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5576  002F18  07A0               	decf	___ftadd@exp2& (0+255),f,b
  5577                           
  5578                           ; BSR set to: 0
  5579  002F1A  51A1               	movf	___ftadd@exp1& (0+255),w,b
  5580  002F1C  19A0               	xorwf	___ftadd@exp2& (0+255),w,b
  5581  002F1E  B4D8               	btfsc	status,2,c
  5582  002F20  D00D               	goto	l5708
  5583                           
  5584                           ; BSR set to: 0
  5585  002F22  079F               	decf	___ftadd@sign& (0+255),f,b
  5586  002F24  C09F  F09C         	movff	___ftadd@sign,??___ftadd
  5587  002F28  0E07               	movlw	7
  5588  002F2A  179C               	andwf	??___ftadd& (0+255),f,b
  5589  002F2C  B4D8               	btfsc	status,2,c
  5590  002F2E  D006               	goto	l5708
  5591  002F30  D7EF               	goto	u6470
  5592  002F32                     l5706:
  5593                           
  5594                           ; BSR set to: 0
  5595  002F32  90D8               	bcf	status,0,c
  5596  002F34  3398               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5597  002F36  3397               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5598  002F38  3396               	rrcf	___ftadd@f1& (0+255),f,b
  5599  002F3A  2BA1               	incf	___ftadd@exp1& (0+255),f,b
  5600  002F3C                     l5708:
  5601                           
  5602                           ; BSR set to: 0
  5603  002F3C  51A0               	movf	___ftadd@exp2& (0+255),w,b
  5604  002F3E  19A1               	xorwf	___ftadd@exp1& (0+255),w,b
  5605  002F40  B4D8               	btfsc	status,2,c
  5606  002F42  D01F               	goto	u6540
  5607  002F44  D7F6               	goto	l5706
  5608  002F46                     l5710:
  5609                           
  5610                           ; BSR set to: 0
  5611  002F46  51A1               	movf	___ftadd@exp1& (0+255),w,b
  5612  002F48  5DA0               	subwf	___ftadd@exp2& (0+255),w,b
  5613  002F4A  B0D8               	btfsc	status,0,c
  5614  002F4C  D01A               	goto	u6540
  5615  002F4E                     u6510:
  5616                           
  5617                           ; BSR set to: 0
  5618  002F4E  90D8               	bcf	status,0,c
  5619  002F50  3796               	rlcf	___ftadd@f1& (0+255),f,b
  5620  002F52  3797               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5621  002F54  3798               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5622  002F56  07A1               	decf	___ftadd@exp1& (0+255),f,b
  5623                           
  5624                           ; BSR set to: 0
  5625  002F58  51A1               	movf	___ftadd@exp1& (0+255),w,b
  5626  002F5A  19A0               	xorwf	___ftadd@exp2& (0+255),w,b
  5627  002F5C  B4D8               	btfsc	status,2,c
  5628  002F5E  D00D               	goto	l5720
  5629                           
  5630                           ; BSR set to: 0
  5631  002F60  079F               	decf	___ftadd@sign& (0+255),f,b
  5632  002F62  C09F  F09C         	movff	___ftadd@sign,??___ftadd
  5633  002F66  0E07               	movlw	7
  5634  002F68  179C               	andwf	??___ftadd& (0+255),f,b
  5635  002F6A  B4D8               	btfsc	status,2,c
  5636  002F6C  D006               	goto	l5720
  5637  002F6E  D7EF               	goto	u6510
  5638  002F70                     l5718:
  5639                           
  5640                           ; BSR set to: 0
  5641  002F70  90D8               	bcf	status,0,c
  5642  002F72  339B               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5643  002F74  339A               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5644  002F76  3399               	rrcf	___ftadd@f2& (0+255),f,b
  5645  002F78  2BA0               	incf	___ftadd@exp2& (0+255),f,b
  5646  002F7A                     l5720:
  5647                           
  5648                           ; BSR set to: 0
  5649  002F7A  51A0               	movf	___ftadd@exp2& (0+255),w,b
  5650  002F7C  19A1               	xorwf	___ftadd@exp1& (0+255),w,b
  5651  002F7E  A4D8               	btfss	status,2,c
  5652  002F80  D7F7               	goto	l5718
  5653  002F82                     u6540:
  5654                           
  5655                           ; BSR set to: 0
  5656  002F82  AF9F               	btfss	___ftadd@sign& (0+255),7,b
  5657  002F84  D00C               	goto	l691
  5658                           
  5659                           ; BSR set to: 0
  5660  002F86  0EFF               	movlw	255
  5661  002F88  1B96               	xorwf	___ftadd@f1& (0+255),f,b
  5662  002F8A  0EFF               	movlw	255
  5663  002F8C  1B97               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5664  002F8E  0EFF               	movlw	255
  5665  002F90  1B98               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5666  002F92  0E01               	movlw	1
  5667  002F94  2796               	addwf	___ftadd@f1& (0+255),f,b
  5668  002F96  0E00               	movlw	0
  5669  002F98  2397               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5670  002F9A  0E00               	movlw	0
  5671  002F9C  2398               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5672  002F9E                     l691:
  5673                           
  5674                           ; BSR set to: 0
  5675  002F9E  AD9F               	btfss	___ftadd@sign& (0+255),6,b
  5676  002FA0  D00C               	goto	l5726
  5677                           
  5678                           ; BSR set to: 0
  5679  002FA2  0EFF               	movlw	255
  5680  002FA4  1B99               	xorwf	___ftadd@f2& (0+255),f,b
  5681  002FA6  0EFF               	movlw	255
  5682  002FA8  1B9A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5683  002FAA  0EFF               	movlw	255
  5684  002FAC  1B9B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5685  002FAE  0E01               	movlw	1
  5686  002FB0  2799               	addwf	___ftadd@f2& (0+255),f,b
  5687  002FB2  0E00               	movlw	0
  5688  002FB4  239A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5689  002FB6  0E00               	movlw	0
  5690  002FB8  239B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5691  002FBA                     l5726:
  5692                           
  5693                           ; BSR set to: 0
  5694  002FBA  0E00               	movlw	0
  5695  002FBC  6F9F               	movwf	___ftadd@sign& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698  002FBE  5196               	movf	___ftadd@f1& (0+255),w,b
  5699  002FC0  2799               	addwf	___ftadd@f2& (0+255),f,b
  5700  002FC2  5197               	movf	(___ftadd@f1+1)& (0+255),w,b
  5701  002FC4  239A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5702  002FC6  5198               	movf	(___ftadd@f1+2)& (0+255),w,b
  5703  002FC8  239B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5704                           
  5705                           ; BSR set to: 0
  5706  002FCA  AF9B               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5707  002FCC  D00E               	goto	l5736
  5708                           
  5709                           ; BSR set to: 0
  5710  002FCE  0EFF               	movlw	255
  5711  002FD0  1B99               	xorwf	___ftadd@f2& (0+255),f,b
  5712  002FD2  0EFF               	movlw	255
  5713  002FD4  1B9A               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5714  002FD6  0EFF               	movlw	255
  5715  002FD8  1B9B               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5716  002FDA  0E01               	movlw	1
  5717  002FDC  2799               	addwf	___ftadd@f2& (0+255),f,b
  5718  002FDE  0E00               	movlw	0
  5719  002FE0  239A               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5720  002FE2  0E00               	movlw	0
  5721  002FE4  239B               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5722                           
  5723                           ; BSR set to: 0
  5724  002FE6  0E01               	movlw	1
  5725  002FE8  6F9F               	movwf	___ftadd@sign& (0+255),b
  5726  002FEA                     l5736:
  5727                           
  5728                           ; BSR set to: 0
  5729  002FEA  C099  F06B         	movff	___ftadd@f2,___ftpack@arg
  5730  002FEE  C09A  F06C         	movff	___ftadd@f2+1,___ftpack@arg+1
  5731  002FF2  C09B  F06D         	movff	___ftadd@f2+2,___ftpack@arg+2
  5732  002FF6  C0A1  F06E         	movff	___ftadd@exp1,___ftpack@exp
  5733  002FFA  C09F  F06F         	movff	___ftadd@sign,___ftpack@sign
  5734  002FFE  EC43  F01E         	call	___ftpack	;wreg free
  5735  003002  C06B  F096         	movff	?___ftpack,?___ftadd
  5736  003006  C06C  F097         	movff	?___ftpack+1,?___ftadd+1
  5737  00300A  C06D  F098         	movff	?___ftpack+2,?___ftadd+2
  5738                           
  5739                           ; BSR set to: 0
  5740  00300E  0012               	return		;funcret
  5741  003010                     __end_of___ftadd:
  5742                           	callstack 0
  5743                           
  5744 ;; *************** function ___ftneg *****************
  5745 ;; Defined at:
  5746 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftneg.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  f1              3   11[BANK0 ] float 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  3   11[BANK0 ] float 
  5753 ;; Registers used:
  5754 ;;		wreg, status,2, status,0
  5755 ;; Tracked objects:
  5756 ;;		On entry : 3F/1
  5757 ;;		On exit  : 3F/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5760 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5764 ;;Total ram usage:        3 bytes
  5765 ;; Hardware stack levels used: 1
  5766 ;; Hardware stack levels required when called: 5
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_sprintf
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text16
  5775  0048F8                     __ptext16:
  5776                           	callstack 0
  5777  0048F8                     ___ftneg:
  5778                           	callstack 24
  5779                           
  5780                           ; BSR set to: 1
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;incstack = 0
  5784  0048F8  0100               	movlb	0	; () banked
  5785  0048FA  516B               	movf	___ftneg@f1& (0+255),w,b
  5786  0048FC  116C               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  5787  0048FE  116D               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  5788  004900  B4D8               	btfsc	status,2,c
  5789  004902  D006               	goto	l741
  5790                           
  5791                           ; BSR set to: 0
  5792  004904  0E00               	movlw	0
  5793  004906  1B6B               	xorwf	___ftneg@f1& (0+255),f,b
  5794  004908  0E00               	movlw	0
  5795  00490A  1B6C               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  5796  00490C  0E80               	movlw	128
  5797  00490E  1B6D               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  5798  004910                     l741:
  5799                           
  5800                           ; BSR set to: 0
  5801  004910  C06B  F06B         	movff	___ftneg@f1,?___ftneg
  5802  004914  C06C  F06C         	movff	___ftneg@f1+1,?___ftneg+1
  5803  004918  C06D  F06D         	movff	___ftneg@f1+2,?___ftneg+2
  5804                           
  5805                           ; BSR set to: 0
  5806  00491C  0012               	return		;funcret
  5807  00491E                     __end_of___ftneg:
  5808                           	callstack 0
  5809                           
  5810 ;; *************** function _settings *****************
  5811 ;; Defined at:
  5812 ;;		line 169 in file "BORRAR.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;		None
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;		None
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  1    wreg      void 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0, cstack
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;Total ram usage:        2 bytes
  5831 ;; Hardware stack levels used: 1
  5832 ;; Hardware stack levels required when called: 9
  5833 ;; This function calls:
  5834 ;;		_SettingsLCD
  5835 ;;		_setPWMFreq
  5836 ;;		_writeI2C1
  5837 ;; This function is called by:
  5838 ;;		_main
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text17
  5843  0039FA                     __ptext17:
  5844                           	callstack 0
  5845  0039FA                     _settings:
  5846                           	callstack 21
  5847                           
  5848                           ;BORRAR.c: 170: OSCCON = 0x72;
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;incstack = 0
  5852  0039FA  0E72               	movlw	114
  5853  0039FC  6ED3               	movwf	211,c	;volatile
  5854                           
  5855                           ;BORRAR.c: 171: ANSELD = 0x00;
  5856  0039FE  0E00               	movlw	0
  5857  003A00  010F               	movlb	15	; () banked
  5858  003A02  6F3B               	movwf	59,b	;volatile
  5859                           
  5860                           ;BORRAR.c: 172: ANSELE = 0x00;
  5861  003A04  0E00               	movlw	0
  5862  003A06  6F3C               	movwf	60,b	;volatile
  5863                           
  5864                           ;BORRAR.c: 173: ANSELC = 0x00;
  5865  003A08  0E00               	movlw	0
  5866  003A0A  6F3A               	movwf	58,b	;volatile
  5867                           
  5868                           ;BORRAR.c: 176: TRISD = 0;
  5869  003A0C  0E00               	movlw	0
  5870  003A0E  6E95               	movwf	149,c	;volatile
  5871                           
  5872                           ;BORRAR.c: 177: TRISE = 0;
  5873  003A10  0E00               	movlw	0
  5874  003A12  6E96               	movwf	150,c	;volatile
  5875                           
  5876                           ;BORRAR.c: 178: LATD = 0;
  5877  003A14  0E00               	movlw	0
  5878  003A16  6E8C               	movwf	140,c	;volatile
  5879                           
  5880                           ;BORRAR.c: 179: LATE = 0;
  5881  003A18  0E00               	movlw	0
  5882  003A1A  6E8D               	movwf	141,c	;volatile
  5883                           
  5884                           ;BORRAR.c: 181: ANSELB = 0;
  5885  003A1C  0E00               	movlw	0
  5886  003A1E  6F39               	movwf	57,b	;volatile
  5887                           
  5888                           ;BORRAR.c: 182: TRISB = 1;
  5889  003A20  0E01               	movlw	1
  5890  003A22  6E93               	movwf	147,c	;volatile
  5891                           
  5892                           ; BSR set to: 15
  5893                           ;BORRAR.c: 184: SettingsLCD(0x02);
  5894  003A24  0E02               	movlw	2
  5895  003A26  EC09  F025         	call	_SettingsLCD
  5896                           
  5897                           ;BORRAR.c: 185: SettingsLCD(0x06);
  5898  003A2A  0E06               	movlw	6
  5899  003A2C  EC09  F025         	call	_SettingsLCD
  5900                           
  5901                           ;BORRAR.c: 186: SettingsLCD(0x0F);
  5902  003A30  0E0F               	movlw	15
  5903  003A32  EC09  F025         	call	_SettingsLCD
  5904                           
  5905                           ;BORRAR.c: 187: SettingsLCD(0x28);
  5906  003A36  0E28               	movlw	40
  5907  003A38  EC09  F025         	call	_SettingsLCD
  5908                           
  5909                           ;BORRAR.c: 188: SettingsLCD(0x01);
  5910  003A3C  0E01               	movlw	1
  5911  003A3E  EC09  F025         	call	_SettingsLCD
  5912                           
  5913                           ;BORRAR.c: 191: TRISCbits.TRISC6 = 0;
  5914  003A42  9C94               	bcf	148,6,c	;volatile
  5915                           
  5916                           ;BORRAR.c: 192: TRISCbits.TRISC7 = 1;
  5917  003A44  8E94               	bsf	148,7,c	;volatile
  5918                           
  5919                           ;BORRAR.c: 193: SPBRG1 = 0x19;
  5920  003A46  0E19               	movlw	25
  5921  003A48  6EAF               	movwf	175,c	;volatile
  5922                           
  5923                           ;BORRAR.c: 194: RCSTA1 = 0x90;
  5924  003A4A  0E90               	movlw	144
  5925  003A4C  6EAB               	movwf	171,c	;volatile
  5926                           
  5927                           ;BORRAR.c: 195: TXSTA1 = 0x20;
  5928  003A4E  0E20               	movlw	32
  5929  003A50  6EAC               	movwf	172,c	;volatile
  5930                           
  5931                           ;BORRAR.c: 197: GIE = 1;
  5932  003A52  8EF2               	bsf	4082,7,c	;volatile
  5933                           
  5934                           ;BORRAR.c: 198: PEIE = 1;
  5935  003A54  8CF2               	bsf	4082,6,c	;volatile
  5936                           
  5937                           ;BORRAR.c: 201: RC1IE = 1;
  5938  003A56  8A9D               	bsf	3997,5,c	;volatile
  5939                           
  5940                           ;BORRAR.c: 202: RC1IF = 0;
  5941  003A58  9A9E               	bcf	3998,5,c	;volatile
  5942                           
  5943                           ;BORRAR.c: 205: TRISCbits.RC3 = 1;
  5944  003A5A  8694               	bsf	148,3,c	;volatile
  5945                           
  5946                           ;BORRAR.c: 206: TRISCbits.RC4 = 1;
  5947  003A5C  8894               	bsf	148,4,c	;volatile
  5948                           
  5949                           ;BORRAR.c: 208: SSP1STAT = 0x80;
  5950  003A5E  0E80               	movlw	128
  5951  003A60  6EC7               	movwf	199,c	;volatile
  5952                           
  5953                           ;BORRAR.c: 209: SSP1CON1 = 0x28;
  5954  003A62  0E28               	movlw	40
  5955  003A64  6EC6               	movwf	198,c	;volatile
  5956                           
  5957                           ;BORRAR.c: 210: SSP1CON2 = 0x00;
  5958  003A66  0E00               	movlw	0
  5959  003A68  6EC5               	movwf	197,c	;volatile
  5960                           
  5961                           ;BORRAR.c: 211: SSP1CON3 = 0x00;
  5962  003A6A  0E00               	movlw	0
  5963  003A6C  6ECB               	movwf	203,c	;volatile
  5964                           
  5965                           ;BORRAR.c: 212: SSP1ADD = 0x27;
  5966  003A6E  0E27               	movlw	39
  5967  003A70  6EC8               	movwf	200,c	;volatile
  5968                           
  5969                           ;BORRAR.c: 214: writeI2C1(0x80, 0x00, 0x80);
  5970  003A72  0E00               	movlw	0
  5971  003A74  0100               	movlb	0	; () banked
  5972  003A76  6F6D               	movwf	writeI2C1@Register& (0+255),b
  5973  003A78  0E80               	movlw	128
  5974  003A7A  6F6E               	movwf	writeI2C1@Data& (0+255),b
  5975  003A7C  0E80               	movlw	128
  5976  003A7E  EC1D  F024         	call	_writeI2C1
  5977                           
  5978                           ;BORRAR.c: 215: _delay((unsigned long)((10)*(16000000/4000.0)));
  5979  003A82  0E34               	movlw	52
  5980  003A84  0100               	movlb	0	; () banked
  5981  003A86  6FAB               	movwf	??_settings& (0+255),b
  5982  003A88  0EF1               	movlw	241
  5983  003A8A                     u7747:
  5984  003A8A  2EE8               	decfsz	wreg,f,c
  5985  003A8C  D7FE               	bra	u7747
  5986  003A8E  2FAB               	decfsz	??_settings& (0+255),f,b
  5987  003A90  D7FC               	bra	u7747
  5988  003A92  D000               	nop2	
  5989                           
  5990                           ;BORRAR.c: 217: setPWMFreq(1000);
  5991  003A94  0E00               	movlw	0
  5992  003A96  0100               	movlb	0	; () banked
  5993  003A98  6FA2               	movwf	setPWMFreq@freq& (0+255),b
  5994  003A9A  0E7A               	movlw	122
  5995  003A9C  6FA3               	movwf	(setPWMFreq@freq+1)& (0+255),b
  5996  003A9E  0E44               	movlw	68
  5997  003AA0  6FA4               	movwf	(setPWMFreq@freq+2)& (0+255),b
  5998  003AA2  ECDC  F018         	call	_setPWMFreq	;wreg free
  5999                           
  6000                           ;BORRAR.c: 219: setPWMFreq(50);
  6001  003AA6  0E00               	movlw	0
  6002  003AA8  0100               	movlb	0	; () banked
  6003  003AAA  6FA2               	movwf	setPWMFreq@freq& (0+255),b
  6004  003AAC  0E48               	movlw	72
  6005  003AAE  6FA3               	movwf	(setPWMFreq@freq+1)& (0+255),b
  6006  003AB0  0E42               	movlw	66
  6007  003AB2  6FA4               	movwf	(setPWMFreq@freq+2)& (0+255),b
  6008  003AB4  ECDC  F018         	call	_setPWMFreq	;wreg free
  6009                           
  6010                           ;BORRAR.c: 220: _delay((unsigned long)((300)*(16000000/4000.0)));
  6011  003AB8  0E07               	movlw	7
  6012  003ABA  0100               	movlb	0	; () banked
  6013  003ABC  6FAC               	movwf	(??_settings+1)& (0+255),b
  6014  003ABE  0E17               	movlw	23
  6015  003AC0  6FAB               	movwf	??_settings& (0+255),b
  6016  003AC2  0E6A               	movlw	106
  6017  003AC4                     u7757:
  6018  003AC4  2EE8               	decfsz	wreg,f,c
  6019  003AC6  D7FE               	bra	u7757
  6020  003AC8  2FAB               	decfsz	??_settings& (0+255),f,b
  6021  003ACA  D7FC               	bra	u7757
  6022  003ACC  2FAC               	decfsz	(??_settings+1)& (0+255),f,b
  6023  003ACE  D7FA               	bra	u7757
  6024  003AD0  F000               	nop	
  6025                           
  6026                           ;BORRAR.c: 223: LATD6 = 1;
  6027  003AD2  8C8C               	bsf	3980,6,c	;volatile
  6028                           
  6029                           ;BORRAR.c: 224: LATD7 = 1;
  6030  003AD4  8E8C               	bsf	3980,7,c	;volatile
  6031                           
  6032                           ;BORRAR.c: 226: INT1IE = 1;
  6033  003AD6  86F0               	bsf	4080,3,c	;volatile
  6034                           
  6035                           ;BORRAR.c: 227: INT1IF = 0;
  6036  003AD8  90F0               	bcf	4080,0,c	;volatile
  6037                           
  6038                           ;BORRAR.c: 229: INTEDG1 = 0;
  6039  003ADA  9AF1               	bcf	4081,5,c	;volatile
  6040  003ADC  0012               	return		;funcret
  6041  003ADE                     __end_of_settings:
  6042                           	callstack 0
  6043                           
  6044 ;; *************** function _setPWMFreq *****************
  6045 ;; Defined at:
  6046 ;;		line 431 in file "BORRAR.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  freq            3   66[BANK0 ] float 
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  prescaleval     4   71[BANK0 ] unsigned long 
  6051 ;;  newmode         1    0        unsigned char 
  6052 ;;  prescale        1   70[BANK0 ] unsigned char 
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  1    wreg      void 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0, cstack
  6057 ;; Tracked objects:
  6058 ;;		On entry : 3F/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6062 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;Total ram usage:        9 bytes
  6067 ;; Hardware stack levels used: 1
  6068 ;; Hardware stack levels required when called: 8
  6069 ;; This function calls:
  6070 ;;		___ftdiv
  6071 ;;		___ftge
  6072 ;;		___fttol
  6073 ;;		___lltoft
  6074 ;;		_readI2C1
  6075 ;;		_writeI2C1
  6076 ;; This function is called by:
  6077 ;;		_settings
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           	psect	text18
  6082  0031B8                     __ptext18:
  6083                           	callstack 0
  6084  0031B8                     _setPWMFreq:
  6085                           	callstack 21
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;BORRAR.c: 433: if (freq < 1) freq = 1;
  6089                           
  6090                           ;incstack = 0
  6091  0031B8  C0A2  F06B         	movff	setPWMFreq@freq,___ftge@ff1
  6092  0031BC  C0A3  F06C         	movff	setPWMFreq@freq+1,___ftge@ff1+1
  6093  0031C0  C0A4  F06D         	movff	setPWMFreq@freq+2,___ftge@ff1+2
  6094  0031C4  0E00               	movlw	0
  6095  0031C6  6F6E               	movwf	___ftge@ff2& (0+255),b
  6096  0031C8  0E80               	movlw	128
  6097  0031CA  6F6F               	movwf	(___ftge@ff2+1)& (0+255),b
  6098  0031CC  0E3F               	movlw	63
  6099  0031CE  6F70               	movwf	(___ftge@ff2+2)& (0+255),b
  6100  0031D0  ECE0  F020         	call	___ftge	;wreg free
  6101  0031D4  B0D8               	btfsc	status,0,c
  6102  0031D6  D006               	goto	l6034
  6103                           
  6104                           ; BSR set to: 0
  6105  0031D8  0E00               	movlw	0
  6106  0031DA  6FA2               	movwf	setPWMFreq@freq& (0+255),b
  6107  0031DC  0E80               	movlw	128
  6108  0031DE  6FA3               	movwf	(setPWMFreq@freq+1)& (0+255),b
  6109  0031E0  0E3F               	movlw	63
  6110  0031E2  6FA4               	movwf	(setPWMFreq@freq+2)& (0+255),b
  6111  0031E4                     l6034:
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;BORRAR.c: 434: if (freq > 3500) freq = 3500;
  6115  0031E4  0EC0               	movlw	192
  6116  0031E6  6F6B               	movwf	___ftge@ff1& (0+255),b
  6117  0031E8  0E5A               	movlw	90
  6118  0031EA  6F6C               	movwf	(___ftge@ff1+1)& (0+255),b
  6119  0031EC  0E45               	movlw	69
  6120  0031EE  6F6D               	movwf	(___ftge@ff1+2)& (0+255),b
  6121  0031F0  C0A2  F06E         	movff	setPWMFreq@freq,___ftge@ff2
  6122  0031F4  C0A3  F06F         	movff	setPWMFreq@freq+1,___ftge@ff2+1
  6123  0031F8  C0A4  F070         	movff	setPWMFreq@freq+2,___ftge@ff2+2
  6124  0031FC  ECE0  F020         	call	___ftge	;wreg free
  6125  003200  B0D8               	btfsc	status,0,c
  6126  003202  D006               	goto	l222
  6127                           
  6128                           ; BSR set to: 0
  6129  003204  0EC0               	movlw	192
  6130  003206  6FA2               	movwf	setPWMFreq@freq& (0+255),b
  6131  003208  0E5A               	movlw	90
  6132  00320A  6FA3               	movwf	(setPWMFreq@freq+1)& (0+255),b
  6133  00320C  0E45               	movlw	69
  6134  00320E  6FA4               	movwf	(setPWMFreq@freq+2)& (0+255),b
  6135  003210                     l222:
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;BORRAR.c: 439: unsigned long prescaleval = 26075000;
  6139  003210  0E78               	movlw	120
  6140  003212  6FA7               	movwf	setPWMFreq@prescaleval& (0+255),b
  6141  003214  0EDF               	movlw	223
  6142  003216  6FA8               	movwf	(setPWMFreq@prescaleval+1)& (0+255),b
  6143  003218  0E8D               	movlw	141
  6144  00321A  6FA9               	movwf	(setPWMFreq@prescaleval+2)& (0+255),b
  6145  00321C  0E01               	movlw	1
  6146  00321E  6FAA               	movwf	(setPWMFreq@prescaleval+3)& (0+255),b
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;BORRAR.c: 440: prescaleval /= freq;
  6150  003220  C0A2  F07F         	movff	setPWMFreq@freq,___ftdiv@f2
  6151  003224  C0A3  F080         	movff	setPWMFreq@freq+1,___ftdiv@f2+1
  6152  003228  C0A4  F081         	movff	setPWMFreq@freq+2,___ftdiv@f2+2
  6153  00322C  C0A7  F073         	movff	setPWMFreq@prescaleval,___lltoft@c
  6154  003230  C0A8  F074         	movff	setPWMFreq@prescaleval+1,___lltoft@c+1
  6155  003234  C0A9  F075         	movff	setPWMFreq@prescaleval+2,___lltoft@c+2
  6156  003238  C0AA  F076         	movff	setPWMFreq@prescaleval+3,___lltoft@c+3
  6157  00323C  EC2A  F022         	call	___lltoft	;wreg free
  6158  003240  C073  F07C         	movff	?___lltoft,___ftdiv@f1
  6159  003244  C074  F07D         	movff	?___lltoft+1,___ftdiv@f1+1
  6160  003248  C075  F07E         	movff	?___lltoft+2,___ftdiv@f1+2
  6161  00324C  EC8A  F01C         	call	___ftdiv	;wreg free
  6162  003250  C07C  F093         	movff	?___ftdiv,___fttol@f1
  6163  003254  C07D  F094         	movff	?___ftdiv+1,___fttol@f1+1
  6164  003258  C07E  F095         	movff	?___ftdiv+2,___fttol@f1+2
  6165  00325C  EC6F  F01D         	call	___fttol	;wreg free
  6166  003260  C093  F0A7         	movff	?___fttol,setPWMFreq@prescaleval
  6167  003264  C094  F0A8         	movff	?___fttol+1,setPWMFreq@prescaleval+1
  6168  003268  C095  F0A9         	movff	?___fttol+2,setPWMFreq@prescaleval+2
  6169  00326C  C096  F0AA         	movff	?___fttol+3,setPWMFreq@prescaleval+3
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;BORRAR.c: 442: prescaleval += 2048;
  6173  003270  0E00               	movlw	0
  6174  003272  27A7               	addwf	setPWMFreq@prescaleval& (0+255),f,b
  6175  003274  0E08               	movlw	8
  6176  003276  23A8               	addwfc	(setPWMFreq@prescaleval+1)& (0+255),f,b
  6177  003278  0E00               	movlw	0
  6178  00327A  23A9               	addwfc	(setPWMFreq@prescaleval+2)& (0+255),f,b
  6179  00327C  0E00               	movlw	0
  6180  00327E  23AA               	addwfc	(setPWMFreq@prescaleval+3)& (0+255),f,b
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;BORRAR.c: 443: prescaleval /= 4096;
  6184  003280  0E0C               	movlw	12
  6185  003282  6FA5               	movwf	??_setPWMFreq& (0+255),b
  6186  003284                     u6995:
  6187  003284  90D8               	bcf	status,0,c
  6188  003286  33AA               	rrcf	(setPWMFreq@prescaleval+3)& (0+255),f,b
  6189  003288  33A9               	rrcf	(setPWMFreq@prescaleval+2)& (0+255),f,b
  6190  00328A  33A8               	rrcf	(setPWMFreq@prescaleval+1)& (0+255),f,b
  6191  00328C  33A7               	rrcf	setPWMFreq@prescaleval& (0+255),f,b
  6192  00328E  2FA5               	decfsz	??_setPWMFreq& (0+255),f,b
  6193  003290  D7F9               	goto	u6995
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;BORRAR.c: 444: prescaleval -= 1;
  6197  003292  07A7               	decf	setPWMFreq@prescaleval& (0+255),f,b
  6198  003294  0E00               	movlw	0
  6199  003296  5BA8               	subwfb	(setPWMFreq@prescaleval+1)& (0+255),f,b
  6200  003298  5BA9               	subwfb	(setPWMFreq@prescaleval+2)& (0+255),f,b
  6201  00329A  5BAA               	subwfb	(setPWMFreq@prescaleval+3)& (0+255),f,b
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;BORRAR.c: 445: if (prescaleval < 3) prescaleval = 3;
  6205  00329C  51AA               	movf	(setPWMFreq@prescaleval+3)& (0+255),w,b
  6206  00329E  11A9               	iorwf	(setPWMFreq@prescaleval+2)& (0+255),w,b
  6207  0032A0  11A8               	iorwf	(setPWMFreq@prescaleval+1)& (0+255),w,b
  6208  0032A2  E10C               	bnz	l6050
  6209  0032A4  0E03               	movlw	3
  6210  0032A6  5DA7               	subwf	setPWMFreq@prescaleval& (0+255),w,b
  6211  0032A8  B0D8               	btfsc	status,0,c
  6212  0032AA  D008               	goto	l6050
  6213                           
  6214                           ; BSR set to: 0
  6215  0032AC  0E03               	movlw	3
  6216  0032AE  6FA7               	movwf	setPWMFreq@prescaleval& (0+255),b
  6217  0032B0  0E00               	movlw	0
  6218  0032B2  6FA8               	movwf	(setPWMFreq@prescaleval+1)& (0+255),b
  6219  0032B4  0E00               	movlw	0
  6220  0032B6  6FA9               	movwf	(setPWMFreq@prescaleval+2)& (0+255),b
  6221  0032B8  0E00               	movlw	0
  6222  0032BA  6FAA               	movwf	(setPWMFreq@prescaleval+3)& (0+255),b
  6223  0032BC                     l6050:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;BORRAR.c: 446: if (prescaleval > 255) prescaleval = 255;
  6227  0032BC  51AA               	movf	(setPWMFreq@prescaleval+3)& (0+255),w,b
  6228  0032BE  11A9               	iorwf	(setPWMFreq@prescaleval+2)& (0+255),w,b
  6229  0032C0  E103               	bnz	u7010
  6230  0032C2  05A8               	decf	(setPWMFreq@prescaleval+1)& (0+255),w,b
  6231  0032C4  A0D8               	btfss	status,0,c
  6232  0032C6  D008               	goto	l6054
  6233  0032C8                     u7010:
  6234                           
  6235                           ; BSR set to: 0
  6236  0032C8  0EFF               	movlw	255
  6237  0032CA  6FA7               	movwf	setPWMFreq@prescaleval& (0+255),b
  6238  0032CC  0E00               	movlw	0
  6239  0032CE  6FA8               	movwf	(setPWMFreq@prescaleval+1)& (0+255),b
  6240  0032D0  0E00               	movlw	0
  6241  0032D2  6FA9               	movwf	(setPWMFreq@prescaleval+2)& (0+255),b
  6242  0032D4  0E00               	movlw	0
  6243  0032D6  6FAA               	movwf	(setPWMFreq@prescaleval+3)& (0+255),b
  6244  0032D8                     l6054:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;BORRAR.c: 447: unsigned char prescale = (unsigned char) prescaleval;
  6248  0032D8  C0A7  F0A6         	movff	setPWMFreq@prescaleval,setPWMFreq@prescale
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;BORRAR.c: 448: readI2C1(0x80, 0x00, data1, 1);
  6252  0032DC  0E00               	movlw	0
  6253  0032DE  6F6F               	movwf	readI2C1@Register& (0+255),b
  6254  0032E0  0E00               	movlw	0
  6255  0032E2  6F70               	movwf	readI2C1@Data& (0+255),b
  6256  0032E4  0E00               	movlw	0
  6257  0032E6  6F72               	movwf	(readI2C1@bytes+1)& (0+255),b
  6258  0032E8  0E01               	movlw	1
  6259  0032EA  6F71               	movwf	readI2C1@bytes& (0+255),b
  6260  0032EC  0E80               	movlw	128
  6261  0032EE  EC5E  F020         	call	_readI2C1
  6262                           
  6263                           ;BORRAR.c: 451: writeI2C1(0x80, 0x00, newmode);
  6264  0032F2  0E00               	movlw	0
  6265  0032F4  0100               	movlb	0	; () banked
  6266  0032F6  6F6D               	movwf	writeI2C1@Register& (0+255),b
  6267  0032F8  0E10               	movlw	16
  6268  0032FA  6F6E               	movwf	writeI2C1@Data& (0+255),b
  6269  0032FC  0E80               	movlw	128
  6270  0032FE  EC1D  F024         	call	_writeI2C1
  6271                           
  6272                           ;BORRAR.c: 452: writeI2C1(0x80, 0xFE, prescale);
  6273  003302  0EFE               	movlw	254
  6274  003304  0100               	movlb	0	; () banked
  6275  003306  6F6D               	movwf	writeI2C1@Register& (0+255),b
  6276  003308  C0A6  F06E         	movff	setPWMFreq@prescale,writeI2C1@Data
  6277  00330C  0E80               	movlw	128
  6278  00330E  EC1D  F024         	call	_writeI2C1
  6279                           
  6280                           ;BORRAR.c: 453: writeI2C1(0x80, 0x00, data1);
  6281  003312  0E00               	movlw	0
  6282  003314  0100               	movlb	0	; () banked
  6283  003316  6F6D               	movwf	writeI2C1@Register& (0+255),b
  6284  003318  0E00               	movlw	0
  6285  00331A  6F6E               	movwf	writeI2C1@Data& (0+255),b
  6286  00331C  0E80               	movlw	128
  6287  00331E  EC1D  F024         	call	_writeI2C1
  6288                           
  6289                           ;BORRAR.c: 454: _delay((unsigned long)((5)*(16000000/4000.0)));
  6290  003322  0E1A               	movlw	26
  6291  003324  0100               	movlb	0	; () banked
  6292  003326  6FA5               	movwf	??_setPWMFreq& (0+255),b
  6293  003328  0EF8               	movlw	248
  6294  00332A                     u7767:
  6295  00332A  2EE8               	decfsz	wreg,f,c
  6296  00332C  D7FE               	bra	u7767
  6297  00332E  2FA5               	decfsz	??_setPWMFreq& (0+255),f,b
  6298  003330  D7FC               	bra	u7767
  6299  003332  F000               	nop	
  6300                           
  6301                           ;BORRAR.c: 456: writeI2C1(0x80, 0x00, (data1 | 0x80 | 0x20));
  6302  003334  0E00               	movlw	0
  6303  003336  0100               	movlb	0	; () banked
  6304  003338  6F6D               	movwf	writeI2C1@Register& (0+255),b
  6305  00333A  0EA0               	movlw	160
  6306  00333C  6F6E               	movwf	writeI2C1@Data& (0+255),b
  6307  00333E  0E80               	movlw	128
  6308  003340  EC1D  F024         	call	_writeI2C1
  6309  003344  0012               	return		;funcret
  6310  003346                     __end_of_setPWMFreq:
  6311                           	callstack 0
  6312                           
  6313 ;; *************** function _writeI2C1 *****************
  6314 ;; Defined at:
  6315 ;;		line 480 in file "BORRAR.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  Address         1    wreg     unsigned char 
  6318 ;;  Register        1   13[BANK0 ] unsigned char 
  6319 ;;  Data            1   14[BANK0 ] unsigned char 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  Address         1   17[BANK0 ] unsigned char 
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  1    wreg      void 
  6324 ;; Registers used:
  6325 ;;		wreg, status,2, status,0, cstack
  6326 ;; Tracked objects:
  6327 ;;		On entry : 3F/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;Total ram usage:        5 bytes
  6336 ;; Hardware stack levels used: 1
  6337 ;; Hardware stack levels required when called: 7
  6338 ;; This function calls:
  6339 ;;		_sendI2C
  6340 ;;		_startI2C
  6341 ;;		_stopI2C
  6342 ;; This function is called by:
  6343 ;;		_settings
  6344 ;;		_setPWMFreq
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text19
  6349  00483A                     __ptext19:
  6350                           	callstack 0
  6351  00483A                     _writeI2C1:
  6352                           	callstack 22
  6353                           
  6354                           ;incstack = 0
  6355                           ;writeI2C1@Address stored from wreg
  6356  00483A  6F71               	movwf	writeI2C1@Address& (0+255),b
  6357                           
  6358                           ;BORRAR.c: 481: startI2C();
  6359  00483C  EC5D  F025         	call	_startI2C	;wreg free
  6360                           
  6361                           ;BORRAR.c: 482: sendI2C(Address);
  6362  004840  5171               	movf	writeI2C1@Address& (0+255),w,b
  6363  004842  EC4D  F025         	call	_sendI2C
  6364                           
  6365                           ;BORRAR.c: 483: sendI2C(Register);
  6366  004846  516D               	movf	writeI2C1@Register& (0+255),w,b
  6367  004848  EC4D  F025         	call	_sendI2C
  6368                           
  6369                           ;BORRAR.c: 484: sendI2C(Data);
  6370  00484C  516E               	movf	writeI2C1@Data& (0+255),w,b
  6371  00484E  EC4D  F025         	call	_sendI2C
  6372                           
  6373                           ;BORRAR.c: 485: stopI2C();
  6374  004852  EC59  F025         	call	_stopI2C	;wreg free
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;BORRAR.c: 486: _delay((unsigned long)((100)*(16000000/4000.0)));
  6378  004856  0E03               	movlw	3
  6379  004858  0100               	movlb	0	; () banked
  6380  00485A  6F70               	movwf	(??_writeI2C1+1)& (0+255),b
  6381  00485C  0E08               	movlw	8
  6382  00485E  6F6F               	movwf	??_writeI2C1& (0+255),b
  6383  004860  0E77               	movlw	119
  6384  004862                     u7777:
  6385  004862  2EE8               	decfsz	wreg,f,c
  6386  004864  D7FE               	bra	u7777
  6387  004866  2F6F               	decfsz	??_writeI2C1& (0+255),f,b
  6388  004868  D7FC               	bra	u7777
  6389  00486A  2F70               	decfsz	(??_writeI2C1+1)& (0+255),f,b
  6390  00486C  D7FA               	bra	u7777
  6391  00486E  0012               	return		;funcret
  6392  004870                     __end_of_writeI2C1:
  6393                           	callstack 0
  6394                           
  6395 ;; *************** function _readI2C1 *****************
  6396 ;; Defined at:
  6397 ;;		line 459 in file "BORRAR.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  Address         1    wreg     unsigned char 
  6400 ;;  Register        1   15[BANK0 ] unsigned char 
  6401 ;;  Data            1   16[BANK0 ] unsigned char 
  6402 ;;  bytes           2   17[BANK0 ] int 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  Address         1   21[BANK0 ] unsigned char 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  1    wreg      void 
  6407 ;; Registers used:
  6408 ;;		wreg, status,2, status,0, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 3F/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6414 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;Total ram usage:        7 bytes
  6419 ;; Hardware stack levels used: 1
  6420 ;; Hardware stack levels required when called: 7
  6421 ;; This function calls:
  6422 ;;		_receiveI2C
  6423 ;;		_repeatedStart
  6424 ;;		_sendI2C
  6425 ;;		_startI2C
  6426 ;;		_stopI2C
  6427 ;; This function is called by:
  6428 ;;		_setPWMFreq
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text20
  6433  0040BC                     __ptext20:
  6434                           	callstack 0
  6435  0040BC                     _readI2C1:
  6436                           	callstack 21
  6437                           
  6438                           ;incstack = 0
  6439                           ;readI2C1@Address stored from wreg
  6440  0040BC  6F75               	movwf	readI2C1@Address& (0+255),b
  6441                           
  6442                           ;BORRAR.c: 460: startI2C();
  6443  0040BE  EC5D  F025         	call	_startI2C	;wreg free
  6444                           
  6445                           ;BORRAR.c: 461: sendI2C(Address);
  6446  0040C2  5175               	movf	readI2C1@Address& (0+255),w,b
  6447  0040C4  EC4D  F025         	call	_sendI2C
  6448                           
  6449                           ;BORRAR.c: 462: sendI2C(Register);
  6450  0040C8  516F               	movf	readI2C1@Register& (0+255),w,b
  6451  0040CA  EC4D  F025         	call	_sendI2C
  6452                           
  6453                           ;BORRAR.c: 463: repeatedStart();
  6454  0040CE  EC61  F025         	call	_repeatedStart	;wreg free
  6455                           
  6456                           ;BORRAR.c: 464: sendI2C(Address | 0x01);
  6457  0040D2  5175               	movf	readI2C1@Address& (0+255),w,b
  6458  0040D4  0901               	iorlw	1
  6459  0040D6  EC4D  F025         	call	_sendI2C
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;BORRAR.c: 466: for (i = 0; i < bytes; i++) {
  6463  0040DA  0E00               	movlw	0
  6464  0040DC  6FC9               	movwf	(_i+1)& (0+255),b
  6465  0040DE  0E00               	movlw	0
  6466  0040E0  6FC8               	movwf	_i& (0+255),b
  6467  0040E2  D018               	goto	l3556
  6468  0040E4                     l3546:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;BORRAR.c: 467: if (i + 1 == bytes) {
  6472  0040E4  0E01               	movlw	1
  6473  0040E6  25C8               	addwf	_i& (0+255),w,b
  6474  0040E8  6F73               	movwf	??_readI2C1& (0+255),b
  6475  0040EA  0E00               	movlw	0
  6476  0040EC  21C9               	addwfc	(_i+1)& (0+255),w,b
  6477  0040EE  6F74               	movwf	(??_readI2C1+1)& (0+255),b
  6478  0040F0  5171               	movf	readI2C1@bytes& (0+255),w,b
  6479  0040F2  1973               	xorwf	??_readI2C1& (0+255),w,b
  6480  0040F4  E108               	bnz	l3550
  6481  0040F6  5172               	movf	(readI2C1@bytes+1)& (0+255),w,b
  6482  0040F8  1974               	xorwf	(??_readI2C1+1)& (0+255),w,b
  6483  0040FA  A4D8               	btfss	status,2,c
  6484  0040FC  D004               	goto	l3550
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;BORRAR.c: 468: Data = receiveI2C(1);
  6488  0040FE  0E01               	movlw	1
  6489  004100  ECC6  F023         	call	_receiveI2C
  6490  004104  D003               	goto	L3
  6491  004106                     l3550:
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;BORRAR.c: 470: Data = receiveI2C(0);
  6495  004106  0E00               	movlw	0
  6496  004108  ECC6  F023         	call	_receiveI2C
  6497  00410C                     L3:
  6498  00410C  6F70               	movwf	readI2C1@Data& (0+255),b
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;BORRAR.c: 471: };BORRAR.c: 473: Data++;
  6502  00410E  2B70               	incf	readI2C1@Data& (0+255),f,b
  6503                           
  6504                           ; BSR set to: 0
  6505  004110  4BC8               	infsnz	_i& (0+255),f,b
  6506  004112  2BC9               	incf	(_i+1)& (0+255),f,b
  6507  004114                     l3556:
  6508                           
  6509                           ; BSR set to: 0
  6510  004114  5171               	movf	readI2C1@bytes& (0+255),w,b
  6511  004116  5DC8               	subwf	_i& (0+255),w,b
  6512  004118  5172               	movf	(readI2C1@bytes+1)& (0+255),w,b
  6513  00411A  59C9               	subwfb	(_i+1)& (0+255),w,b
  6514  00411C  A0D8               	btfss	status,0,c
  6515  00411E  D7E2               	goto	l3546
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;BORRAR.c: 474: };BORRAR.c: 476: stopI2C();
  6519  004120  EC59  F025         	call	_stopI2C	;wreg free
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;BORRAR.c: 477: _delay((unsigned long)((100)*(16000000/4000.0)));
  6523  004124  0E03               	movlw	3
  6524  004126  0100               	movlb	0	; () banked
  6525  004128  6F74               	movwf	(??_readI2C1+1)& (0+255),b
  6526  00412A  0E08               	movlw	8
  6527  00412C  6F73               	movwf	??_readI2C1& (0+255),b
  6528  00412E  0E77               	movlw	119
  6529  004130                     u7787:
  6530  004130  2EE8               	decfsz	wreg,f,c
  6531  004132  D7FE               	bra	u7787
  6532  004134  2F73               	decfsz	??_readI2C1& (0+255),f,b
  6533  004136  D7FC               	bra	u7787
  6534  004138  2F74               	decfsz	(??_readI2C1+1)& (0+255),f,b
  6535  00413A  D7FA               	bra	u7787
  6536  00413C  0012               	return		;funcret
  6537  00413E                     __end_of_readI2C1:
  6538                           	callstack 0
  6539                           
  6540 ;; *************** function _stopI2C *****************
  6541 ;; Defined at:
  6542 ;;		line 387 in file "BORRAR.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;		None
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;		None
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      void 
  6549 ;; Registers used:
  6550 ;;		wreg, status,2, status,0, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 3F/0
  6553 ;;		On exit  : 3F/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;Total ram usage:        0 bytes
  6561 ;; Hardware stack levels used: 1
  6562 ;; Hardware stack levels required when called: 6
  6563 ;; This function calls:
  6564 ;;		_readyI2C
  6565 ;; This function is called by:
  6566 ;;		_writeI2C
  6567 ;;		_readI2C1
  6568 ;;		_writeI2C1
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text21
  6573  004AB2                     __ptext21:
  6574                           	callstack 0
  6575  004AB2                     _stopI2C:
  6576                           	callstack 23
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;BORRAR.c: 388: readyI2C();
  6580                           
  6581                           ;incstack = 0
  6582  004AB2  EC3A  F025         	call	_readyI2C	;wreg free
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;BORRAR.c: 389: SSP1CON2bits.PEN = 1;
  6586  004AB6  84C5               	bsf	197,2,c	;volatile
  6587                           
  6588                           ; BSR set to: 0
  6589  004AB8  0012               	return		;funcret
  6590  004ABA                     __end_of_stopI2C:
  6591                           	callstack 0
  6592                           
  6593 ;; *************** function _startI2C *****************
  6594 ;; Defined at:
  6595 ;;		line 373 in file "BORRAR.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;		None
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg, status,2, status,0, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 3F/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;Total ram usage:        0 bytes
  6614 ;; Hardware stack levels used: 1
  6615 ;; Hardware stack levels required when called: 6
  6616 ;; This function calls:
  6617 ;;		_readyI2C
  6618 ;; This function is called by:
  6619 ;;		_writeI2C
  6620 ;;		_readI2C1
  6621 ;;		_writeI2C1
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           	psect	text22
  6626  004ABA                     __ptext22:
  6627                           	callstack 0
  6628  004ABA                     _startI2C:
  6629                           	callstack 23
  6630                           
  6631                           ;BORRAR.c: 374: readyI2C();
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;incstack = 0
  6635  004ABA  EC3A  F025         	call	_readyI2C	;wreg free
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;BORRAR.c: 375: SSP1CON2bits.SEN = 1;
  6639  004ABE  80C5               	bsf	197,0,c	;volatile
  6640                           
  6641                           ; BSR set to: 0
  6642  004AC0  0012               	return		;funcret
  6643  004AC2                     __end_of_startI2C:
  6644                           	callstack 0
  6645                           
  6646 ;; *************** function _sendI2C *****************
  6647 ;; Defined at:
  6648 ;;		line 382 in file "BORRAR.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;  data            1    wreg     unsigned char 
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;  data            1   12[BANK0 ] unsigned char 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		wreg, status,2, status,0, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 3F/0
  6659 ;;		On exit  : 3F/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;Total ram usage:        1 bytes
  6667 ;; Hardware stack levels used: 1
  6668 ;; Hardware stack levels required when called: 6
  6669 ;; This function calls:
  6670 ;;		_readyI2C
  6671 ;; This function is called by:
  6672 ;;		_writeI2C
  6673 ;;		_readI2C1
  6674 ;;		_writeI2C1
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text23
  6679  004A9A                     __ptext23:
  6680                           	callstack 0
  6681  004A9A                     _sendI2C:
  6682                           	callstack 23
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;incstack = 0
  6686                           ;sendI2C@data stored from wreg
  6687  004A9A  6F6C               	movwf	sendI2C@data& (0+255),b
  6688                           
  6689                           ;BORRAR.c: 383: readyI2C();
  6690  004A9C  EC3A  F025         	call	_readyI2C	;wreg free
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;BORRAR.c: 384: SSP1BUF = data;
  6694  004AA0  C06C  FFC9         	movff	sendI2C@data,4041	;volatile
  6695                           
  6696                           ; BSR set to: 0
  6697  004AA4  0012               	return		;funcret
  6698  004AA6                     __end_of_sendI2C:
  6699                           	callstack 0
  6700                           
  6701 ;; *************** function _repeatedStart *****************
  6702 ;; Defined at:
  6703 ;;		line 414 in file "BORRAR.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;		None
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;		None
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, status,2, status,0, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 3F/0
  6714 ;;		On exit  : 3F/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;Total ram usage:        0 bytes
  6722 ;; Hardware stack levels used: 1
  6723 ;; Hardware stack levels required when called: 6
  6724 ;; This function calls:
  6725 ;;		_readyI2C
  6726 ;; This function is called by:
  6727 ;;		_readI2C1
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text24
  6732  004AC2                     __ptext24:
  6733                           	callstack 0
  6734  004AC2                     _repeatedStart:
  6735                           	callstack 21
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;BORRAR.c: 415: readyI2C();
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;incstack = 0
  6742  004AC2  EC3A  F025         	call	_readyI2C	;wreg free
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;BORRAR.c: 416: SSP1CON2bits.RSEN = 1;
  6746  004AC6  82C5               	bsf	197,1,c	;volatile
  6747                           
  6748                           ; BSR set to: 0
  6749  004AC8  0012               	return		;funcret
  6750  004ACA                     __end_of_repeatedStart:
  6751                           	callstack 0
  6752                           
  6753 ;; *************** function _receiveI2C *****************
  6754 ;; Defined at:
  6755 ;;		line 419 in file "BORRAR.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;  flag            1    wreg     unsigned char 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  flag            1   13[BANK0 ] unsigned char 
  6760 ;;  buffer          1   14[BANK0 ] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 3F/0
  6767 ;;		On exit  : 3F/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        3 bytes
  6775 ;; Hardware stack levels used: 1
  6776 ;; Hardware stack levels required when called: 6
  6777 ;; This function calls:
  6778 ;;		_readyI2C
  6779 ;; This function is called by:
  6780 ;;		_readI2C1
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text25
  6785  00478C                     __ptext25:
  6786                           	callstack 0
  6787  00478C                     _receiveI2C:
  6788                           	callstack 21
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;incstack = 0
  6792                           ;receiveI2C@flag stored from wreg
  6793  00478C  6F6D               	movwf	receiveI2C@flag& (0+255),b
  6794                           
  6795                           ;BORRAR.c: 420: unsigned char buffer;;BORRAR.c: 421: readyI2C();
  6796  00478E  EC3A  F025         	call	_readyI2C	;wreg free
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;BORRAR.c: 422: SSP1CON2bits.RCEN = 1;
  6800  004792  86C5               	bsf	197,3,c	;volatile
  6801                           
  6802                           ;BORRAR.c: 423: readyI2C();
  6803  004794  EC3A  F025         	call	_readyI2C	;wreg free
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;BORRAR.c: 424: buffer = SSP1BUF;
  6807  004798  CFC9 F06E          	movff	4041,receiveI2C@buffer	;volatile
  6808                           
  6809                           ;BORRAR.c: 425: readyI2C();
  6810  00479C  EC3A  F025         	call	_readyI2C	;wreg free
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;BORRAR.c: 426: SSP1CON2bits.ACKDT = flag == 1 ? 1 : 0;
  6814  0047A0  056D               	decf	receiveI2C@flag& (0+255),w,b
  6815  0047A2  A4D8               	btfss	status,2,c
  6816  0047A4  D003               	goto	u3170
  6817  0047A6  6B6C               	clrf	??_receiveI2C& (0+255),b
  6818  0047A8  2B6C               	incf	??_receiveI2C& (0+255),f,b
  6819  0047AA  D002               	goto	u3188
  6820  0047AC                     u3170:
  6821  0047AC  0100               	movlb	0	; () banked
  6822  0047AE  6B6C               	clrf	??_receiveI2C& (0+255),b
  6823  0047B0                     u3188:
  6824  0047B0  3B6C               	swapf	??_receiveI2C& (0+255),f,b
  6825  0047B2  476C               	rlncf	??_receiveI2C& (0+255),f,b
  6826  0047B4  50C5               	movf	197,w,c	;volatile
  6827  0047B6  196C               	xorwf	??_receiveI2C& (0+255),w,b
  6828  0047B8  0BDF               	andlw	-33
  6829  0047BA  196C               	xorwf	??_receiveI2C& (0+255),w,b
  6830  0047BC  6EC5               	movwf	197,c	;volatile
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;BORRAR.c: 427: SSP1CON2bits.ACKEN = 1;
  6834  0047BE  88C5               	bsf	197,4,c	;volatile
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;BORRAR.c: 428: readyI2C();
  6838  0047C0  EC3A  F025         	call	_readyI2C	;wreg free
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;BORRAR.c: 429: return buffer;
  6842  0047C4  516E               	movf	receiveI2C@buffer& (0+255),w,b
  6843                           
  6844                           ; BSR set to: 0
  6845  0047C6  0012               	return		;funcret
  6846  0047C8                     __end_of_receiveI2C:
  6847                           	callstack 0
  6848                           
  6849 ;; *************** function _readyI2C *****************
  6850 ;; Defined at:
  6851 ;;		line 378 in file "BORRAR.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 3F/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;Total ram usage:        1 bytes
  6870 ;; Hardware stack levels used: 1
  6871 ;; Hardware stack levels required when called: 5
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_startI2C
  6876 ;;		_sendI2C
  6877 ;;		_stopI2C
  6878 ;;		_repeatedStart
  6879 ;;		_receiveI2C
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text26
  6884  004A74                     __ptext26:
  6885                           	callstack 0
  6886  004A74                     _readyI2C:
  6887                           	callstack 23
  6888                           
  6889                           ;BORRAR.c: 379: while ((SSP1CON2 & 0x1F) || (SSP1STAT & 0x04));
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;incstack = 0
  6893  004A74  CFC5 F06B          	movff	4037,??_readyI2C	;volatile
  6894  004A78  0E1F               	movlw	31
  6895  004A7A  0100               	movlb	0	; () banked
  6896  004A7C  176B               	andwf	??_readyI2C& (0+255),f,b
  6897  004A7E  A4D8               	btfss	status,2,c
  6898  004A80  D7F9               	goto	__ptext26
  6899                           
  6900                           ; BSR set to: 0
  6901  004A82  A4C7               	btfss	199,2,c	;volatile
  6902  004A84  0012               	return	
  6903  004A86  D7F6               	goto	__ptext26
  6904  004A88                     __end_of_readyI2C:
  6905                           	callstack 0
  6906                           
  6907 ;; *************** function ___lltoft *****************
  6908 ;; Defined at:
  6909 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lltoft.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  c               4   19[BANK0 ] unsigned long 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  exp             1   27[BANK0 ] unsigned char 
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  3   19[BANK0 ] float 
  6916 ;; Registers used:
  6917 ;;		wreg, status,2, status,0, cstack
  6918 ;; Tracked objects:
  6919 ;;		On entry : 3F/0
  6920 ;;		On exit  : 3F/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;Total ram usage:        9 bytes
  6928 ;; Hardware stack levels used: 1
  6929 ;; Hardware stack levels required when called: 6
  6930 ;; This function calls:
  6931 ;;		___ftpack
  6932 ;; This function is called by:
  6933 ;;		_setPWMFreq
  6934 ;;		_sprintf
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text27
  6939  004454                     __ptext27:
  6940                           	callstack 0
  6941  004454                     ___lltoft:
  6942                           	callstack 23
  6943                           
  6944                           ; BSR set to: 0
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;incstack = 0
  6948  004454  0E8E               	movlw	142
  6949  004456  6F7B               	movwf	___lltoft@exp& (0+255),b
  6950  004458  D006               	goto	l6024
  6951  00445A                     l6022:
  6952                           
  6953                           ; BSR set to: 0
  6954  00445A  90D8               	bcf	status,0,c
  6955  00445C  3376               	rrcf	(___lltoft@c+3)& (0+255),f,b
  6956  00445E  3375               	rrcf	(___lltoft@c+2)& (0+255),f,b
  6957  004460  3374               	rrcf	(___lltoft@c+1)& (0+255),f,b
  6958  004462  3373               	rrcf	___lltoft@c& (0+255),f,b
  6959  004464  2B7B               	incf	___lltoft@exp& (0+255),f,b
  6960  004466                     l6024:
  6961                           
  6962                           ; BSR set to: 0
  6963  004466  0E00               	movlw	0
  6964  004468  1573               	andwf	___lltoft@c& (0+255),w,b
  6965  00446A  6F77               	movwf	??___lltoft& (0+255),b
  6966  00446C  0E00               	movlw	0
  6967  00446E  1574               	andwf	(___lltoft@c+1)& (0+255),w,b
  6968  004470  6F78               	movwf	(??___lltoft+1)& (0+255),b
  6969  004472  0E00               	movlw	0
  6970  004474  1575               	andwf	(___lltoft@c+2)& (0+255),w,b
  6971  004476  6F79               	movwf	(??___lltoft+2)& (0+255),b
  6972  004478  0EFF               	movlw	255
  6973  00447A  1576               	andwf	(___lltoft@c+3)& (0+255),w,b
  6974  00447C  6F7A               	movwf	(??___lltoft+3)& (0+255),b
  6975  00447E  5177               	movf	??___lltoft& (0+255),w,b
  6976  004480  1178               	iorwf	(??___lltoft+1)& (0+255),w,b
  6977  004482  1179               	iorwf	(??___lltoft+2)& (0+255),w,b
  6978  004484  117A               	iorwf	(??___lltoft+3)& (0+255),w,b
  6979  004486  A4D8               	btfss	status,2,c
  6980  004488  D7E8               	goto	l6022
  6981                           
  6982                           ; BSR set to: 0
  6983  00448A  C073  F06B         	movff	___lltoft@c,___ftpack@arg
  6984  00448E  C074  F06C         	movff	___lltoft@c+1,___ftpack@arg+1
  6985  004492  C075  F06D         	movff	___lltoft@c+2,___ftpack@arg+2
  6986  004496  C07B  F06E         	movff	___lltoft@exp,___ftpack@exp
  6987  00449A  0E00               	movlw	0
  6988  00449C  6F6F               	movwf	___ftpack@sign& (0+255),b
  6989  00449E  EC43  F01E         	call	___ftpack	;wreg free
  6990  0044A2  C06B  F073         	movff	?___ftpack,?___lltoft
  6991  0044A6  C06C  F074         	movff	?___ftpack+1,?___lltoft+1
  6992  0044AA  C06D  F075         	movff	?___ftpack+2,?___lltoft+2
  6993                           
  6994                           ; BSR set to: 0
  6995  0044AE  0012               	return		;funcret
  6996  0044B0                     __end_of___lltoft:
  6997                           	callstack 0
  6998                           
  6999 ;; *************** function ___fttol *****************
  7000 ;; Defined at:
  7001 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fttol.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  f1              3   51[BANK0 ] float 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  lval            4   61[BANK0 ] unsigned long 
  7006 ;;  exp1            1   65[BANK0 ] unsigned char 
  7007 ;;  sign1           1   60[BANK0 ] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  4   51[BANK0 ] long 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0
  7012 ;; Tracked objects:
  7013 ;;		On entry : 3E/0
  7014 ;;		On exit  : 3F/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;Total ram usage:       15 bytes
  7022 ;; Hardware stack levels used: 1
  7023 ;; Hardware stack levels required when called: 5
  7024 ;; This function calls:
  7025 ;;		Nothing
  7026 ;; This function is called by:
  7027 ;;		_main
  7028 ;;		_setPWMFreq
  7029 ;;		_sprintf
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text28
  7034  003ADE                     __ptext28:
  7035                           	callstack 0
  7036  003ADE                     ___fttol:
  7037                           	callstack 24
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;incstack = 0
  7041  003ADE  C095  F097         	movff	___fttol@f1+2,??___fttol
  7042  003AE2  0100               	movlb	0	; () banked
  7043  003AE4  6B98               	clrf	(??___fttol+1)& (0+255),b
  7044  003AE6  6B99               	clrf	(??___fttol+2)& (0+255),b
  7045  003AE8  3594               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7046  003AEA  3797               	rlcf	??___fttol& (0+255),f,b
  7047  003AEC  E301               	bnc	u6841
  7048  003AEE  8198               	bsf	(??___fttol+1)& (0+255),0,b
  7049  003AF0                     u6841:
  7050  003AF0  5197               	movf	??___fttol& (0+255),w,b
  7051  003AF2  6FA1               	movwf	___fttol@exp1& (0+255),b
  7052  003AF4  51A1               	movf	___fttol@exp1& (0+255),w,b
  7053  003AF6  A4D8               	btfss	status,2,c
  7054  003AF8  D009               	goto	l5938
  7055  003AFA                     u6850:
  7056                           
  7057                           ; BSR set to: 0
  7058  003AFA  0E00               	movlw	0
  7059  003AFC  6F93               	movwf	?___fttol& (0+255),b
  7060  003AFE  0E00               	movlw	0
  7061  003B00  6F94               	movwf	(?___fttol+1)& (0+255),b
  7062  003B02  0E00               	movlw	0
  7063  003B04  6F95               	movwf	(?___fttol+2)& (0+255),b
  7064  003B06  0E00               	movlw	0
  7065  003B08  6F96               	movwf	(?___fttol+3)& (0+255),b
  7066  003B0A  0012               	return	
  7067  003B0C                     l5938:
  7068                           
  7069                           ; BSR set to: 0
  7070  003B0C  0E17               	movlw	23
  7071  003B0E  6F97               	movwf	??___fttol& (0+255),b
  7072  003B10  C093  F098         	movff	___fttol@f1,??___fttol+1
  7073  003B14  C094  F099         	movff	___fttol@f1+1,??___fttol+2
  7074  003B18  C095  F09A         	movff	___fttol@f1+2,??___fttol+3
  7075  003B1C  2997               	incf	??___fttol& (0+255),w,b
  7076  003B1E  6F9B               	movwf	(??___fttol+4)& (0+255),b
  7077  003B20  D004               	goto	u6860
  7078  003B22                     u6865:
  7079  003B22  90D8               	bcf	status,0,c
  7080  003B24  339A               	rrcf	(??___fttol+3)& (0+255),f,b
  7081  003B26  3399               	rrcf	(??___fttol+2)& (0+255),f,b
  7082  003B28  3398               	rrcf	(??___fttol+1)& (0+255),f,b
  7083  003B2A                     u6860:
  7084  003B2A  2F9B               	decfsz	(??___fttol+4)& (0+255),f,b
  7085  003B2C  D7FA               	goto	u6865
  7086  003B2E  0100               	movlb	0	; () banked
  7087  003B30  5198               	movf	(??___fttol+1)& (0+255),w,b
  7088  003B32  6F9C               	movwf	___fttol@sign1& (0+255),b
  7089                           
  7090                           ; BSR set to: 0
  7091  003B34  8F94               	bsf	(___fttol@f1+1)& (0+255),7,b
  7092                           
  7093                           ; BSR set to: 0
  7094  003B36  0EFF               	movlw	255
  7095  003B38  1793               	andwf	___fttol@f1& (0+255),f,b
  7096  003B3A  0EFF               	movlw	255
  7097  003B3C  1794               	andwf	(___fttol@f1+1)& (0+255),f,b
  7098  003B3E  0E00               	movlw	0
  7099  003B40  1795               	andwf	(___fttol@f1+2)& (0+255),f,b
  7100                           
  7101                           ; BSR set to: 0
  7102  003B42  5193               	movf	___fttol@f1& (0+255),w,b
  7103  003B44  6F9D               	movwf	___fttol@lval& (0+255),b
  7104  003B46  5194               	movf	(___fttol@f1+1)& (0+255),w,b
  7105  003B48  6F9E               	movwf	(___fttol@lval+1)& (0+255),b
  7106  003B4A  5195               	movf	(___fttol@f1+2)& (0+255),w,b
  7107  003B4C  6F9F               	movwf	(___fttol@lval+2)& (0+255),b
  7108  003B4E  6BA0               	clrf	(___fttol@lval+3)& (0+255),b
  7109                           
  7110                           ; BSR set to: 0
  7111  003B50  0E8E               	movlw	142
  7112  003B52  5FA1               	subwf	___fttol@exp1& (0+255),f,b
  7113                           
  7114                           ; BSR set to: 0
  7115  003B54  AFA1               	btfss	___fttol@exp1& (0+255),7,b
  7116  003B56  D00D               	goto	l5960
  7117                           
  7118                           ; BSR set to: 0
  7119  003B58  51A1               	movf	___fttol@exp1& (0+255),w,b
  7120  003B5A  0A80               	xorlw	128
  7121  003B5C  0F8F               	addlw	143
  7122  003B5E  A0D8               	btfss	status,0,c
  7123  003B60  D7CC               	goto	u6850
  7124  003B62                     l5956:
  7125                           
  7126                           ; BSR set to: 0
  7127  003B62  90D8               	bcf	status,0,c
  7128  003B64  33A0               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7129  003B66  339F               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7130  003B68  339E               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7131  003B6A  339D               	rrcf	___fttol@lval& (0+255),f,b
  7132                           
  7133                           ; BSR set to: 0
  7134  003B6C  3FA1               	incfsz	___fttol@exp1& (0+255),f,b
  7135  003B6E  D7F9               	goto	l5956
  7136  003B70  D00D               	goto	u6900
  7137  003B72                     l5960:
  7138                           
  7139                           ; BSR set to: 0
  7140  003B72  0E17               	movlw	23
  7141  003B74  65A1               	cpfsgt	___fttol@exp1& (0+255),b
  7142  003B76  D007               	goto	l5968
  7143  003B78  D7C0               	goto	u6850
  7144  003B7A                     l5966:
  7145                           
  7146                           ; BSR set to: 0
  7147  003B7A  90D8               	bcf	status,0,c
  7148  003B7C  379D               	rlcf	___fttol@lval& (0+255),f,b
  7149  003B7E  379E               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7150  003B80  379F               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7151  003B82  37A0               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7152  003B84  07A1               	decf	___fttol@exp1& (0+255),f,b
  7153  003B86                     l5968:
  7154                           
  7155                           ; BSR set to: 0
  7156  003B86  51A1               	movf	___fttol@exp1& (0+255),w,b
  7157  003B88  A4D8               	btfss	status,2,c
  7158  003B8A  D7F7               	goto	l5966
  7159  003B8C                     u6900:
  7160                           
  7161                           ; BSR set to: 0
  7162  003B8C  519C               	movf	___fttol@sign1& (0+255),w,b
  7163  003B8E  B4D8               	btfsc	status,2,c
  7164  003B90  D008               	goto	l5974
  7165                           
  7166                           ; BSR set to: 0
  7167  003B92  1FA0               	comf	(___fttol@lval+3)& (0+255),f,b
  7168  003B94  1F9F               	comf	(___fttol@lval+2)& (0+255),f,b
  7169  003B96  1F9E               	comf	(___fttol@lval+1)& (0+255),f,b
  7170  003B98  6D9D               	negf	___fttol@lval& (0+255),b
  7171  003B9A  0E00               	movlw	0
  7172  003B9C  239E               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7173  003B9E  239F               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7174  003BA0  23A0               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7175  003BA2                     l5974:
  7176                           
  7177                           ; BSR set to: 0
  7178  003BA2  C09D  F093         	movff	___fttol@lval,?___fttol
  7179  003BA6  C09E  F094         	movff	___fttol@lval+1,?___fttol+1
  7180  003BAA  C09F  F095         	movff	___fttol@lval+2,?___fttol+2
  7181  003BAE  C0A0  F096         	movff	___fttol@lval+3,?___fttol+3
  7182                           
  7183                           ; BSR set to: 0
  7184  003BB2  0012               	return		;funcret
  7185  003BB4                     __end_of___fttol:
  7186                           	callstack 0
  7187                           
  7188 ;; *************** function ___ftge *****************
  7189 ;; Defined at:
  7190 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftge.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  ff1             3   11[BANK0 ] float 
  7193 ;;  ff2             3   14[BANK0 ] float 
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;		None               void
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0
  7200 ;; Tracked objects:
  7201 ;;		On entry : 3F/0
  7202 ;;		On exit  : 3F/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7205 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;Total ram usage:        9 bytes
  7210 ;; Hardware stack levels used: 1
  7211 ;; Hardware stack levels required when called: 5
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_setPWMFreq
  7216 ;;		_sprintf
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	text29
  7221  0041C0                     __ptext29:
  7222                           	callstack 0
  7223  0041C0                     ___ftge:
  7224                           	callstack 24
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;incstack = 0
  7230  0041C0  AF6D               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7231  0041C2  D00F               	goto	l5918
  7232                           
  7233                           ; BSR set to: 0
  7234  0041C4  0E00               	movlw	0
  7235  0041C6  6F71               	movwf	??___ftge& (0+255),b
  7236  0041C8  0E00               	movlw	0
  7237  0041CA  6F72               	movwf	(??___ftge+1)& (0+255),b
  7238  0041CC  0E80               	movlw	128
  7239  0041CE  6F73               	movwf	(??___ftge+2)& (0+255),b
  7240  0041D0  516B               	movf	___ftge@ff1& (0+255),w,b
  7241  0041D2  5D71               	subwf	??___ftge& (0+255),w,b
  7242  0041D4  6F6B               	movwf	___ftge@ff1& (0+255),b
  7243  0041D6  516C               	movf	(___ftge@ff1+1)& (0+255),w,b
  7244  0041D8  5972               	subwfb	(??___ftge+1)& (0+255),w,b
  7245  0041DA  6F6C               	movwf	(___ftge@ff1+1)& (0+255),b
  7246  0041DC  516D               	movf	(___ftge@ff1+2)& (0+255),w,b
  7247  0041DE  5973               	subwfb	(??___ftge+2)& (0+255),w,b
  7248  0041E0  6F6D               	movwf	(___ftge@ff1+2)& (0+255),b
  7249  0041E2                     l5918:
  7250                           
  7251                           ; BSR set to: 0
  7252  0041E2  AF70               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7253  0041E4  D00F               	goto	l5922
  7254                           
  7255                           ; BSR set to: 0
  7256  0041E6  0E00               	movlw	0
  7257  0041E8  6F71               	movwf	??___ftge& (0+255),b
  7258  0041EA  0E00               	movlw	0
  7259  0041EC  6F72               	movwf	(??___ftge+1)& (0+255),b
  7260  0041EE  0E80               	movlw	128
  7261  0041F0  6F73               	movwf	(??___ftge+2)& (0+255),b
  7262  0041F2  516E               	movf	___ftge@ff2& (0+255),w,b
  7263  0041F4  5D71               	subwf	??___ftge& (0+255),w,b
  7264  0041F6  6F6E               	movwf	___ftge@ff2& (0+255),b
  7265  0041F8  516F               	movf	(___ftge@ff2+1)& (0+255),w,b
  7266  0041FA  5972               	subwfb	(??___ftge+1)& (0+255),w,b
  7267  0041FC  6F6F               	movwf	(___ftge@ff2+1)& (0+255),b
  7268  0041FE  5170               	movf	(___ftge@ff2+2)& (0+255),w,b
  7269  004200  5973               	subwfb	(??___ftge+2)& (0+255),w,b
  7270  004202  6F70               	movwf	(___ftge@ff2+2)& (0+255),b
  7271  004204                     l5922:
  7272                           
  7273                           ; BSR set to: 0
  7274  004204  0E00               	movlw	0
  7275  004206  1B6B               	xorwf	___ftge@ff1& (0+255),f,b
  7276  004208  0E00               	movlw	0
  7277  00420A  1B6C               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7278  00420C  0E80               	movlw	128
  7279  00420E  1B6D               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7280                           
  7281                           ; BSR set to: 0
  7282  004210  0E00               	movlw	0
  7283  004212  1B6E               	xorwf	___ftge@ff2& (0+255),f,b
  7284  004214  0E00               	movlw	0
  7285  004216  1B6F               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7286  004218  0E80               	movlw	128
  7287  00421A  1B70               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7288  00421C  516E               	movf	___ftge@ff2& (0+255),w,b
  7289  00421E  5D6B               	subwf	___ftge@ff1& (0+255),w,b
  7290  004220  516F               	movf	(___ftge@ff2+1)& (0+255),w,b
  7291  004222  596C               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7292  004224  5170               	movf	(___ftge@ff2+2)& (0+255),w,b
  7293  004226  596D               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7294  004228  B0D8               	btfsc	status,0,c
  7295  00422A  D002               	goto	l5928
  7296                           
  7297                           ; BSR set to: 0
  7298  00422C  90D8               	bcf	status,0,c
  7299  00422E  0012               	return	
  7300  004230                     l5928:
  7301                           
  7302                           ; BSR set to: 0
  7303  004230  80D8               	bsf	status,0,c
  7304                           
  7305                           ; BSR set to: 0
  7306  004232  0012               	return		;funcret
  7307  004234                     __end_of___ftge:
  7308                           	callstack 0
  7309                           
  7310 ;; *************** function ___ftdiv *****************
  7311 ;; Defined at:
  7312 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdiv.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  f1              3   28[BANK0 ] float 
  7315 ;;  f2              3   31[BANK0 ] float 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  f3              3   38[BANK0 ] float 
  7318 ;;  sign            1   42[BANK0 ] unsigned char 
  7319 ;;  exp             1   41[BANK0 ] unsigned char 
  7320 ;;  cntr            1   37[BANK0 ] unsigned char 
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  3   28[BANK0 ] float 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 3F/0
  7327 ;;		On exit  : 3F/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7330 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;Total ram usage:       15 bytes
  7335 ;; Hardware stack levels used: 1
  7336 ;; Hardware stack levels required when called: 6
  7337 ;; This function calls:
  7338 ;;		___ftpack
  7339 ;; This function is called by:
  7340 ;;		_setPWMFreq
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text30
  7345  003914                     __ptext30:
  7346                           	callstack 0
  7347  003914                     ___ftdiv:
  7348                           	callstack 22
  7349                           
  7350                           ; BSR set to: 0
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;incstack = 0
  7354  003914  C07E  F082         	movff	___ftdiv@f1+2,??___ftdiv
  7355  003918  6B83               	clrf	(??___ftdiv+1)& (0+255),b
  7356  00391A  6B84               	clrf	(??___ftdiv+2)& (0+255),b
  7357  00391C  357D               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7358  00391E  3782               	rlcf	??___ftdiv& (0+255),f,b
  7359  003920  E301               	bnc	u6581
  7360  003922  8183               	bsf	(??___ftdiv+1)& (0+255),0,b
  7361  003924                     u6581:
  7362  003924  5182               	movf	??___ftdiv& (0+255),w,b
  7363  003926  6F89               	movwf	___ftdiv@exp& (0+255),b
  7364  003928  5189               	movf	___ftdiv@exp& (0+255),w,b
  7365  00392A  A4D8               	btfss	status,2,c
  7366  00392C  D007               	goto	l5746
  7367                           
  7368                           ; BSR set to: 0
  7369  00392E  0E00               	movlw	0
  7370  003930  6F7C               	movwf	?___ftdiv& (0+255),b
  7371  003932  0E00               	movlw	0
  7372  003934  6F7D               	movwf	(?___ftdiv+1)& (0+255),b
  7373  003936  0E00               	movlw	0
  7374  003938  6F7E               	movwf	(?___ftdiv+2)& (0+255),b
  7375  00393A  0012               	return	
  7376  00393C                     l5746:
  7377                           
  7378                           ; BSR set to: 0
  7379  00393C  C081  F082         	movff	___ftdiv@f2+2,??___ftdiv
  7380  003940  6B83               	clrf	(??___ftdiv+1)& (0+255),b
  7381  003942  6B84               	clrf	(??___ftdiv+2)& (0+255),b
  7382  003944  3580               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7383  003946  3782               	rlcf	??___ftdiv& (0+255),f,b
  7384  003948  E301               	bnc	u6601
  7385  00394A  8183               	bsf	(??___ftdiv+1)& (0+255),0,b
  7386  00394C                     u6601:
  7387  00394C  5182               	movf	??___ftdiv& (0+255),w,b
  7388  00394E  6F8A               	movwf	___ftdiv@sign& (0+255),b
  7389  003950  518A               	movf	___ftdiv@sign& (0+255),w,b
  7390  003952  A4D8               	btfss	status,2,c
  7391  003954  D007               	goto	l5752
  7392                           
  7393                           ; BSR set to: 0
  7394  003956  0E00               	movlw	0
  7395  003958  6F7C               	movwf	?___ftdiv& (0+255),b
  7396  00395A  0E00               	movlw	0
  7397  00395C  6F7D               	movwf	(?___ftdiv+1)& (0+255),b
  7398  00395E  0E00               	movlw	0
  7399  003960  6F7E               	movwf	(?___ftdiv+2)& (0+255),b
  7400  003962  0012               	return	
  7401  003964                     l5752:
  7402                           
  7403                           ; BSR set to: 0
  7404  003964  0E00               	movlw	0
  7405  003966  6F86               	movwf	___ftdiv@f3& (0+255),b
  7406  003968  0E00               	movlw	0
  7407  00396A  6F87               	movwf	(___ftdiv@f3+1)& (0+255),b
  7408  00396C  0E00               	movlw	0
  7409  00396E  6F88               	movwf	(___ftdiv@f3+2)& (0+255),b
  7410                           
  7411                           ; BSR set to: 0
  7412  003970  518A               	movf	___ftdiv@sign& (0+255),w,b
  7413  003972  0F89               	addlw	137
  7414  003974  5F89               	subwf	___ftdiv@exp& (0+255),f,b
  7415                           
  7416                           ; BSR set to: 0
  7417  003976  C07E  F08A         	movff	___ftdiv@f1+2,___ftdiv@sign
  7418                           
  7419                           ; BSR set to: 0
  7420  00397A  5181               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7421  00397C  1B8A               	xorwf	___ftdiv@sign& (0+255),f,b
  7422                           
  7423                           ; BSR set to: 0
  7424  00397E  0E80               	movlw	128
  7425  003980  178A               	andwf	___ftdiv@sign& (0+255),f,b
  7426                           
  7427                           ; BSR set to: 0
  7428  003982  8F7D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7429                           
  7430                           ; BSR set to: 0
  7431  003984  0EFF               	movlw	255
  7432  003986  177C               	andwf	___ftdiv@f1& (0+255),f,b
  7433  003988  0EFF               	movlw	255
  7434  00398A  177D               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7435  00398C  0E00               	movlw	0
  7436  00398E  177E               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7437                           
  7438                           ; BSR set to: 0
  7439  003990  8F80               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7440                           
  7441                           ; BSR set to: 0
  7442  003992  0EFF               	movlw	255
  7443  003994  177F               	andwf	___ftdiv@f2& (0+255),f,b
  7444  003996  0EFF               	movlw	255
  7445  003998  1780               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7446  00399A  0E00               	movlw	0
  7447  00399C  1781               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7448                           
  7449                           ; BSR set to: 0
  7450  00399E  0E18               	movlw	24
  7451  0039A0  6F85               	movwf	___ftdiv@cntr& (0+255),b
  7452  0039A2                     l5772:
  7453                           
  7454                           ; BSR set to: 0
  7455  0039A2  90D8               	bcf	status,0,c
  7456  0039A4  3786               	rlcf	___ftdiv@f3& (0+255),f,b
  7457  0039A6  3787               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7458  0039A8  3788               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7459                           
  7460                           ; BSR set to: 0
  7461  0039AA  517F               	movf	___ftdiv@f2& (0+255),w,b
  7462  0039AC  5D7C               	subwf	___ftdiv@f1& (0+255),w,b
  7463  0039AE  5180               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7464  0039B0  597D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7465  0039B2  5181               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7466  0039B4  597E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7467  0039B6  A0D8               	btfss	status,0,c
  7468  0039B8  D007               	goto	l702
  7469                           
  7470                           ; BSR set to: 0
  7471  0039BA  517F               	movf	___ftdiv@f2& (0+255),w,b
  7472  0039BC  5F7C               	subwf	___ftdiv@f1& (0+255),f,b
  7473  0039BE  5180               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7474  0039C0  5B7D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7475  0039C2  5181               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7476  0039C4  5B7E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7477                           
  7478                           ; BSR set to: 0
  7479  0039C6  8186               	bsf	___ftdiv@f3& (0+255),0,b
  7480  0039C8                     l702:
  7481                           
  7482                           ; BSR set to: 0
  7483  0039C8  90D8               	bcf	status,0,c
  7484  0039CA  377C               	rlcf	___ftdiv@f1& (0+255),f,b
  7485  0039CC  377D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7486  0039CE  377E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7487                           
  7488                           ; BSR set to: 0
  7489  0039D0  2F85               	decfsz	___ftdiv@cntr& (0+255),f,b
  7490  0039D2  D7E7               	goto	l5772
  7491                           
  7492                           ; BSR set to: 0
  7493  0039D4  C086  F06B         	movff	___ftdiv@f3,___ftpack@arg
  7494  0039D8  C087  F06C         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7495  0039DC  C088  F06D         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7496  0039E0  C089  F06E         	movff	___ftdiv@exp,___ftpack@exp
  7497  0039E4  C08A  F06F         	movff	___ftdiv@sign,___ftpack@sign
  7498  0039E8  EC43  F01E         	call	___ftpack	;wreg free
  7499  0039EC  C06B  F07C         	movff	?___ftpack,?___ftdiv
  7500  0039F0  C06C  F07D         	movff	?___ftpack+1,?___ftdiv+1
  7501  0039F4  C06D  F07E         	movff	?___ftpack+2,?___ftdiv+2
  7502                           
  7503                           ; BSR set to: 0
  7504  0039F8  0012               	return		;funcret
  7505  0039FA                     __end_of___ftdiv:
  7506                           	callstack 0
  7507                           
  7508 ;; *************** function ___ftpack *****************
  7509 ;; Defined at:
  7510 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\float.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;  arg             3   11[BANK0 ] unsigned um
  7513 ;;  exp             1   14[BANK0 ] unsigned char 
  7514 ;;  sign            1   15[BANK0 ] unsigned char 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  3   11[BANK0 ] float 
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0
  7521 ;; Tracked objects:
  7522 ;;		On entry : 3F/0
  7523 ;;		On exit  : 3F/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7526 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;Total ram usage:        8 bytes
  7531 ;; Hardware stack levels used: 1
  7532 ;; Hardware stack levels required when called: 5
  7533 ;; This function calls:
  7534 ;;		Nothing
  7535 ;; This function is called by:
  7536 ;;		___ftadd
  7537 ;;		___ftdiv
  7538 ;;		___ftmul
  7539 ;;		___lltoft
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text31
  7544  003C86                     __ptext31:
  7545                           	callstack 0
  7546  003C86                     ___ftpack:
  7547                           	callstack 22
  7548                           
  7549                           ; BSR set to: 0
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;incstack = 0
  7553  003C86  516E               	movf	___ftpack@exp& (0+255),w,b
  7554  003C88  B4D8               	btfsc	status,2,c
  7555  003C8A  D005               	goto	u6300
  7556                           
  7557                           ; BSR set to: 0
  7558  003C8C  516B               	movf	___ftpack@arg& (0+255),w,b
  7559  003C8E  116C               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7560  003C90  116D               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7561  003C92  A4D8               	btfss	status,2,c
  7562  003C94  D00C               	goto	l5644
  7563  003C96                     u6300:
  7564                           
  7565                           ; BSR set to: 0
  7566  003C96  0E00               	movlw	0
  7567  003C98  6F6B               	movwf	?___ftpack& (0+255),b
  7568  003C9A  0E00               	movlw	0
  7569  003C9C  6F6C               	movwf	(?___ftpack+1)& (0+255),b
  7570  003C9E  0E00               	movlw	0
  7571  003CA0  6F6D               	movwf	(?___ftpack+2)& (0+255),b
  7572  003CA2  0012               	return	
  7573  003CA4                     l5642:
  7574                           
  7575                           ; BSR set to: 0
  7576  003CA4  2B6E               	incf	___ftpack@exp& (0+255),f,b
  7577  003CA6  90D8               	bcf	status,0,c
  7578  003CA8  336D               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7579  003CAA  336C               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7580  003CAC  336B               	rrcf	___ftpack@arg& (0+255),f,b
  7581  003CAE                     l5644:
  7582                           
  7583                           ; BSR set to: 0
  7584  003CAE  0E00               	movlw	0
  7585  003CB0  156B               	andwf	___ftpack@arg& (0+255),w,b
  7586  003CB2  6F70               	movwf	??___ftpack& (0+255),b
  7587  003CB4  0E00               	movlw	0
  7588  003CB6  156C               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7589  003CB8  6F71               	movwf	(??___ftpack+1)& (0+255),b
  7590  003CBA  0EFE               	movlw	254
  7591  003CBC  156D               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7592  003CBE  6F72               	movwf	(??___ftpack+2)& (0+255),b
  7593  003CC0  5170               	movf	??___ftpack& (0+255),w,b
  7594  003CC2  1171               	iorwf	(??___ftpack+1)& (0+255),w,b
  7595  003CC4  1172               	iorwf	(??___ftpack+2)& (0+255),w,b
  7596  003CC6  B4D8               	btfsc	status,2,c
  7597  003CC8  D00C               	goto	l5650
  7598  003CCA  D7EC               	goto	l5642
  7599  003CCC                     l5646:
  7600                           
  7601                           ; BSR set to: 0
  7602  003CCC  2B6E               	incf	___ftpack@exp& (0+255),f,b
  7603                           
  7604                           ; BSR set to: 0
  7605  003CCE  0E01               	movlw	1
  7606  003CD0  276B               	addwf	___ftpack@arg& (0+255),f,b
  7607  003CD2  0E00               	movlw	0
  7608  003CD4  236C               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7609  003CD6  0E00               	movlw	0
  7610  003CD8  236D               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7611  003CDA  90D8               	bcf	status,0,c
  7612  003CDC  336D               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7613  003CDE  336C               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7614  003CE0  336B               	rrcf	___ftpack@arg& (0+255),f,b
  7615  003CE2                     l5650:
  7616                           
  7617                           ; BSR set to: 0
  7618  003CE2  0E00               	movlw	0
  7619  003CE4  156B               	andwf	___ftpack@arg& (0+255),w,b
  7620  003CE6  6F70               	movwf	??___ftpack& (0+255),b
  7621  003CE8  0E00               	movlw	0
  7622  003CEA  156C               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7623  003CEC  6F71               	movwf	(??___ftpack+1)& (0+255),b
  7624  003CEE  0EFF               	movlw	255
  7625  003CF0  156D               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7626  003CF2  6F72               	movwf	(??___ftpack+2)& (0+255),b
  7627  003CF4  5170               	movf	??___ftpack& (0+255),w,b
  7628  003CF6  1171               	iorwf	(??___ftpack+1)& (0+255),w,b
  7629  003CF8  1172               	iorwf	(??___ftpack+2)& (0+255),w,b
  7630  003CFA  B4D8               	btfsc	status,2,c
  7631  003CFC  D006               	goto	l5654
  7632  003CFE  D7E6               	goto	l5646
  7633  003D00                     l5652:
  7634                           
  7635                           ; BSR set to: 0
  7636  003D00  076E               	decf	___ftpack@exp& (0+255),f,b
  7637  003D02  90D8               	bcf	status,0,c
  7638  003D04  376B               	rlcf	___ftpack@arg& (0+255),f,b
  7639  003D06  376C               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  7640  003D08  376D               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  7641  003D0A                     l5654:
  7642                           
  7643                           ; BSR set to: 0
  7644  003D0A  BF6C               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  7645  003D0C  D003               	goto	u6340
  7646                           
  7647                           ; BSR set to: 0
  7648  003D0E  0E02               	movlw	2
  7649  003D10  616E               	cpfslt	___ftpack@exp& (0+255),b
  7650  003D12  D7F6               	goto	l5652
  7651  003D14                     u6340:
  7652                           
  7653                           ; BSR set to: 0
  7654  003D14  A16E               	btfss	___ftpack@exp& (0+255),0,b
  7655                           
  7656                           ; BSR set to: 0
  7657  003D16  9F6C               	bcf	(___ftpack@arg+1)& (0+255),7,b
  7658                           
  7659                           ; BSR set to: 0
  7660  003D18  90D8               	bcf	status,0,c
  7661  003D1A  336E               	rrcf	___ftpack@exp& (0+255),f,b
  7662  003D1C  516E               	movf	___ftpack@exp& (0+255),w,b
  7663  003D1E  136D               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  7664                           
  7665                           ; BSR set to: 0
  7666  003D20  516F               	movf	___ftpack@sign& (0+255),w,b
  7667  003D22  A4D8               	btfss	status,2,c
  7668                           
  7669                           ; BSR set to: 0
  7670  003D24  8F6D               	bsf	(___ftpack@arg+2)& (0+255),7,b
  7671                           
  7672                           ; BSR set to: 0
  7673  003D26  C06B  F06B         	movff	___ftpack@arg,?___ftpack
  7674  003D2A  C06C  F06C         	movff	___ftpack@arg+1,?___ftpack+1
  7675  003D2E  C06D  F06D         	movff	___ftpack@arg+2,?___ftpack+2
  7676                           
  7677                           ; BSR set to: 0
  7678  003D32  0012               	return		;funcret
  7679  003D34                     __end_of___ftpack:
  7680                           	callstack 0
  7681                           
  7682 ;; *************** function _SettingsLCD *****************
  7683 ;; Defined at:
  7684 ;;		line 321 in file "BORRAR.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  word            1    wreg     unsigned char 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  word            1   13[BANK0 ] unsigned char 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;Total ram usage:        1 bytes
  7703 ;; Hardware stack levels used: 1
  7704 ;; Hardware stack levels required when called: 6
  7705 ;; This function calls:
  7706 ;;		_LCD
  7707 ;; This function is called by:
  7708 ;;		_main
  7709 ;;		_settings
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text32
  7714  004A12                     __ptext32:
  7715                           	callstack 0
  7716  004A12                     _SettingsLCD:
  7717                           	callstack 23
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;incstack = 0
  7721                           ;SettingsLCD@word stored from wreg
  7722  004A12  0100               	movlb	0	; () banked
  7723  004A14  6F6D               	movwf	SettingsLCD@word& (0+255),b
  7724                           
  7725                           ;BORRAR.c: 322: LATEbits.LATE1 = 0;
  7726  004A16  928D               	bcf	141,1,c	;volatile
  7727                           
  7728                           ;BORRAR.c: 323: LCD(word >> 4);
  7729  004A18  0100               	movlb	0	; () banked
  7730  004A1A  396D               	swapf	SettingsLCD@word& (0+255),w,b
  7731  004A1C  0B0F               	andlw	15
  7732  004A1E  ECF1  F01E         	call	_LCD
  7733                           
  7734                           ;BORRAR.c: 324: LCD(word & 0x0F);
  7735  004A22  0100               	movlb	0	; () banked
  7736  004A24  516D               	movf	SettingsLCD@word& (0+255),w,b
  7737  004A26  0B0F               	andlw	15
  7738  004A28  ECF1  F01E         	call	_LCD
  7739  004A2C  0012               	return		;funcret
  7740  004A2E                     __end_of_SettingsLCD:
  7741                           	callstack 0
  7742                           
  7743 ;; *************** function _map *****************
  7744 ;; Defined at:
  7745 ;;		line 489 in file "BORRAR.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  x               2   66[BANK0 ] int 
  7748 ;;  In_Min          2   68[BANK0 ] int 
  7749 ;;  In_Max          2   70[BANK0 ] int 
  7750 ;;  Out_Min         2   72[BANK0 ] int 
  7751 ;;  Out_Max         2   74[BANK0 ] int 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;		None
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  2   66[BANK0 ] int 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7758 ;; Tracked objects:
  7759 ;;		On entry : 3F/0
  7760 ;;		On exit  : 3F/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7763 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;Total ram usage:       10 bytes
  7768 ;; Hardware stack levels used: 1
  7769 ;; Hardware stack levels required when called: 6
  7770 ;; This function calls:
  7771 ;;		___awdiv
  7772 ;;		___wmul
  7773 ;; This function is called by:
  7774 ;;		_main
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text33
  7779  00464C                     __ptext33:
  7780                           	callstack 0
  7781  00464C                     _map:
  7782                           	callstack 24
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;BORRAR.c: 490: return ((x - In_Min) * ((Out_Max - Out_Min) / (In_Max - In_Min))) +Out_M
      +                          in;
  7786                           
  7787                           ;incstack = 0
  7788  00464C  51A4               	movf	map@In_Min& (0+255),w,b
  7789  00464E  5DA2               	subwf	map@x& (0+255),w,b
  7790  004650  6F79               	movwf	___wmul@multiplier& (0+255),b
  7791  004652  51A5               	movf	(map@In_Min+1)& (0+255),w,b
  7792  004654  59A3               	subwfb	(map@x+1)& (0+255),w,b
  7793  004656  6F7A               	movwf	(___wmul@multiplier+1)& (0+255),b
  7794  004658  51A4               	movf	map@In_Min& (0+255),w,b
  7795  00465A  5DA6               	subwf	map@In_Max& (0+255),w,b
  7796  00465C  6F73               	movwf	___awdiv@divisor& (0+255),b
  7797  00465E  51A5               	movf	(map@In_Min+1)& (0+255),w,b
  7798  004660  59A7               	subwfb	(map@In_Max+1)& (0+255),w,b
  7799  004662  6F74               	movwf	(___awdiv@divisor+1)& (0+255),b
  7800  004664  51A8               	movf	map@Out_Min& (0+255),w,b
  7801  004666  5DAA               	subwf	map@Out_Max& (0+255),w,b
  7802  004668  6F71               	movwf	___awdiv@dividend& (0+255),b
  7803  00466A  51A9               	movf	(map@Out_Min+1)& (0+255),w,b
  7804  00466C  59AB               	subwfb	(map@Out_Max+1)& (0+255),w,b
  7805  00466E  6F72               	movwf	(___awdiv@dividend+1)& (0+255),b
  7806  004670  EC99  F01F         	call	___awdiv	;wreg free
  7807  004674  C071  F07B         	movff	?___awdiv,___wmul@multiplicand
  7808  004678  C072  F07C         	movff	?___awdiv+1,___wmul@multiplicand+1
  7809  00467C  EC8F  F024         	call	___wmul	;wreg free
  7810  004680  51A8               	movf	map@Out_Min& (0+255),w,b
  7811  004682  2579               	addwf	?___wmul& (0+255),w,b
  7812  004684  6FA2               	movwf	?_map& (0+255),b
  7813  004686  51A9               	movf	(map@Out_Min+1)& (0+255),w,b
  7814  004688  217A               	addwfc	(?___wmul+1)& (0+255),w,b
  7815  00468A  6FA3               	movwf	(?_map+1)& (0+255),b
  7816                           
  7817                           ; BSR set to: 0
  7818  00468C  0012               	return		;funcret
  7819  00468E                     __end_of_map:
  7820                           	callstack 0
  7821                           
  7822 ;; *************** function ___wmul *****************
  7823 ;; Defined at:
  7824 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  7825 ;; Parameters:    Size  Location     Type
  7826 ;;  multiplier      2   25[BANK0 ] unsigned int 
  7827 ;;  multiplicand    2   27[BANK0 ] unsigned int 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  product         2   29[BANK0 ] unsigned int 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  2   25[BANK0 ] unsigned int 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0, prodl, prodh
  7834 ;; Tracked objects:
  7835 ;;		On entry : 3F/0
  7836 ;;		On exit  : 3F/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;Total ram usage:        6 bytes
  7844 ;; Hardware stack levels used: 1
  7845 ;; Hardware stack levels required when called: 5
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_map
  7850 ;;		_sprintf
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           	psect	text34
  7855  00491E                     __ptext34:
  7856                           	callstack 0
  7857  00491E                     ___wmul:
  7858                           	callstack 24
  7859                           
  7860                           ; BSR set to: 0
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;incstack = 0
  7864  00491E  5179               	movf	___wmul@multiplier& (0+255),w,b
  7865  004920  037B               	mulwf	___wmul@multiplicand& (0+255),b
  7866  004922  CFF3 F07D          	movff	prodl,___wmul@product
  7867  004926  CFF4 F07E          	movff	prodh,___wmul@product+1
  7868  00492A  5179               	movf	___wmul@multiplier& (0+255),w,b
  7869  00492C  037C               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7870  00492E  50F3               	movf	243,w,c
  7871  004930  277E               	addwf	(___wmul@product+1)& (0+255),f,b
  7872  004932  517A               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7873  004934  037B               	mulwf	___wmul@multiplicand& (0+255),b
  7874  004936  50F3               	movf	243,w,c
  7875  004938  277E               	addwf	(___wmul@product+1)& (0+255),f,b
  7876                           
  7877                           ; BSR set to: 0
  7878  00493A  C07D  F079         	movff	___wmul@product,?___wmul
  7879  00493E  C07E  F07A         	movff	___wmul@product+1,?___wmul+1
  7880                           
  7881                           ; BSR set to: 0
  7882  004942  0012               	return		;funcret
  7883  004944                     __end_of___wmul:
  7884                           	callstack 0
  7885                           
  7886 ;; *************** function ___awdiv *****************
  7887 ;; Defined at:
  7888 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  dividend        2   17[BANK0 ] int 
  7891 ;;  divisor         2   19[BANK0 ] int 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  quotient        2   23[BANK0 ] int 
  7894 ;;  sign            1   22[BANK0 ] unsigned char 
  7895 ;;  counter         1   21[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  2   17[BANK0 ] int 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0
  7900 ;; Tracked objects:
  7901 ;;		On entry : 3F/0
  7902 ;;		On exit  : 3F/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;Total ram usage:        8 bytes
  7910 ;; Hardware stack levels used: 1
  7911 ;; Hardware stack levels required when called: 5
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_map
  7916 ;;		_scale
  7917 ;;		_sprintf
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text35
  7922  003F32                     __ptext35:
  7923                           	callstack 0
  7924  003F32                     ___awdiv:
  7925                           	callstack 23
  7926                           
  7927                           ; BSR set to: 0
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;incstack = 0
  7931  003F32  0E00               	movlw	0
  7932  003F34  6F76               	movwf	___awdiv@sign& (0+255),b
  7933                           
  7934                           ; BSR set to: 0
  7935  003F36  AF74               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7936  003F38  D006               	goto	l5842
  7937                           
  7938                           ; BSR set to: 0
  7939  003F3A  6D73               	negf	___awdiv@divisor& (0+255),b
  7940  003F3C  1F74               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7941  003F3E  B0D8               	btfsc	status,0,c
  7942  003F40  2B74               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7943                           
  7944                           ; BSR set to: 0
  7945  003F42  0E01               	movlw	1
  7946  003F44  6F76               	movwf	___awdiv@sign& (0+255),b
  7947  003F46                     l5842:
  7948                           
  7949                           ; BSR set to: 0
  7950  003F46  AF72               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7951  003F48  D006               	goto	l5848
  7952                           
  7953                           ; BSR set to: 0
  7954  003F4A  6D71               	negf	___awdiv@dividend& (0+255),b
  7955  003F4C  1F72               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7956  003F4E  B0D8               	btfsc	status,0,c
  7957  003F50  2B72               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7958                           
  7959                           ; BSR set to: 0
  7960  003F52  0E01               	movlw	1
  7961  003F54  1B76               	xorwf	___awdiv@sign& (0+255),f,b
  7962  003F56                     l5848:
  7963                           
  7964                           ; BSR set to: 0
  7965  003F56  0E00               	movlw	0
  7966  003F58  6F78               	movwf	(___awdiv@quotient+1)& (0+255),b
  7967  003F5A  0E00               	movlw	0
  7968  003F5C  6F77               	movwf	___awdiv@quotient& (0+255),b
  7969                           
  7970                           ; BSR set to: 0
  7971  003F5E  5173               	movf	___awdiv@divisor& (0+255),w,b
  7972  003F60  1174               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7973  003F62  B4D8               	btfsc	status,2,c
  7974  003F64  D01C               	goto	l5870
  7975                           
  7976                           ; BSR set to: 0
  7977  003F66  0E01               	movlw	1
  7978  003F68  6F75               	movwf	___awdiv@counter& (0+255),b
  7979  003F6A  D004               	goto	l5856
  7980  003F6C                     l5854:
  7981                           
  7982                           ; BSR set to: 0
  7983  003F6C  90D8               	bcf	status,0,c
  7984  003F6E  3773               	rlcf	___awdiv@divisor& (0+255),f,b
  7985  003F70  3774               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7986  003F72  2B75               	incf	___awdiv@counter& (0+255),f,b
  7987  003F74                     l5856:
  7988                           
  7989                           ; BSR set to: 0
  7990  003F74  AF74               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7991  003F76  D7FA               	goto	l5854
  7992  003F78                     u6720:
  7993                           
  7994                           ; BSR set to: 0
  7995  003F78  90D8               	bcf	status,0,c
  7996  003F7A  3777               	rlcf	___awdiv@quotient& (0+255),f,b
  7997  003F7C  3778               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7998                           
  7999                           ; BSR set to: 0
  8000  003F7E  5173               	movf	___awdiv@divisor& (0+255),w,b
  8001  003F80  5D71               	subwf	___awdiv@dividend& (0+255),w,b
  8002  003F82  5174               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8003  003F84  5972               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8004  003F86  A0D8               	btfss	status,0,c
  8005  003F88  D005               	goto	l5866
  8006                           
  8007                           ; BSR set to: 0
  8008  003F8A  5173               	movf	___awdiv@divisor& (0+255),w,b
  8009  003F8C  5F71               	subwf	___awdiv@dividend& (0+255),f,b
  8010  003F8E  5174               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8011  003F90  5B72               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8012                           
  8013                           ; BSR set to: 0
  8014  003F92  8177               	bsf	___awdiv@quotient& (0+255),0,b
  8015  003F94                     l5866:
  8016                           
  8017                           ; BSR set to: 0
  8018  003F94  90D8               	bcf	status,0,c
  8019  003F96  3374               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8020  003F98  3373               	rrcf	___awdiv@divisor& (0+255),f,b
  8021                           
  8022                           ; BSR set to: 0
  8023  003F9A  2F75               	decfsz	___awdiv@counter& (0+255),f,b
  8024  003F9C  D7ED               	goto	u6720
  8025  003F9E                     l5870:
  8026                           
  8027                           ; BSR set to: 0
  8028  003F9E  5176               	movf	___awdiv@sign& (0+255),w,b
  8029  003FA0  B4D8               	btfsc	status,2,c
  8030  003FA2  D004               	goto	l5874
  8031                           
  8032                           ; BSR set to: 0
  8033  003FA4  6D77               	negf	___awdiv@quotient& (0+255),b
  8034  003FA6  1F78               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8035  003FA8  B0D8               	btfsc	status,0,c
  8036  003FAA  2B78               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8037  003FAC                     l5874:
  8038                           
  8039                           ; BSR set to: 0
  8040  003FAC  C077  F071         	movff	___awdiv@quotient,?___awdiv
  8041  003FB0  C078  F072         	movff	___awdiv@quotient+1,?___awdiv+1
  8042                           
  8043                           ; BSR set to: 0
  8044  003FB4  0012               	return		;funcret
  8045  003FB6                     __end_of___awdiv:
  8046                           	callstack 0
  8047                           
  8048 ;; *************** function _DataLCD *****************
  8049 ;; Defined at:
  8050 ;;		line 348 in file "BORRAR.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;		None
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 3F/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;Total ram usage:        2 bytes
  8069 ;; Hardware stack levels used: 1
  8070 ;; Hardware stack levels required when called: 7
  8071 ;; This function calls:
  8072 ;;		_WriteLCD
  8073 ;;		_strlen
  8074 ;; This function is called by:
  8075 ;;		_main
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           	psect	text36
  8080  0045C0                     __ptext36:
  8081                           	callstack 0
  8082  0045C0                     _DataLCD:
  8083                           	callstack 23
  8084                           
  8085                           ;BORRAR.c: 349: for (i = 0; i <= strlen(text)-1; i++) {
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;incstack = 0
  8089  0045C0  0E00               	movlw	0
  8090  0045C2  0100               	movlb	0	; () banked
  8091  0045C4  6FC9               	movwf	(_i+1)& (0+255),b
  8092  0045C6  0E00               	movlw	0
  8093  0045C8  6FC8               	movwf	_i& (0+255),b
  8094  0045CA  D00A               	goto	l5162
  8095  0045CC                     l5158:
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;BORRAR.c: 350: WriteLCD(text[i]);
  8099  0045CC  51C8               	movf	_i& (0+255),w,b
  8100  0045CE  0FCC               	addlw	low _text
  8101  0045D0  6ED9               	movwf	fsr2l,c
  8102  0045D2  6ADA               	clrf	fsr2h,c
  8103  0045D4  50DF               	movf	indf2,w,c
  8104  0045D6  EC17  F025         	call	_WriteLCD
  8105  0045DA  0100               	movlb	0	; () banked
  8106  0045DC  4BC8               	infsnz	_i& (0+255),f,b
  8107  0045DE  2BC9               	incf	(_i+1)& (0+255),f,b
  8108  0045E0                     l5162:
  8109                           
  8110                           ; BSR set to: 0
  8111  0045E0  0EFF               	movlw	255
  8112  0045E2  6F6E               	movwf	??_DataLCD& (0+255),b
  8113  0045E4  0EFF               	movlw	255
  8114  0045E6  6F6F               	movwf	(??_DataLCD+1)& (0+255),b
  8115  0045E8  0ECC               	movlw	low _text
  8116  0045EA  6F6B               	movwf	strlen@s& (0+255),b
  8117  0045EC  ECD8  F024         	call	_strlen	;wreg free
  8118  0045F0  516E               	movf	??_DataLCD& (0+255),w,b
  8119  0045F2  276B               	addwf	?_strlen& (0+255),f,b
  8120  0045F4  516F               	movf	(??_DataLCD+1)& (0+255),w,b
  8121  0045F6  236C               	addwfc	(?_strlen+1)& (0+255),f,b
  8122  0045F8  51C8               	movf	_i& (0+255),w,b
  8123  0045FA  5D6B               	subwf	?_strlen& (0+255),w,b
  8124  0045FC  51C9               	movf	(_i+1)& (0+255),w,b
  8125  0045FE  596C               	subwfb	(?_strlen+1)& (0+255),w,b
  8126  004600  A0D8               	btfss	status,0,c
  8127  004602  0012               	return	
  8128  004604  D7E3               	goto	l5158
  8129  004606                     __end_of_DataLCD:
  8130                           	callstack 0
  8131                           
  8132 ;; *************** function _strlen *****************
  8133 ;; Defined at:
  8134 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\strlen.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  s               1   11[BANK0 ] PTR const unsigned char 
  8137 ;;		 -> text(20), 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  cp              1   13[BANK0 ] PTR const unsigned char 
  8140 ;;		 -> text(20), 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  2   11[BANK0 ] unsigned int 
  8143 ;; Registers used:
  8144 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8145 ;; Tracked objects:
  8146 ;;		On entry : 3F/0
  8147 ;;		On exit  : 3F/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8150 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;Total ram usage:        3 bytes
  8155 ;; Hardware stack levels used: 1
  8156 ;; Hardware stack levels required when called: 5
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_DataLCD
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text37
  8165  0049B0                     __ptext37:
  8166                           	callstack 0
  8167  0049B0                     _strlen:
  8168                           	callstack 24
  8169                           
  8170                           ; BSR set to: 0
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;incstack = 0
  8174  0049B0  C06B  F06D         	movff	strlen@s,strlen@cp
  8175  0049B4  D001               	goto	l4238
  8176  0049B6                     l4236:
  8177                           
  8178                           ; BSR set to: 0
  8179  0049B6  2B6D               	incf	strlen@cp& (0+255),f,b
  8180  0049B8                     l4238:
  8181                           
  8182                           ; BSR set to: 0
  8183  0049B8  516D               	movf	strlen@cp& (0+255),w,b
  8184  0049BA  6ED9               	movwf	fsr2l,c
  8185  0049BC  6ADA               	clrf	fsr2h,c
  8186  0049BE  50DF               	movf	indf2,w,c
  8187  0049C0  A4D8               	btfss	status,2,c
  8188  0049C2  D7F9               	goto	l4236
  8189                           
  8190                           ; BSR set to: 0
  8191  0049C4  516B               	movf	strlen@s& (0+255),w,b
  8192  0049C6  5D6D               	subwf	strlen@cp& (0+255),w,b
  8193  0049C8  6F6B               	movwf	?_strlen& (0+255),b
  8194  0049CA  6B6C               	clrf	(?_strlen+1)& (0+255),b
  8195  0049CC  BF6B               	btfsc	?_strlen& (0+255),7,b
  8196  0049CE  076C               	decf	(?_strlen+1)& (0+255),f,b
  8197                           
  8198                           ; BSR set to: 0
  8199  0049D0  0012               	return		;funcret
  8200  0049D2                     __end_of_strlen:
  8201                           	callstack 0
  8202                           
  8203 ;; *************** function _WriteLCD *****************
  8204 ;; Defined at:
  8205 ;;		line 327 in file "BORRAR.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  word            1    wreg     unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  word            1   13[BANK0 ] unsigned char 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      void 
  8212 ;; Registers used:
  8213 ;;		wreg, status,2, status,0, cstack
  8214 ;; Tracked objects:
  8215 ;;		On entry : 3F/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;Total ram usage:        1 bytes
  8224 ;; Hardware stack levels used: 1
  8225 ;; Hardware stack levels required when called: 6
  8226 ;; This function calls:
  8227 ;;		_LCD
  8228 ;; This function is called by:
  8229 ;;		_DataLCD
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text38
  8234  004A2E                     __ptext38:
  8235                           	callstack 0
  8236  004A2E                     _WriteLCD:
  8237                           	callstack 23
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;incstack = 0
  8241                           ;WriteLCD@word stored from wreg
  8242  004A2E  6F6D               	movwf	WriteLCD@word& (0+255),b
  8243                           
  8244                           ;BORRAR.c: 328: LATEbits.LATE1 = 1;
  8245  004A30  828D               	bsf	141,1,c	;volatile
  8246                           
  8247                           ;BORRAR.c: 329: LCD(word >> 4);
  8248  004A32  0100               	movlb	0	; () banked
  8249  004A34  396D               	swapf	WriteLCD@word& (0+255),w,b
  8250  004A36  0B0F               	andlw	15
  8251  004A38  ECF1  F01E         	call	_LCD
  8252                           
  8253                           ;BORRAR.c: 330: LCD(word & 0x0F);
  8254  004A3C  0100               	movlb	0	; () banked
  8255  004A3E  516D               	movf	WriteLCD@word& (0+255),w,b
  8256  004A40  0B0F               	andlw	15
  8257  004A42  ECF1  F01E         	call	_LCD
  8258  004A46  0012               	return		;funcret
  8259  004A48                     __end_of_WriteLCD:
  8260                           	callstack 0
  8261                           
  8262 ;; *************** function _LCD *****************
  8263 ;; Defined at:
  8264 ;;		line 333 in file "BORRAR.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  data            1    wreg     unsigned char 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  data            1   12[BANK0 ] unsigned char 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  1    wreg      void 
  8271 ;; Registers used:
  8272 ;;		wreg, status,2, status,0, cstack
  8273 ;; Tracked objects:
  8274 ;;		On entry : 3F/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;Total ram usage:        2 bytes
  8283 ;; Hardware stack levels used: 1
  8284 ;; Hardware stack levels required when called: 5
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_SettingsLCD
  8289 ;;		_WriteLCD
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text39
  8294  003DE2                     __ptext39:
  8295                           	callstack 0
  8296  003DE2                     _LCD:
  8297                           	callstack 23
  8298                           
  8299                           ;incstack = 0
  8300                           ;LCD@data stored from wreg
  8301  003DE2  6F6C               	movwf	LCD@data& (0+255),b
  8302                           
  8303                           ;BORRAR.c: 334: LATEbits.LATE0 = 1;
  8304  003DE4  808D               	bsf	141,0,c	;volatile
  8305                           
  8306                           ;BORRAR.c: 335: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8307  003DE6  0E0D               	movlw	13
  8308  003DE8                     u7797:
  8309  003DE8  2EE8               	decfsz	wreg,f,c
  8310  003DEA  D7FE               	bra	u7797
  8311  003DEC  F000               	nop	
  8312                           
  8313                           ;BORRAR.c: 336: LATDbits.LATD0 = (data & 0x01);
  8314  003DEE  C06C  F06B         	movff	LCD@data,??_LCD
  8315  003DF2  0E01               	movlw	1
  8316  003DF4  0100               	movlb	0	; () banked
  8317  003DF6  176B               	andwf	??_LCD& (0+255),f,b
  8318  003DF8  508C               	movf	140,w,c	;volatile
  8319  003DFA  196B               	xorwf	??_LCD& (0+255),w,b
  8320  003DFC  0BFE               	andlw	-2
  8321  003DFE  196B               	xorwf	??_LCD& (0+255),w,b
  8322  003E00  6E8C               	movwf	140,c	;volatile
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;BORRAR.c: 337: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8326  003E02  0E0D               	movlw	13
  8327  003E04                     u7807:
  8328  003E04  2EE8               	decfsz	wreg,f,c
  8329  003E06  D7FE               	bra	u7807
  8330  003E08  F000               	nop	
  8331                           
  8332                           ;BORRAR.c: 338: LATDbits.LATD1 = (data & 0x02) >> 1;
  8333  003E0A  C06C  F06B         	movff	LCD@data,??_LCD
  8334  003E0E  0100               	movlb	0	; () banked
  8335  003E10  90D8               	bcf	status,0,c
  8336  003E12  336B               	rrcf	??_LCD& (0+255),f,b
  8337  003E14  0E01               	movlw	1
  8338  003E16  176B               	andwf	??_LCD& (0+255),f,b
  8339  003E18  476B               	rlncf	??_LCD& (0+255),f,b
  8340  003E1A  508C               	movf	140,w,c	;volatile
  8341  003E1C  196B               	xorwf	??_LCD& (0+255),w,b
  8342  003E1E  0BFD               	andlw	-3
  8343  003E20  196B               	xorwf	??_LCD& (0+255),w,b
  8344  003E22  6E8C               	movwf	140,c	;volatile
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;BORRAR.c: 339: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8348  003E24  0E0D               	movlw	13
  8349  003E26                     u7817:
  8350  003E26  2EE8               	decfsz	wreg,f,c
  8351  003E28  D7FE               	bra	u7817
  8352  003E2A  F000               	nop	
  8353                           
  8354                           ;BORRAR.c: 340: LATDbits.LATD2 = (data & 0x04) >> 2;
  8355  003E2C  C06C  F06B         	movff	LCD@data,??_LCD
  8356  003E30  0100               	movlb	0	; () banked
  8357  003E32  90D8               	bcf	status,0,c
  8358  003E34  336B               	rrcf	??_LCD& (0+255),f,b
  8359  003E36  90D8               	bcf	status,0,c
  8360  003E38  336B               	rrcf	??_LCD& (0+255),f,b
  8361  003E3A  0E01               	movlw	1
  8362  003E3C  176B               	andwf	??_LCD& (0+255),f,b
  8363  003E3E  476B               	rlncf	??_LCD& (0+255),f,b
  8364  003E40  476B               	rlncf	??_LCD& (0+255),f,b
  8365  003E42  508C               	movf	140,w,c	;volatile
  8366  003E44  196B               	xorwf	??_LCD& (0+255),w,b
  8367  003E46  0BFB               	andlw	-5
  8368  003E48  196B               	xorwf	??_LCD& (0+255),w,b
  8369  003E4A  6E8C               	movwf	140,c	;volatile
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;BORRAR.c: 341: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8373  003E4C  0E0D               	movlw	13
  8374  003E4E                     u7827:
  8375  003E4E  2EE8               	decfsz	wreg,f,c
  8376  003E50  D7FE               	bra	u7827
  8377  003E52  F000               	nop	
  8378                           
  8379                           ;BORRAR.c: 342: LATDbits.LATD3 = (data & 0x08) >> 3;
  8380  003E54  C06C  F06B         	movff	LCD@data,??_LCD
  8381  003E58  0100               	movlb	0	; () banked
  8382  003E5A  90D8               	bcf	status,0,c
  8383  003E5C  336B               	rrcf	??_LCD& (0+255),f,b
  8384  003E5E  90D8               	bcf	status,0,c
  8385  003E60  336B               	rrcf	??_LCD& (0+255),f,b
  8386  003E62  90D8               	bcf	status,0,c
  8387  003E64  336B               	rrcf	??_LCD& (0+255),f,b
  8388  003E66  0E01               	movlw	1
  8389  003E68  176B               	andwf	??_LCD& (0+255),f,b
  8390  003E6A  476B               	rlncf	??_LCD& (0+255),f,b
  8391  003E6C  476B               	rlncf	??_LCD& (0+255),f,b
  8392  003E6E  476B               	rlncf	??_LCD& (0+255),f,b
  8393  003E70  508C               	movf	140,w,c	;volatile
  8394  003E72  196B               	xorwf	??_LCD& (0+255),w,b
  8395  003E74  0BF7               	andlw	-9
  8396  003E76  196B               	xorwf	??_LCD& (0+255),w,b
  8397  003E78  6E8C               	movwf	140,c	;volatile
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;BORRAR.c: 343: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8401  003E7A  0E0D               	movlw	13
  8402  003E7C                     u7837:
  8403  003E7C  2EE8               	decfsz	wreg,f,c
  8404  003E7E  D7FE               	bra	u7837
  8405  003E80  F000               	nop	
  8406                           
  8407                           ;BORRAR.c: 344: LATEbits.LATE0 = 0;
  8408  003E82  908D               	bcf	141,0,c	;volatile
  8409                           
  8410                           ;BORRAR.c: 345: _delay((unsigned long)((10)*(16000000/4000000.0)));
  8411  003E84  0E0D               	movlw	13
  8412  003E86                     u7847:
  8413  003E86  2EE8               	decfsz	wreg,f,c
  8414  003E88  D7FE               	bra	u7847
  8415  003E8A  F000               	nop	
  8416  003E8C  0012               	return		;funcret
  8417  003E8E                     __end_of_LCD:
  8418                           	callstack 0
  8419                           
  8420 ;; *************** function _TMR1_ISR *****************
  8421 ;; Defined at:
  8422 ;;		line 232 in file "BORRAR.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  d               1   10[BANK0 ] unsigned char 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      void 
  8429 ;; Registers used:
  8430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8438 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8439 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;Total ram usage:       11 bytes
  8441 ;; Hardware stack levels used: 1
  8442 ;; Hardware stack levels required when called: 4
  8443 ;; This function calls:
  8444 ;;		___awtoft
  8445 ;;		i2_DataLCD
  8446 ;;		i2_SettingsLCD
  8447 ;;		i2___ftadd
  8448 ;;		i2___ftmul
  8449 ;;		i2___fttol
  8450 ;;		i2_map
  8451 ;;		i2_sprintf
  8452 ;;		i2_writeI2C
  8453 ;; This function is called by:
  8454 ;;		Interrupt level 2
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           	psect	intcode
  8459  000008                     __pintcode:
  8460                           	callstack 0
  8461  000008                     _TMR1_ISR:
  8462                           	callstack 21
  8463                           
  8464                           ;incstack = 0
  8465  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8466  00000A  CFD9 F062          	movff	fsr2l,??_TMR1_ISR+2
  8467  00000E  CFDA F063          	movff	fsr2h,??_TMR1_ISR+3
  8468  000012  CFF3 F064          	movff	prodl,??_TMR1_ISR+4
  8469  000016  CFF4 F065          	movff	prodh,??_TMR1_ISR+5
  8470  00001A  CFF6 F066          	movff	tblptrl,??_TMR1_ISR+6
  8471  00001E  CFF7 F067          	movff	tblptrh,??_TMR1_ISR+7
  8472  000022  CFF8 F068          	movff	tblptru,??_TMR1_ISR+8
  8473  000026  CFF5 F069          	movff	tablat,??_TMR1_ISR+9
  8474                           
  8475                           ;BORRAR.c: 233: unsigned char d;;BORRAR.c: 235: if (INT1IF) {
  8476  00002A  A0F0               	btfss	4080,0,c	;volatile
  8477  00002C  D015               	goto	i2l5526
  8478                           
  8479                           ;BORRAR.c: 237: inter = inter+1;
  8480  00002E  0E01               	movlw	1
  8481  000030  0100               	movlb	0	; () banked
  8482  000032  25BE               	addwf	_inter& (0+255),w,b
  8483  000034  6FBE               	movwf	_inter& (0+255),b
  8484  000036  0E00               	movlw	0
  8485  000038  21BF               	addwfc	(_inter+1)& (0+255),w,b
  8486  00003A  6FBF               	movwf	(_inter+1)& (0+255),b
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;BORRAR.c: 238: _delay((unsigned long)((1000)*(16000000/4000.0)));
  8490  00003C  0E15               	movlw	21
  8491  00003E  0100               	movlb	0	; () banked
  8492  000040  6F61               	movwf	(??_TMR1_ISR+1)& (0+255),b
  8493  000042  0E4B               	movlw	75
  8494  000044  6F60               	movwf	??_TMR1_ISR& (0+255),b
  8495  000046  0EBE               	movlw	190
  8496  000048                     i2u785_47:
  8497  000048  2EE8               	decfsz	wreg,f,c
  8498  00004A  D7FE               	bra	i2u785_47
  8499  00004C  2F60               	decfsz	??_TMR1_ISR& (0+255),f,b
  8500  00004E  D7FC               	bra	i2u785_47
  8501  000050  2F61               	decfsz	(??_TMR1_ISR+1)& (0+255),f,b
  8502  000052  D7FA               	bra	i2u785_47
  8503  000054  F000               	nop	
  8504                           
  8505                           ;BORRAR.c: 239: INT1IF = 0;
  8506  000056  90F0               	bcf	4080,0,c	;volatile
  8507  000058                     i2l5526:
  8508                           
  8509                           ;BORRAR.c: 241: };BORRAR.c: 244: if (RC1IF) {
  8510  000058  AA9E               	btfss	3998,5,c	;volatile
  8511  00005A  D1BF               	goto	i2l170
  8512                           
  8513                           ;BORRAR.c: 245: d = RCREG1;
  8514  00005C  CFAE F06A          	movff	4014,TMR1_ISR@d	;volatile
  8515                           
  8516                           ;BORRAR.c: 247: if (d == 'A' || d == 'B'){
  8517  000060  0E41               	movlw	65
  8518  000062  0100               	movlb	0	; () banked
  8519  000064  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8520  000066  B4D8               	btfsc	status,2,c
  8521  000068  D004               	goto	i2u609_40
  8522                           
  8523                           ; BSR set to: 0
  8524  00006A  0E42               	movlw	66
  8525  00006C  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8526  00006E  A4D8               	btfss	status,2,c
  8527  000070  D003               	goto	i2l5534
  8528  000072                     i2u609_40:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;BORRAR.c: 248: servo = d;
  8532  000072  C06A  F0CB         	movff	TMR1_ISR@d,_servo
  8533                           
  8534                           ;BORRAR.c: 249: }
  8535  000076  D1B1               	goto	i2l170
  8536  000078                     i2l5534:
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;BORRAR.c: 251: else if (d == '0' || d == '1' || d == '2' || d == '3' || d == '4' || d =
      +                          = '5' || d == '6' || d == '7' || d == '8' || d == '9') {
  8540  000078  0E30               	movlw	48
  8541  00007A  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8542  00007C  B4D8               	btfsc	status,2,c
  8543  00007E  D024               	goto	i2u619_40
  8544                           
  8545                           ; BSR set to: 0
  8546  000080  0E31               	movlw	49
  8547  000082  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8548  000084  B4D8               	btfsc	status,2,c
  8549  000086  D020               	goto	i2u619_40
  8550                           
  8551                           ; BSR set to: 0
  8552  000088  0E32               	movlw	50
  8553  00008A  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8554  00008C  B4D8               	btfsc	status,2,c
  8555  00008E  D01C               	goto	i2u619_40
  8556                           
  8557                           ; BSR set to: 0
  8558  000090  0E33               	movlw	51
  8559  000092  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8560  000094  B4D8               	btfsc	status,2,c
  8561  000096  D018               	goto	i2u619_40
  8562                           
  8563                           ; BSR set to: 0
  8564  000098  0E34               	movlw	52
  8565  00009A  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8566  00009C  B4D8               	btfsc	status,2,c
  8567  00009E  D014               	goto	i2u619_40
  8568                           
  8569                           ; BSR set to: 0
  8570  0000A0  0E35               	movlw	53
  8571  0000A2  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8572  0000A4  B4D8               	btfsc	status,2,c
  8573  0000A6  D010               	goto	i2u619_40
  8574                           
  8575                           ; BSR set to: 0
  8576  0000A8  0E36               	movlw	54
  8577  0000AA  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8578  0000AC  B4D8               	btfsc	status,2,c
  8579  0000AE  D00C               	goto	i2u619_40
  8580                           
  8581                           ; BSR set to: 0
  8582  0000B0  0E37               	movlw	55
  8583  0000B2  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8584  0000B4  B4D8               	btfsc	status,2,c
  8585  0000B6  D008               	goto	i2u619_40
  8586                           
  8587                           ; BSR set to: 0
  8588  0000B8  0E38               	movlw	56
  8589  0000BA  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8590  0000BC  B4D8               	btfsc	status,2,c
  8591  0000BE  D004               	goto	i2u619_40
  8592                           
  8593                           ; BSR set to: 0
  8594  0000C0  0E39               	movlw	57
  8595  0000C2  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8596  0000C4  A4D8               	btfss	status,2,c
  8597  0000C6  D0B0               	goto	i2l5576
  8598  0000C8                     i2u619_40:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;BORRAR.c: 252: if (flag == 1) {
  8602  0000C8  05E4               	decf	_flag& (0+255),w,b
  8603  0000CA  11E5               	iorwf	(_flag+1)& (0+255),w,b
  8604  0000CC  A4D8               	btfss	status,2,c
  8605  0000CE  D013               	goto	i2l5560
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;BORRAR.c: 253: a = d - 48;
  8609  0000D0  0ED0               	movlw	208
  8610  0000D2  256A               	addwf	TMR1_ISR@d& (0+255),w,b
  8611  0000D4  6E09               	movwf	___awtoft@c^0,c
  8612  0000D6  6A0A               	clrf	(___awtoft@c+1)^0,c
  8613  0000D8  0EFF               	movlw	255
  8614  0000DA  220A               	addwfc	(___awtoft@c+1)^0,f,c
  8615  0000DC  EC01  F024         	call	___awtoft	;wreg free
  8616  0000E0  C009  F0BB         	movff	?___awtoft,_a
  8617  0000E4  C00A  F0BC         	movff	?___awtoft+1,_a+1
  8618  0000E8  C00B  F0BD         	movff	?___awtoft+2,_a+2
  8619                           
  8620                           ;BORRAR.c: 254: flag = 2;
  8621  0000EC  0E00               	movlw	0
  8622  0000EE  0100               	movlb	0	; () banked
  8623  0000F0  6FE5               	movwf	(_flag+1)& (0+255),b
  8624  0000F2  0E02               	movlw	2
  8625  0000F4  D0A0               	goto	L6
  8626  0000F6                     i2l5560:
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;BORRAR.c: 256: else if(flag == 2){
  8630  0000F6  0E02               	movlw	2
  8631  0000F8  19E4               	xorwf	_flag& (0+255),w,b
  8632  0000FA  11E5               	iorwf	(_flag+1)& (0+255),w,b
  8633  0000FC  A4D8               	btfss	status,2,c
  8634  0000FE  D02C               	goto	i2l5564
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;BORRAR.c: 257: a = (a * 10) + (d - 48);
  8638  000100  0E00               	movlw	0
  8639  000102  6E12               	movwf	i2___ftmul@f2^0,c
  8640  000104  0E20               	movlw	32
  8641  000106  6E13               	movwf	(i2___ftmul@f2+1)^0,c
  8642  000108  0E41               	movlw	65
  8643  00010A  6E14               	movwf	(i2___ftmul@f2+2)^0,c
  8644  00010C  C0BB  F00F         	movff	_a,i2___ftmul@f1
  8645  000110  C0BC  F010         	movff	_a+1,i2___ftmul@f1+1
  8646  000114  C0BD  F011         	movff	_a+2,i2___ftmul@f1+2
  8647  000118  EC96  F01B         	call	i2___ftmul	;wreg free
  8648  00011C  C00F  F02C         	movff	?i2___ftmul,i2___ftadd@f1
  8649  000120  C010  F02D         	movff	?i2___ftmul+1,i2___ftadd@f1+1
  8650  000124  C011  F02E         	movff	?i2___ftmul+2,i2___ftadd@f1+2
  8651  000128  0ED0               	movlw	208
  8652  00012A  0100               	movlb	0	; () banked
  8653  00012C  256A               	addwf	TMR1_ISR@d& (0+255),w,b
  8654  00012E  6E09               	movwf	___awtoft@c^0,c
  8655  000130  6A0A               	clrf	(___awtoft@c+1)^0,c
  8656  000132  0EFF               	movlw	255
  8657  000134  220A               	addwfc	(___awtoft@c+1)^0,f,c
  8658  000136  EC01  F024         	call	___awtoft	;wreg free
  8659  00013A  C009  F02F         	movff	?___awtoft,i2___ftadd@f2
  8660  00013E  C00A  F030         	movff	?___awtoft+1,i2___ftadd@f2+1
  8661  000142  C00B  F031         	movff	?___awtoft+2,i2___ftadd@f2+2
  8662  000146  EC08  F018         	call	i2___ftadd	;wreg free
  8663  00014A  C02C  F0BB         	movff	?i2___ftadd,_a
  8664  00014E  C02D  F0BC         	movff	?i2___ftadd+1,_a+1
  8665  000152  C02E  F0BD         	movff	?i2___ftadd+2,_a+2
  8666                           
  8667                           ;BORRAR.c: 258: }
  8668  000156  D141               	goto	i2l170
  8669  000158                     i2l5564:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;BORRAR.c: 260: else if(flag == 3){
  8673  000158  0E03               	movlw	3
  8674  00015A  19E4               	xorwf	_flag& (0+255),w,b
  8675  00015C  11E5               	iorwf	(_flag+1)& (0+255),w,b
  8676  00015E  A4D8               	btfss	status,2,c
  8677  000160  D02F               	goto	i2l5570
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;BORRAR.c: 261: a = a + (d-48)*0.1;
  8681  000162  0ECD               	movlw	205
  8682  000164  6E12               	movwf	i2___ftmul@f2^0,c
  8683  000166  0ECC               	movlw	204
  8684  000168  6E13               	movwf	(i2___ftmul@f2+1)^0,c
  8685  00016A  0E3D               	movlw	61
  8686  00016C  6E14               	movwf	(i2___ftmul@f2+2)^0,c
  8687  00016E  0ED0               	movlw	208
  8688  000170  256A               	addwf	TMR1_ISR@d& (0+255),w,b
  8689  000172  6E09               	movwf	___awtoft@c^0,c
  8690  000174  6A0A               	clrf	(___awtoft@c+1)^0,c
  8691  000176  0EFF               	movlw	255
  8692  000178  220A               	addwfc	(___awtoft@c+1)^0,f,c
  8693  00017A  EC01  F024         	call	___awtoft	;wreg free
  8694  00017E  C009  F00F         	movff	?___awtoft,i2___ftmul@f1
  8695  000182  C00A  F010         	movff	?___awtoft+1,i2___ftmul@f1+1
  8696  000186  C00B  F011         	movff	?___awtoft+2,i2___ftmul@f1+2
  8697  00018A  EC96  F01B         	call	i2___ftmul	;wreg free
  8698  00018E  C00F  F02C         	movff	?i2___ftmul,i2___ftadd@f1
  8699  000192  C010  F02D         	movff	?i2___ftmul+1,i2___ftadd@f1+1
  8700  000196  C011  F02E         	movff	?i2___ftmul+2,i2___ftadd@f1+2
  8701  00019A  C0BB  F02F         	movff	_a,i2___ftadd@f2
  8702  00019E  C0BC  F030         	movff	_a+1,i2___ftadd@f2+1
  8703  0001A2  C0BD  F031         	movff	_a+2,i2___ftadd@f2+2
  8704  0001A6  EC08  F018         	call	i2___ftadd	;wreg free
  8705  0001AA  C02C  F0BB         	movff	?i2___ftadd,_a
  8706  0001AE  C02D  F0BC         	movff	?i2___ftadd+1,_a+1
  8707  0001B2  C02E  F0BD         	movff	?i2___ftadd+2,_a+2
  8708                           
  8709                           ;BORRAR.c: 262: flag = 4;
  8710  0001B6  0E00               	movlw	0
  8711  0001B8  0100               	movlb	0	; () banked
  8712  0001BA  6FE5               	movwf	(_flag+1)& (0+255),b
  8713  0001BC  0E04               	movlw	4
  8714  0001BE  D03B               	goto	L6
  8715  0001C0                     i2l5570:
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;BORRAR.c: 264: else if(flag == 4){
  8719  0001C0  0E04               	movlw	4
  8720  0001C2  19E4               	xorwf	_flag& (0+255),w,b
  8721  0001C4  11E5               	iorwf	(_flag+1)& (0+255),w,b
  8722  0001C6  A4D8               	btfss	status,2,c
  8723  0001C8  D108               	goto	i2l170
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;BORRAR.c: 265: a = a + (d-48)*0.01;
  8727  0001CA  0ED7               	movlw	215
  8728  0001CC  6E12               	movwf	i2___ftmul@f2^0,c
  8729  0001CE  0E23               	movlw	35
  8730  0001D0  6E13               	movwf	(i2___ftmul@f2+1)^0,c
  8731  0001D2  0E3C               	movlw	60
  8732  0001D4  6E14               	movwf	(i2___ftmul@f2+2)^0,c
  8733  0001D6  0ED0               	movlw	208
  8734  0001D8  256A               	addwf	TMR1_ISR@d& (0+255),w,b
  8735  0001DA  6E09               	movwf	___awtoft@c^0,c
  8736  0001DC  6A0A               	clrf	(___awtoft@c+1)^0,c
  8737  0001DE  0EFF               	movlw	255
  8738  0001E0  220A               	addwfc	(___awtoft@c+1)^0,f,c
  8739  0001E2  EC01  F024         	call	___awtoft	;wreg free
  8740  0001E6  C009  F00F         	movff	?___awtoft,i2___ftmul@f1
  8741  0001EA  C00A  F010         	movff	?___awtoft+1,i2___ftmul@f1+1
  8742  0001EE  C00B  F011         	movff	?___awtoft+2,i2___ftmul@f1+2
  8743  0001F2  EC96  F01B         	call	i2___ftmul	;wreg free
  8744  0001F6  C00F  F02C         	movff	?i2___ftmul,i2___ftadd@f1
  8745  0001FA  C010  F02D         	movff	?i2___ftmul+1,i2___ftadd@f1+1
  8746  0001FE  C011  F02E         	movff	?i2___ftmul+2,i2___ftadd@f1+2
  8747  000202  C0BB  F02F         	movff	_a,i2___ftadd@f2
  8748  000206  C0BC  F030         	movff	_a+1,i2___ftadd@f2+1
  8749  00020A  C0BD  F031         	movff	_a+2,i2___ftadd@f2+2
  8750  00020E  EC08  F018         	call	i2___ftadd	;wreg free
  8751  000212  C02C  F0BB         	movff	?i2___ftadd,_a
  8752  000216  C02D  F0BC         	movff	?i2___ftadd+1,_a+1
  8753  00021A  C02E  F0BD         	movff	?i2___ftadd+2,_a+2
  8754                           
  8755                           ;BORRAR.c: 266: flag = 5;
  8756  00021E  0E00               	movlw	0
  8757  000220  0100               	movlb	0	; () banked
  8758  000222  6FE5               	movwf	(_flag+1)& (0+255),b
  8759  000224  0E05               	movlw	5
  8760  000226  D007               	goto	L6
  8761  000228                     i2l5576:
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;BORRAR.c: 270: else if(d == '.'){
  8765  000228  0E2E               	movlw	46
  8766  00022A  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8767  00022C  A4D8               	btfss	status,2,c
  8768  00022E  D005               	goto	i2l5580
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;BORRAR.c: 271: flag = 3;
  8772  000230  0E00               	movlw	0
  8773  000232  6FE5               	movwf	(_flag+1)& (0+255),b
  8774  000234  0E03               	movlw	3
  8775  000236                     L6:
  8776  000236  6FE4               	movwf	_flag& (0+255),b
  8777                           
  8778                           ;BORRAR.c: 272: }
  8779  000238  D0D0               	goto	i2l170
  8780  00023A                     i2l5580:
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;BORRAR.c: 274: else if (d == 'O') {
  8784  00023A  0E4F               	movlw	79
  8785  00023C  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8786  00023E  A4D8               	btfss	status,2,c
  8787  000240  D020               	goto	i2l5592
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;BORRAR.c: 275: if (servo == 'A'){
  8791  000242  0E41               	movlw	65
  8792  000244  19CB               	xorwf	_servo& (0+255),w,b
  8793  000246  A4D8               	btfss	status,2,c
  8794  000248  D007               	goto	i2l5586
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;BORRAR.c: 276: b = a;
  8798  00024A  C0BB  F0B8         	movff	_a,_b
  8799  00024E  C0BC  F0B9         	movff	_a+1,_b+1
  8800  000252  C0BD  F0BA         	movff	_a+2,_b+2
  8801                           
  8802                           ;BORRAR.c: 277: }
  8803  000256  D00A               	goto	i2l5590
  8804  000258                     i2l5586:
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;BORRAR.c: 278: else if(servo == 'B'){
  8808  000258  0E42               	movlw	66
  8809  00025A  19CB               	xorwf	_servo& (0+255),w,b
  8810  00025C  A4D8               	btfss	status,2,c
  8811  00025E  D006               	goto	i2l5590
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;BORRAR.c: 279: c = a;
  8815  000260  C0BB  F0B5         	movff	_a,_c
  8816  000264  C0BC  F0B6         	movff	_a+1,_c+1
  8817  000268  C0BD  F0B7         	movff	_a+2,_c+2
  8818  00026C                     i2l5590:
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;BORRAR.c: 280: };BORRAR.c: 281: flag = 1;
  8822  00026C  0E00               	movlw	0
  8823  00026E  6FE5               	movwf	(_flag+1)& (0+255),b
  8824  000270  0E01               	movlw	1
  8825  000272  6FE4               	movwf	_flag& (0+255),b
  8826                           
  8827                           ;BORRAR.c: 282: a = 0.0;
  8828  000274  0E00               	movlw	0
  8829  000276  6FBB               	movwf	_a& (0+255),b
  8830  000278  0E00               	movlw	0
  8831  00027A  6FBC               	movwf	(_a+1)& (0+255),b
  8832  00027C  0E00               	movlw	0
  8833  00027E  6FBD               	movwf	(_a+2)& (0+255),b
  8834                           
  8835                           ;BORRAR.c: 283: }
  8836  000280  D0AC               	goto	i2l170
  8837  000282                     i2l5592:
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;BORRAR.c: 286: else if (d == 'K'){
  8841  000282  0E4B               	movlw	75
  8842  000284  196A               	xorwf	TMR1_ISR@d& (0+255),w,b
  8843  000286  A4D8               	btfss	status,2,c
  8844  000288  D0A8               	goto	i2l170
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;BORRAR.c: 288: SettingsLCD(0x01);
  8848  00028A  0E01               	movlw	1
  8849  00028C  EC24  F025         	call	i2_SettingsLCD
  8850                           
  8851                           ;BORRAR.c: 289: SettingsLCD(0x80);
  8852  000290  0E80               	movlw	128
  8853  000292  EC24  F025         	call	i2_SettingsLCD
  8854                           
  8855                           ;BORRAR.c: 290: sprintf(text,"Servo 1:%.2f",b);
  8856  000296  0ECC               	movlw	low _text
  8857  000298  6E3E               	movwf	i2sprintf@sp^0,c
  8858  00029A  0E87               	movlw	low STR_5
  8859  00029C  6E3F               	movwf	i2sprintf@f^0,c
  8860  00029E  C0B8  F040         	movff	_b,?i2_sprintf+2
  8861  0002A2  C0B9  F041         	movff	_b+1,?i2_sprintf+3
  8862  0002A6  C0BA  F042         	movff	_b+2,?i2_sprintf+4
  8863  0002AA  EC75  F00C         	call	i2_sprintf	;wreg free
  8864                           
  8865                           ;BORRAR.c: 291: DataLCD();
  8866  0002AE  EC03  F023         	call	i2_DataLCD	;wreg free
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;BORRAR.c: 294: SettingsLCD(0xC0);
  8870  0002B2  0EC0               	movlw	192
  8871  0002B4  EC24  F025         	call	i2_SettingsLCD
  8872                           
  8873                           ;BORRAR.c: 295: sprintf(text,"Servo 2:%.2f",c);
  8874  0002B8  0ECC               	movlw	low _text
  8875  0002BA  6E3E               	movwf	i2sprintf@sp^0,c
  8876  0002BC  0E94               	movlw	low STR_2
  8877  0002BE  6E3F               	movwf	i2sprintf@f^0,c
  8878  0002C0  C0B5  F040         	movff	_c,?i2_sprintf+2
  8879  0002C4  C0B6  F041         	movff	_c+1,?i2_sprintf+3
  8880  0002C8  C0B7  F042         	movff	_c+2,?i2_sprintf+4
  8881  0002CC  EC75  F00C         	call	i2_sprintf	;wreg free
  8882                           
  8883                           ;BORRAR.c: 296: DataLCD();
  8884  0002D0  EC03  F023         	call	i2_DataLCD	;wreg free
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;BORRAR.c: 298: data2[0] = 0;
  8888  0002D4  0E00               	movlw	0
  8889  0002D6  6FE0               	movwf	_data2& (0+255),b
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;BORRAR.c: 299: data2[1] = 0;
  8893  0002D8  0E00               	movlw	0
  8894  0002DA  6FE1               	movwf	(_data2+1)& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;BORRAR.c: 301: DriverPin = 0;
  8898  0002DC  0E00               	movlw	0
  8899  0002DE  6FC3               	movwf	(_DriverPin+1)& (0+255),b
  8900  0002E0  0E00               	movlw	0
  8901  0002E2  6FC2               	movwf	_DriverPin& (0+255),b
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;BORRAR.c: 302: pos = map(b, 0, 180, 110, 510);
  8905  0002E4  C0B8  F01E         	movff	_b,i2___fttol@f1
  8906  0002E8  C0B9  F01F         	movff	_b+1,i2___fttol@f1+1
  8907  0002EC  C0BA  F020         	movff	_b+2,i2___fttol@f1+2
  8908  0002F0  ECDA  F01D         	call	i2___fttol	;wreg free
  8909  0002F4  C01E  F02D         	movff	?i2___fttol,i2map@x
  8910  0002F8  C01F  F02E         	movff	?i2___fttol+1,i2map@x+1
  8911  0002FC  0E00               	movlw	0
  8912  0002FE  6E30               	movwf	(i2map@In_Min+1)^0,c
  8913  000300  0E00               	movlw	0
  8914  000302  6E2F               	movwf	i2map@In_Min^0,c
  8915  000304  0E00               	movlw	0
  8916  000306  6E32               	movwf	(i2map@In_Max+1)^0,c
  8917  000308  0EB4               	movlw	180
  8918  00030A  6E31               	movwf	i2map@In_Max^0,c
  8919  00030C  0E00               	movlw	0
  8920  00030E  6E34               	movwf	(i2map@Out_Min+1)^0,c
  8921  000310  0E6E               	movlw	110
  8922  000312  6E33               	movwf	i2map@Out_Min^0,c
  8923  000314  0E01               	movlw	1
  8924  000316  6E36               	movwf	(i2map@Out_Max+1)^0,c
  8925  000318  0EFE               	movlw	254
  8926  00031A  6E35               	movwf	i2map@Out_Max^0,c
  8927  00031C  EC47  F023         	call	i2_map	;wreg free
  8928  000320  C02D  F0C4         	movff	?i2_map,_pos
  8929  000324  C02E  F0C5         	movff	?i2_map+1,_pos+1
  8930                           
  8931                           ;BORRAR.c: 303: data2[2] = pos;
  8932  000328  C0C4  F0E2         	movff	_pos,_data2+2
  8933                           
  8934                           ;BORRAR.c: 304: data2[3] = pos >> 8;
  8935  00032C  0100               	movlb	0	; () banked
  8936  00032E  51C5               	movf	(_pos+1)& (0+255),w,b
  8937  000330  6FE3               	movwf	(_data2+3)& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;BORRAR.c: 306: writeI2C(0x80, 0x06 + (4 * DriverPin), data2, 4);
  8941  000332  51C2               	movf	_DriverPin& (0+255),w,b
  8942  000334  0D04               	mullw	4
  8943  000336  50F3               	movf	243,w,c
  8944  000338  0F06               	addlw	6
  8945  00033A  6E03               	movwf	i2writeI2C@Register^0,c
  8946  00033C  0EE0               	movlw	low _data2
  8947  00033E  6E04               	movwf	i2writeI2C@Data^0,c
  8948  000340  0E00               	movlw	0
  8949  000342  6E06               	movwf	(i2writeI2C@bytes+1)^0,c
  8950  000344  0E04               	movlw	4
  8951  000346  6E05               	movwf	i2writeI2C@bytes^0,c
  8952  000348  0E80               	movlw	128
  8953  00034A  EC58  F022         	call	i2_writeI2C
  8954                           
  8955                           ;BORRAR.c: 307: _delay((unsigned long)((100)*(16000000/4000.0)));
  8956  00034E  0E03               	movlw	3
  8957  000350  0100               	movlb	0	; () banked
  8958  000352  6F61               	movwf	(??_TMR1_ISR+1)& (0+255),b
  8959  000354  0E08               	movlw	8
  8960  000356  6F60               	movwf	??_TMR1_ISR& (0+255),b
  8961  000358  0E77               	movlw	119
  8962  00035A                     i2u786_47:
  8963  00035A  2EE8               	decfsz	wreg,f,c
  8964  00035C  D7FE               	bra	i2u786_47
  8965  00035E  2F60               	decfsz	??_TMR1_ISR& (0+255),f,b
  8966  000360  D7FC               	bra	i2u786_47
  8967  000362  2F61               	decfsz	(??_TMR1_ISR+1)& (0+255),f,b
  8968  000364  D7FA               	bra	i2u786_47
  8969                           
  8970                           ;BORRAR.c: 310: DriverPin = 1;
  8971  000366  0E00               	movlw	0
  8972  000368  0100               	movlb	0	; () banked
  8973  00036A  6FC3               	movwf	(_DriverPin+1)& (0+255),b
  8974  00036C  0E01               	movlw	1
  8975  00036E  6FC2               	movwf	_DriverPin& (0+255),b
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;BORRAR.c: 311: pos = map(c, 0, 180, 110, 510);
  8979  000370  C0B5  F01E         	movff	_c,i2___fttol@f1
  8980  000374  C0B6  F01F         	movff	_c+1,i2___fttol@f1+1
  8981  000378  C0B7  F020         	movff	_c+2,i2___fttol@f1+2
  8982  00037C  ECDA  F01D         	call	i2___fttol	;wreg free
  8983  000380  C01E  F02D         	movff	?i2___fttol,i2map@x
  8984  000384  C01F  F02E         	movff	?i2___fttol+1,i2map@x+1
  8985  000388  0E00               	movlw	0
  8986  00038A  6E30               	movwf	(i2map@In_Min+1)^0,c
  8987  00038C  0E00               	movlw	0
  8988  00038E  6E2F               	movwf	i2map@In_Min^0,c
  8989  000390  0E00               	movlw	0
  8990  000392  6E32               	movwf	(i2map@In_Max+1)^0,c
  8991  000394  0EB4               	movlw	180
  8992  000396  6E31               	movwf	i2map@In_Max^0,c
  8993  000398  0E00               	movlw	0
  8994  00039A  6E34               	movwf	(i2map@Out_Min+1)^0,c
  8995  00039C  0E6E               	movlw	110
  8996  00039E  6E33               	movwf	i2map@Out_Min^0,c
  8997  0003A0  0E01               	movlw	1
  8998  0003A2  6E36               	movwf	(i2map@Out_Max+1)^0,c
  8999  0003A4  0EFE               	movlw	254
  9000  0003A6  6E35               	movwf	i2map@Out_Max^0,c
  9001  0003A8  EC47  F023         	call	i2_map	;wreg free
  9002  0003AC  C02D  F0C4         	movff	?i2_map,_pos
  9003  0003B0  C02E  F0C5         	movff	?i2_map+1,_pos+1
  9004                           
  9005                           ;BORRAR.c: 312: data2[2] = pos;
  9006  0003B4  C0C4  F0E2         	movff	_pos,_data2+2
  9007                           
  9008                           ;BORRAR.c: 313: data2[3] = pos >> 8;
  9009  0003B8  0100               	movlb	0	; () banked
  9010  0003BA  51C5               	movf	(_pos+1)& (0+255),w,b
  9011  0003BC  6FE3               	movwf	(_data2+3)& (0+255),b
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;BORRAR.c: 315: writeI2C(0x80, 0x06 + (4 * DriverPin), data2, 4);
  9015  0003BE  51C2               	movf	_DriverPin& (0+255),w,b
  9016  0003C0  0D04               	mullw	4
  9017  0003C2  50F3               	movf	243,w,c
  9018  0003C4  0F06               	addlw	6
  9019  0003C6  6E03               	movwf	i2writeI2C@Register^0,c
  9020  0003C8  0EE0               	movlw	low _data2
  9021  0003CA  6E04               	movwf	i2writeI2C@Data^0,c
  9022  0003CC  0E00               	movlw	0
  9023  0003CE  6E06               	movwf	(i2writeI2C@bytes+1)^0,c
  9024  0003D0  0E04               	movlw	4
  9025  0003D2  6E05               	movwf	i2writeI2C@bytes^0,c
  9026  0003D4  0E80               	movlw	128
  9027  0003D6  EC58  F022         	call	i2_writeI2C
  9028  0003DA                     i2l170:
  9029  0003DA  C069  FFF5         	movff	??_TMR1_ISR+9,tablat
  9030  0003DE  C068  FFF8         	movff	??_TMR1_ISR+8,tblptru
  9031  0003E2  C067  FFF7         	movff	??_TMR1_ISR+7,tblptrh
  9032  0003E6  C066  FFF6         	movff	??_TMR1_ISR+6,tblptrl
  9033  0003EA  C065  FFF4         	movff	??_TMR1_ISR+5,prodh
  9034  0003EE  C064  FFF3         	movff	??_TMR1_ISR+4,prodl
  9035  0003F2  C063  FFDA         	movff	??_TMR1_ISR+3,fsr2h
  9036  0003F6  C062  FFD9         	movff	??_TMR1_ISR+2,fsr2l
  9037  0003FA  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9038  0003FC  0011               	retfie		f
  9039  0003FE                     __end_of_TMR1_ISR:
  9040                           	callstack 0
  9041                           
  9042 ;; *************** function i2_writeI2C *****************
  9043 ;; Defined at:
  9044 ;;		line 361 in file "BORRAR.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;  Address         1    wreg     unsigned char 
  9047 ;;  Register        1    2[COMRAM] unsigned char 
  9048 ;;  Data            1    3[COMRAM] PTR unsigned char 
  9049 ;;		 -> data2(4), 
  9050 ;;  bytes           2    4[COMRAM] int 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  Address         1    8[COMRAM] unsigned char 
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      void 
  9055 ;; Registers used:
  9056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : 3F/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9064 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9065 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;Total ram usage:        7 bytes
  9067 ;; Hardware stack levels used: 1
  9068 ;; Hardware stack levels required when called: 2
  9069 ;; This function calls:
  9070 ;;		i2_sendI2C
  9071 ;;		i2_startI2C
  9072 ;;		i2_stopI2C
  9073 ;; This function is called by:
  9074 ;;		_TMR1_ISR
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text41
  9079  0044B0                     __ptext41:
  9080                           	callstack 0
  9081  0044B0                     i2_writeI2C:
  9082                           	callstack 22
  9083                           
  9084                           ;incstack = 0
  9085                           ;i2writeI2C@Address stored from wreg
  9086  0044B0  6E09               	movwf	i2writeI2C@Address^0,c
  9087                           
  9088                           ;BORRAR.c: 362: startI2C();
  9089  0044B2  EC69  F025         	call	i2_startI2C	;wreg free
  9090                           
  9091                           ;BORRAR.c: 363: sendI2C(Address);
  9092  0044B6  5009               	movf	i2writeI2C@Address^0,w,c
  9093  0044B8  EC53  F025         	call	i2_sendI2C
  9094                           
  9095                           ;BORRAR.c: 364: sendI2C(Register);
  9096  0044BC  5003               	movf	i2writeI2C@Register^0,w,c
  9097  0044BE  EC53  F025         	call	i2_sendI2C
  9098                           
  9099                           ;BORRAR.c: 365: for (i = 0; i < bytes; i++) {
  9100  0044C2  0E00               	movlw	0
  9101  0044C4  0100               	movlb	0	; () banked
  9102  0044C6  6FC9               	movwf	(_i+1)& (0+255),b
  9103  0044C8  0E00               	movlw	0
  9104  0044CA  6FC8               	movwf	_i& (0+255),b
  9105  0044CC  D00A               	goto	i2l5198
  9106  0044CE                     i2l5192:
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;BORRAR.c: 366: sendI2C(*Data);
  9110  0044CE  5004               	movf	i2writeI2C@Data^0,w,c
  9111  0044D0  6ED9               	movwf	fsr2l,c
  9112  0044D2  6ADA               	clrf	fsr2h,c
  9113  0044D4  50DF               	movf	indf2,w,c
  9114  0044D6  EC53  F025         	call	i2_sendI2C
  9115                           
  9116                           ;BORRAR.c: 367: Data++;
  9117  0044DA  2A04               	incf	i2writeI2C@Data^0,f,c
  9118  0044DC  0100               	movlb	0	; () banked
  9119  0044DE  4BC8               	infsnz	_i& (0+255),f,b
  9120  0044E0  2BC9               	incf	(_i+1)& (0+255),f,b
  9121  0044E2                     i2l5198:
  9122                           
  9123                           ; BSR set to: 0
  9124  0044E2  5005               	movf	i2writeI2C@bytes^0,w,c
  9125  0044E4  5DC8               	subwf	_i& (0+255),w,b
  9126  0044E6  5006               	movf	(i2writeI2C@bytes+1)^0,w,c
  9127  0044E8  59C9               	subwfb	(_i+1)& (0+255),w,b
  9128  0044EA  A0D8               	btfss	status,0,c
  9129  0044EC  D7F0               	goto	i2l5192
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;BORRAR.c: 368: };BORRAR.c: 369: stopI2C();
  9133  0044EE  EC65  F025         	call	i2_stopI2C	;wreg free
  9134                           
  9135                           ;BORRAR.c: 370: _delay((unsigned long)((100)*(16000000/4000.0)));
  9136  0044F2  0E03               	movlw	3
  9137  0044F4  6E08               	movwf	(??i2_writeI2C+1)^0,c
  9138  0044F6  0E08               	movlw	8
  9139  0044F8  6E07               	movwf	??i2_writeI2C^0,c
  9140  0044FA  0E77               	movlw	119
  9141  0044FC                     i2u787_47:
  9142  0044FC  2EE8               	decfsz	wreg,f,c
  9143  0044FE  D7FE               	bra	i2u787_47
  9144  004500  2E07               	decfsz	??i2_writeI2C^0,f,c
  9145  004502  D7FC               	bra	i2u787_47
  9146  004504  2E08               	decfsz	(??i2_writeI2C+1)^0,f,c
  9147  004506  D7FA               	bra	i2u787_47
  9148  004508  F000               	nop	
  9149  00450A  0012               	return		;funcret
  9150  00450C                     __end_ofi2_writeI2C:
  9151                           	callstack 0
  9152                           
  9153 ;; *************** function i2_stopI2C *****************
  9154 ;; Defined at:
  9155 ;;		line 387 in file "BORRAR.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;		None
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;		None
  9160 ;; Return value:  Size  Location     Type
  9161 ;;                  1    wreg      void 
  9162 ;; Registers used:
  9163 ;;		wreg, status,2, status,0, cstack
  9164 ;; Tracked objects:
  9165 ;;		On entry : 3F/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;Total ram usage:        0 bytes
  9174 ;; Hardware stack levels used: 1
  9175 ;; Hardware stack levels required when called: 1
  9176 ;; This function calls:
  9177 ;;		i2_readyI2C
  9178 ;; This function is called by:
  9179 ;;		i2_writeI2C
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           	psect	text42
  9184  004ACA                     __ptext42:
  9185                           	callstack 0
  9186  004ACA                     i2_stopI2C:
  9187                           	callstack 22
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;BORRAR.c: 388: readyI2C();
  9191                           
  9192                           ;incstack = 0
  9193  004ACA  EC44  F025         	call	i2_readyI2C	;wreg free
  9194                           
  9195                           ;BORRAR.c: 389: SSP1CON2bits.PEN = 1;
  9196  004ACE  84C5               	bsf	197,2,c	;volatile
  9197  004AD0  0012               	return		;funcret
  9198  004AD2                     __end_ofi2_stopI2C:
  9199                           	callstack 0
  9200                           
  9201 ;; *************** function i2_startI2C *****************
  9202 ;; Defined at:
  9203 ;;		line 373 in file "BORRAR.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;		None
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;                  1    wreg      void 
  9210 ;; Registers used:
  9211 ;;		wreg, status,2, status,0, cstack
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;Total ram usage:        0 bytes
  9222 ;; Hardware stack levels used: 1
  9223 ;; Hardware stack levels required when called: 1
  9224 ;; This function calls:
  9225 ;;		i2_readyI2C
  9226 ;; This function is called by:
  9227 ;;		i2_writeI2C
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           	psect	text43
  9232  004AD2                     __ptext43:
  9233                           	callstack 0
  9234  004AD2                     i2_startI2C:
  9235                           	callstack 22
  9236                           
  9237                           ;BORRAR.c: 374: readyI2C();
  9238                           
  9239                           ;incstack = 0
  9240  004AD2  EC44  F025         	call	i2_readyI2C	;wreg free
  9241                           
  9242                           ;BORRAR.c: 375: SSP1CON2bits.SEN = 1;
  9243  004AD6  80C5               	bsf	197,0,c	;volatile
  9244  004AD8  0012               	return		;funcret
  9245  004ADA                     __end_ofi2_startI2C:
  9246                           	callstack 0
  9247                           
  9248 ;; *************** function i2_sendI2C *****************
  9249 ;; Defined at:
  9250 ;;		line 382 in file "BORRAR.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;  data            1    wreg     unsigned char 
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;  data            1    1[COMRAM] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  1    wreg      void 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:        1 bytes
  9269 ;; Hardware stack levels used: 1
  9270 ;; Hardware stack levels required when called: 1
  9271 ;; This function calls:
  9272 ;;		i2_readyI2C
  9273 ;; This function is called by:
  9274 ;;		i2_writeI2C
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text44
  9279  004AA6                     __ptext44:
  9280                           	callstack 0
  9281  004AA6                     i2_sendI2C:
  9282                           	callstack 22
  9283                           
  9284                           ;incstack = 0
  9285                           ;i2sendI2C@data stored from wreg
  9286  004AA6  6E02               	movwf	i2sendI2C@data^0,c
  9287                           
  9288                           ;BORRAR.c: 383: readyI2C();
  9289  004AA8  EC44  F025         	call	i2_readyI2C	;wreg free
  9290                           
  9291                           ;BORRAR.c: 384: SSP1BUF = data;
  9292  004AAC  C002  FFC9         	movff	i2sendI2C@data,4041	;volatile
  9293  004AB0  0012               	return		;funcret
  9294  004AB2                     __end_ofi2_sendI2C:
  9295                           	callstack 0
  9296                           
  9297 ;; *************** function i2_readyI2C *****************
  9298 ;; Defined at:
  9299 ;;		line 378 in file "BORRAR.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      void 
  9306 ;; Registers used:
  9307 ;;		wreg, status,2, status,0
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;Total ram usage:        1 bytes
  9318 ;; Hardware stack levels used: 1
  9319 ;; This function calls:
  9320 ;;		Nothing
  9321 ;; This function is called by:
  9322 ;;		i2_startI2C
  9323 ;;		i2_sendI2C
  9324 ;;		i2_stopI2C
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           	psect	text45
  9329  004A88                     __ptext45:
  9330                           	callstack 0
  9331  004A88                     i2_readyI2C:
  9332                           	callstack 22
  9333                           
  9334                           ;BORRAR.c: 379: while ((SSP1CON2 & 0x1F) || (SSP1STAT & 0x04));
  9335                           
  9336                           ;incstack = 0
  9337  004A88  CFC5 F001          	movff	4037,??i2_readyI2C	;volatile
  9338  004A8C  0E1F               	movlw	31
  9339  004A8E  1601               	andwf	??i2_readyI2C^0,f,c
  9340  004A90  A4D8               	btfss	status,2,c
  9341  004A92  D7FA               	goto	__ptext45
  9342  004A94  A4C7               	btfss	199,2,c	;volatile
  9343  004A96  0012               	return	
  9344  004A98  D7F7               	goto	__ptext45
  9345  004A9A                     __end_ofi2_readyI2C:
  9346                           	callstack 0
  9347                           
  9348 ;; *************** function i2_sprintf *****************
  9349 ;; Defined at:
  9350 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;  sp              1   61[COMRAM] PTR unsigned char 
  9353 ;;		 -> text(20), 
  9354 ;;  f               1   62[COMRAM] PTR const unsigned char 
  9355 ;;		 -> STR_6(13), STR_5(13), STR_4(13), STR_3(16), 
  9356 ;;		 -> STR_2(13), STR_1(16), 
  9357 ;; Auto vars:     Size  Location     Type
  9358 ;;  val             4   84[COMRAM] unsigned long 
  9359 ;;  tmpval          4   80[COMRAM] struct .
  9360 ;;  fval            3   90[COMRAM] struct .
  9361 ;;  cp              3    0        PTR const unsigned char 
  9362 ;;  prec            2   88[COMRAM] int 
  9363 ;;  eexp            2   78[COMRAM] int 
  9364 ;;  flag            2   76[COMRAM] unsigned short 
  9365 ;;  len             2    0        unsigned int 
  9366 ;;  width           2    0        int 
  9367 ;;  c               1   93[COMRAM] unsigned char 
  9368 ;;  ap              1   75[COMRAM] PTR void [1]
  9369 ;;		 -> ?i2_sprintf(2), ?_sprintf(2), 
  9370 ;;  d               1    0        unsigned char 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  2   61[COMRAM] int 
  9373 ;; Registers used:
  9374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9380 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;Total ram usage:       33 bytes
  9385 ;; Hardware stack levels used: 1
  9386 ;; Hardware stack levels required when called: 3
  9387 ;; This function calls:
  9388 ;;		i2___awdiv
  9389 ;;		i2___ftadd
  9390 ;;		i2___ftge
  9391 ;;		i2___ftmul
  9392 ;;		i2___ftneg
  9393 ;;		i2___ftsub
  9394 ;;		i2___fttol
  9395 ;;		i2___lldiv
  9396 ;;		i2___llmod
  9397 ;;		i2___lltoft
  9398 ;;		i2___wmul
  9399 ;;		i2__div_to_l_
  9400 ;;		i2__tdiv_to_l_
  9401 ;;		i2_fround
  9402 ;;		i2_isdigit
  9403 ;;		i2_scale
  9404 ;; This function is called by:
  9405 ;;		_TMR1_ISR
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           	psect	text46
  9410  0018EA                     __ptext46:
  9411                           	callstack 0
  9412  0018EA                     i2_sprintf:
  9413                           	callstack 21
  9414                           
  9415                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  9416                           
  9417                           ;incstack = 0
  9418  0018EA  0E40               	movlw	low (?i2_sprintf+2)
  9419  0018EC  6E4C               	movwf	i2sprintf@ap^0,c
  9420                           
  9421                           ;doprnt.c: 553: while((c = *f++)) {
  9422  0018EE  D3C9               	goto	i2u602_40
  9423  0018F0                     i2l5210:
  9424                           
  9425                           ;doprnt.c: 555: if(c != '%')
  9426  0018F0  0E25               	movlw	37
  9427  0018F2  185E               	xorwf	i2sprintf@c^0,w,c
  9428  0018F4  B4D8               	btfsc	status,2,c
  9429  0018F6  D007               	goto	i2l5216
  9430                           
  9431                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  9432  0018F8  503E               	movf	i2sprintf@sp^0,w,c
  9433  0018FA  6ED9               	movwf	fsr2l,c
  9434  0018FC  6ADA               	clrf	fsr2h,c
  9435  0018FE  C05E  FFDF         	movff	i2sprintf@c,indf2
  9436  001902  2A3E               	incf	i2sprintf@sp^0,f,c
  9437                           
  9438                           ;doprnt.c: 559: continue;
  9439  001904  D3BE               	goto	i2u602_40
  9440  001906                     i2l5216:
  9441                           
  9442                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  9443  001906  0E00               	movlw	0
  9444  001908  6E4E               	movwf	(i2sprintf@flag+1)^0,c
  9445  00190A  0E00               	movlw	0
  9446  00190C  6E4D               	movwf	i2sprintf@flag^0,c
  9447                           
  9448                           ;doprnt.c: 628: if(*f == '.') {
  9449  00190E  C03F  FFF6         	movff	i2sprintf@f,tblptrl
  9450  001912                     	if	1	;There is more than 1 active tblptr byte
  9451  001912  0E10               	movlw	high __smallconst
  9452  001914  6EF7               	movwf	tblptrh,c
  9453  001916                     	endif
  9454  001916                     	if	0	;tblptru may be non-zero
  9455  001916                     	endif
  9456  001916                     	if	0	;tblptru may be non-zero
  9457  001916                     	endif
  9458  001916  0008               	tblrd		*
  9459  001918  50F5               	movf	tablat,w,c
  9460  00191A  0A2E               	xorlw	46
  9461  00191C  A4D8               	btfss	status,2,c
  9462  00191E  D035               	goto	i2l5232
  9463                           
  9464                           ;doprnt.c: 629: flag |= 0x4000;
  9465  001920  8C4E               	bsf	(i2sprintf@flag+1)^0,6,c
  9466                           
  9467                           ;doprnt.c: 630: f++;
  9468  001922  2A3F               	incf	i2sprintf@f^0,f,c
  9469                           
  9470                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  9471  001924  0E00               	movlw	0
  9472  001926  6E5A               	movwf	(i2sprintf@prec+1)^0,c
  9473  001928  0E00               	movlw	0
  9474  00192A  6E59               	movwf	i2sprintf@prec^0,c
  9475                           
  9476                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  9477  00192C  D023               	goto	i2l5230
  9478  00192E                     i2l5224:
  9479                           
  9480                           ;doprnt.c: 647: prec *= 10;
  9481  00192E  C059  F00F         	movff	i2sprintf@prec,i2___wmul@multiplier
  9482  001932  C05A  F010         	movff	i2sprintf@prec+1,i2___wmul@multiplier+1
  9483  001936  0E00               	movlw	0
  9484  001938  6E12               	movwf	(i2___wmul@multiplicand+1)^0,c
  9485  00193A  0E0A               	movlw	10
  9486  00193C  6E11               	movwf	i2___wmul@multiplicand^0,c
  9487  00193E  ECA2  F024         	call	i2___wmul	;wreg free
  9488  001942  C00F  F059         	movff	?i2___wmul,i2sprintf@prec
  9489  001946  C010  F05A         	movff	?i2___wmul+1,i2sprintf@prec+1
  9490                           
  9491                           ;doprnt.c: 648: prec += *f++ - '0';
  9492  00194A  0ED0               	movlw	208
  9493  00194C  6E43               	movwf	??i2_sprintf^0,c
  9494  00194E  0EFF               	movlw	255
  9495  001950  6E44               	movwf	(??i2_sprintf+1)^0,c
  9496  001952  C03F  FFF6         	movff	i2sprintf@f,tblptrl
  9497  001956                     	if	1	;There is more than 1 active tblptr byte
  9498  001956  0E10               	movlw	high __smallconst
  9499  001958  6EF7               	movwf	tblptrh,c
  9500  00195A                     	endif
  9501  00195A                     	if	0	;tblptru may be non-zero
  9502  00195A                     	endif
  9503  00195A                     	if	0	;tblptru may be non-zero
  9504  00195A                     	endif
  9505  00195A  0008               	tblrd		*
  9506  00195C  50F5               	movf	tablat,w,c
  9507  00195E  6E45               	movwf	(??i2_sprintf+2)^0,c
  9508  001960  6A46               	clrf	(??i2_sprintf+3)^0,c
  9509  001962  5043               	movf	??i2_sprintf^0,w,c
  9510  001964  2645               	addwf	(??i2_sprintf+2)^0,f,c
  9511  001966  5044               	movf	(??i2_sprintf+1)^0,w,c
  9512  001968  2246               	addwfc	(??i2_sprintf+3)^0,f,c
  9513  00196A  5045               	movf	(??i2_sprintf+2)^0,w,c
  9514  00196C  2659               	addwf	i2sprintf@prec^0,f,c
  9515  00196E  5046               	movf	(??i2_sprintf+3)^0,w,c
  9516  001970  225A               	addwfc	(i2sprintf@prec+1)^0,f,c
  9517  001972  2A3F               	incf	i2sprintf@f^0,f,c
  9518  001974                     i2l5230:
  9519  001974  C03F  FFF6         	movff	i2sprintf@f,tblptrl
  9520  001978                     	if	1	;There is more than 1 active tblptr byte
  9521  001978  0E10               	movlw	high __smallconst
  9522  00197A  6EF7               	movwf	tblptrh,c
  9523  00197C                     	endif
  9524  00197C                     	if	0	;tblptru may be non-zero
  9525  00197C                     	endif
  9526  00197C                     	if	0	;tblptru may be non-zero
  9527  00197C                     	endif
  9528  00197C  0008               	tblrd		*
  9529  00197E  50F5               	movf	tablat,w,c
  9530  001980  ECFA  F024         	call	i2_isdigit
  9531  001984  A0D8               	btfss	status,0,c
  9532  001986  D009               	goto	i2l5240
  9533  001988  D7D2               	goto	i2l5224
  9534  00198A                     i2l5232:
  9535                           
  9536                           ;doprnt.c: 652: prec = 0;
  9537  00198A  0E00               	movlw	0
  9538  00198C  6E5A               	movwf	(i2sprintf@prec+1)^0,c
  9539  00198E  0E00               	movlw	0
  9540  001990  6E59               	movwf	i2sprintf@prec^0,c
  9541                           
  9542                           ;doprnt.c: 654: flag |= 0x1000;
  9543  001992  884E               	bsf	(i2sprintf@flag+1)^0,4,c
  9544  001994  D002               	goto	i2l5240
  9545  001996                     i2l5236:
  9546                           
  9547                           ;doprnt.c: 689: flag |= 0x400;
  9548  001996  844E               	bsf	(i2sprintf@flag+1)^0,2,c
  9549                           
  9550                           ;doprnt.c: 690: break;
  9551  001998  D017               	goto	i2l5242
  9552  00199A                     i2l5240:
  9553  00199A  2A3F               	incf	i2sprintf@f^0,f,c
  9554  00199C  043F               	decf	i2sprintf@f^0,w,c
  9555  00199E  6E43               	movwf	??i2_sprintf^0,c
  9556  0019A0  C043  FFF6         	movff	??i2_sprintf,tblptrl
  9557  0019A4                     	if	1	;There is more than 1 active tblptr byte
  9558  0019A4  0E10               	movlw	high __smallconst
  9559  0019A6  6EF7               	movwf	tblptrh,c
  9560  0019A8                     	endif
  9561  0019A8                     	if	0	;tblptru may be non-zero
  9562  0019A8                     	endif
  9563  0019A8                     	if	0	;tblptru may be non-zero
  9564  0019A8                     	endif
  9565  0019A8  0008               	tblrd		*
  9566  0019AA  CFF5 F05E          	movff	tablat,i2sprintf@c
  9567  0019AE  505E               	movf	i2sprintf@c^0,w,c
  9568                           
  9569                           ; Switch size 1, requested type "simple"
  9570                           ; Number of cases is 4, Range of values is 0 to 105
  9571                           ; switch strategies available:
  9572                           ; Name         Instructions Cycles
  9573                           ; simple_byte           13     7 (average)
  9574                           ;	Chosen strategy is simple_byte
  9575  0019B0  0A00               	xorlw	0	; case 0
  9576  0019B2  B4D8               	btfsc	status,2,c
  9577  0019B4  D373               	goto	i2u603_40
  9578  0019B6  0A64               	xorlw	100	; case 100
  9579  0019B8  B4D8               	btfsc	status,2,c
  9580  0019BA  D006               	goto	i2l5242
  9581  0019BC  0A02               	xorlw	2	; case 102
  9582  0019BE  B4D8               	btfsc	status,2,c
  9583  0019C0  D7EA               	goto	i2l5236
  9584  0019C2  0A0F               	xorlw	15	; case 105
  9585  0019C4  A4D8               	btfss	status,2,c
  9586  0019C6  D35D               	goto	i2u602_40
  9587  0019C8                     i2l5242:
  9588                           
  9589                           ;doprnt.c: 851: if(flag & (0x700)) {
  9590  0019C8  0E07               	movlw	7
  9591  0019CA  144E               	andwf	(i2sprintf@flag+1)^0,w,c
  9592  0019CC  B4D8               	btfsc	status,2,c
  9593  0019CE  D2A9               	goto	i2l5390
  9594                           
  9595                           ;doprnt.c: 853: if(flag & 0x1000)
  9596  0019D0  A84E               	btfss	(i2sprintf@flag+1)^0,4,c
  9597  0019D2  D004               	goto	i2l5248
  9598                           
  9599                           ;doprnt.c: 855: prec = 6;
  9600  0019D4  0E00               	movlw	0
  9601  0019D6  6E5A               	movwf	(i2sprintf@prec+1)^0,c
  9602  0019D8  0E06               	movlw	6
  9603  0019DA  6E59               	movwf	i2sprintf@prec^0,c
  9604  0019DC                     i2l5248:
  9605                           
  9606                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  9607  0019DC  504C               	movf	i2sprintf@ap^0,w,c
  9608  0019DE  6ED9               	movwf	fsr2l,c
  9609  0019E0  6ADA               	clrf	fsr2h,c
  9610  0019E2  CFDE F05B          	movff	postinc2,i2sprintf@fval
  9611  0019E6  CFDE F05C          	movff	postinc2,i2sprintf@fval+1
  9612  0019EA  CFDD F05D          	movff	postdec2,i2sprintf@fval+2
  9613  0019EE  0E03               	movlw	3
  9614  0019F0  264C               	addwf	i2sprintf@ap^0,f,c
  9615                           
  9616                           ;doprnt.c: 857: if(fval < 0.0) {
  9617  0019F2  AE5D               	btfss	(i2sprintf@fval+2)^0,7,c
  9618  0019F4  D010               	goto	i2l5258
  9619                           
  9620                           ;doprnt.c: 858: fval = -fval;
  9621  0019F6  C05B  F001         	movff	i2sprintf@fval,i2___ftneg@f1
  9622  0019FA  C05C  F002         	movff	i2sprintf@fval+1,i2___ftneg@f1+1
  9623  0019FE  C05D  F003         	movff	i2sprintf@fval+2,i2___ftneg@f1+2
  9624  001A02  ECB5  F024         	call	i2___ftneg	;wreg free
  9625  001A06  C001  F05B         	movff	?i2___ftneg,i2sprintf@fval
  9626  001A0A  C002  F05C         	movff	?i2___ftneg+1,i2sprintf@fval+1
  9627  001A0E  C003  F05D         	movff	?i2___ftneg+2,i2sprintf@fval+2
  9628                           
  9629                           ;doprnt.c: 859: flag |= 0x03;
  9630  001A12  0E03               	movlw	3
  9631  001A14  124D               	iorwf	i2sprintf@flag^0,f,c
  9632  001A16                     i2l5258:
  9633                           
  9634                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  9635  001A16  0E00               	movlw	0
  9636  001A18  6E50               	movwf	(i2sprintf@eexp+1)^0,c
  9637  001A1A  0E00               	movlw	0
  9638  001A1C  6E4F               	movwf	i2sprintf@eexp^0,c
  9639                           
  9640                           ;doprnt.c: 862: if( fval!=0) {
  9641  001A1E  505B               	movf	i2sprintf@fval^0,w,c
  9642  001A20  105C               	iorwf	(i2sprintf@fval+1)^0,w,c
  9643  001A22  105D               	iorwf	(i2sprintf@fval+2)^0,w,c
  9644  001A24  B4D8               	btfsc	status,2,c
  9645  001A26  D083               	goto	i2l5286
  9646                           
  9647                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  9648  001A28  0E82               	movlw	130
  9649  001A2A  6E43               	movwf	??i2_sprintf^0,c
  9650  001A2C  0EFF               	movlw	255
  9651  001A2E  6E44               	movwf	(??i2_sprintf+1)^0,c
  9652  001A30  C05B  F045         	movff	i2sprintf@fval,??i2_sprintf+2
  9653  001A34  C05C  F046         	movff	i2sprintf@fval+1,??i2_sprintf+3
  9654  001A38  C05D  F047         	movff	i2sprintf@fval+2,??i2_sprintf+4
  9655  001A3C  C05E  F048         	movff	i2sprintf@fval+3,??i2_sprintf+5
  9656  001A40  0E10               	movlw	16
  9657  001A42  D005               	goto	i2u575_40
  9658  001A44                     i2u575_45:
  9659  001A44  90D8               	bcf	status,0,c
  9660  001A46  3248               	rrcf	(??i2_sprintf+5)^0,f,c
  9661  001A48  3247               	rrcf	(??i2_sprintf+4)^0,f,c
  9662  001A4A  3246               	rrcf	(??i2_sprintf+3)^0,f,c
  9663  001A4C  3245               	rrcf	(??i2_sprintf+2)^0,f,c
  9664  001A4E                     i2u575_40:
  9665  001A4E  2EE8               	decfsz	wreg,f,c
  9666  001A50  D7F9               	goto	i2u575_45
  9667  001A52  5045               	movf	(??i2_sprintf+2)^0,w,c
  9668  001A54  2443               	addwf	??i2_sprintf^0,w,c
  9669  001A56  6E4F               	movwf	i2sprintf@eexp^0,c
  9670  001A58  0E00               	movlw	0
  9671  001A5A  2044               	addwfc	(??i2_sprintf+1)^0,w,c
  9672  001A5C  6E50               	movwf	(i2sprintf@eexp+1)^0,c
  9673                           
  9674                           ;doprnt.c: 864: eexp--;
  9675  001A5E  064F               	decf	i2sprintf@eexp^0,f,c
  9676  001A60  A0D8               	btfss	status,0,c
  9677  001A62  0650               	decf	(i2sprintf@eexp+1)^0,f,c
  9678                           
  9679                           ;doprnt.c: 865: eexp *= 3;
  9680  001A64  C04F  F00F         	movff	i2sprintf@eexp,i2___wmul@multiplier
  9681  001A68  C050  F010         	movff	i2sprintf@eexp+1,i2___wmul@multiplier+1
  9682  001A6C  0E00               	movlw	0
  9683  001A6E  6E12               	movwf	(i2___wmul@multiplicand+1)^0,c
  9684  001A70  0E03               	movlw	3
  9685  001A72  6E11               	movwf	i2___wmul@multiplicand^0,c
  9686  001A74  ECA2  F024         	call	i2___wmul	;wreg free
  9687  001A78  C00F  F04F         	movff	?i2___wmul,i2sprintf@eexp
  9688  001A7C  C010  F050         	movff	?i2___wmul+1,i2sprintf@eexp+1
  9689                           
  9690                           ;doprnt.c: 866: eexp /= 10;
  9691  001A80  C04F  F007         	movff	i2sprintf@eexp,i2___awdiv@dividend
  9692  001A84  C050  F008         	movff	i2sprintf@eexp+1,i2___awdiv@dividend+1
  9693  001A88  0E00               	movlw	0
  9694  001A8A  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
  9695  001A8C  0E0A               	movlw	10
  9696  001A8E  6E09               	movwf	i2___awdiv@divisor^0,c
  9697  001A90  ECDB  F01F         	call	i2___awdiv	;wreg free
  9698  001A94  C007  F04F         	movff	?i2___awdiv,i2sprintf@eexp
  9699  001A98  C008  F050         	movff	?i2___awdiv+1,i2sprintf@eexp+1
  9700                           
  9701                           ;doprnt.c: 867: if(eexp < 0)
  9702  001A9C  AE50               	btfss	(i2sprintf@eexp+1)^0,7,c
  9703  001A9E  D003               	goto	i2l5274
  9704                           
  9705                           ;doprnt.c: 868: eexp--;
  9706  001AA0  064F               	decf	i2sprintf@eexp^0,f,c
  9707  001AA2  A0D8               	btfss	status,0,c
  9708  001AA4  0650               	decf	(i2sprintf@eexp+1)^0,f,c
  9709  001AA6                     i2l5274:
  9710                           
  9711                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  9712  001AA6  504F               	movf	i2sprintf@eexp^0,w,c
  9713  001AA8  0800               	sublw	0
  9714  001AAA  EC22  F012         	call	i2_scale
  9715  001AAE  C01E  F051         	movff	?i2_scale,i2sprintf@tmpval
  9716  001AB2  C01F  F052         	movff	?i2_scale+1,i2sprintf@tmpval+1
  9717  001AB6  C020  F053         	movff	?i2_scale+2,i2sprintf@tmpval+2
  9718                           
  9719                           ;doprnt.c: 873: tmpval.integ *= fval;
  9720  001ABA  C051  F00F         	movff	i2sprintf@tmpval,i2___ftmul@f1
  9721  001ABE  C052  F010         	movff	i2sprintf@tmpval+1,i2___ftmul@f1+1
  9722  001AC2  C053  F011         	movff	i2sprintf@tmpval+2,i2___ftmul@f1+2
  9723  001AC6  C05B  F012         	movff	i2sprintf@fval,i2___ftmul@f2
  9724  001ACA  C05C  F013         	movff	i2sprintf@fval+1,i2___ftmul@f2+1
  9725  001ACE  C05D  F014         	movff	i2sprintf@fval+2,i2___ftmul@f2+2
  9726  001AD2  EC96  F01B         	call	i2___ftmul	;wreg free
  9727  001AD6  C00F  F051         	movff	?i2___ftmul,i2sprintf@tmpval
  9728  001ADA  C010  F052         	movff	?i2___ftmul+1,i2sprintf@tmpval+1
  9729  001ADE  C011  F053         	movff	?i2___ftmul+2,i2sprintf@tmpval+2
  9730                           
  9731                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  9732  001AE2  C051  F001         	movff	i2sprintf@tmpval,i2___ftge@ff1
  9733  001AE6  C052  F002         	movff	i2sprintf@tmpval+1,i2___ftge@ff1+1
  9734  001AEA  C053  F003         	movff	i2sprintf@tmpval+2,i2___ftge@ff1+2
  9735  001AEE  0E00               	movlw	0
  9736  001AF0  6E04               	movwf	i2___ftge@ff2^0,c
  9737  001AF2  0E80               	movlw	128
  9738  001AF4  6E05               	movwf	(i2___ftge@ff2+1)^0,c
  9739  001AF6  0E3F               	movlw	63
  9740  001AF8  6E06               	movwf	(i2___ftge@ff2+2)^0,c
  9741  001AFA  EC1A  F021         	call	i2___ftge	;wreg free
  9742  001AFE  B0D8               	btfsc	status,0,c
  9743  001B00  D004               	goto	i2l5282
  9744                           
  9745                           ;doprnt.c: 875: eexp--;
  9746  001B02  064F               	decf	i2sprintf@eexp^0,f,c
  9747  001B04  A0D8               	btfss	status,0,c
  9748  001B06  0650               	decf	(i2sprintf@eexp+1)^0,f,c
  9749  001B08  D012               	goto	i2l5286
  9750  001B0A                     i2l5282:
  9751                           
  9752                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  9753  001B0A  C051  F001         	movff	i2sprintf@tmpval,i2___ftge@ff1
  9754  001B0E  C052  F002         	movff	i2sprintf@tmpval+1,i2___ftge@ff1+1
  9755  001B12  C053  F003         	movff	i2sprintf@tmpval+2,i2___ftge@ff1+2
  9756  001B16  0E00               	movlw	0
  9757  001B18  6E04               	movwf	i2___ftge@ff2^0,c
  9758  001B1A  0E20               	movlw	32
  9759  001B1C  6E05               	movwf	(i2___ftge@ff2+1)^0,c
  9760  001B1E  0E41               	movlw	65
  9761  001B20  6E06               	movwf	(i2___ftge@ff2+2)^0,c
  9762  001B22  EC1A  F021         	call	i2___ftge	;wreg free
  9763  001B26  A0D8               	btfss	status,0,c
  9764  001B28  D002               	goto	i2l5286
  9765                           
  9766                           ;doprnt.c: 877: eexp++;
  9767  001B2A  4A4F               	infsnz	i2sprintf@eexp^0,f,c
  9768  001B2C  2A50               	incf	(i2sprintf@eexp+1)^0,f,c
  9769  001B2E                     i2l5286:
  9770                           
  9771                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  9772  001B2E  BE5A               	btfsc	(i2sprintf@prec+1)^0,7,c
  9773  001B30  D006               	goto	i2u579_40
  9774  001B32  505A               	movf	(i2sprintf@prec+1)^0,w,c
  9775  001B34  E11B               	bnz	i2l5290
  9776  001B36  0E0D               	movlw	13
  9777  001B38  5C59               	subwf	i2sprintf@prec^0,w,c
  9778  001B3A  B0D8               	btfsc	status,0,c
  9779  001B3C  D017               	goto	i2l5290
  9780  001B3E                     i2u579_40:
  9781                           
  9782                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  9783  001B3E  C05B  F02C         	movff	i2sprintf@fval,i2___ftadd@f1
  9784  001B42  C05C  F02D         	movff	i2sprintf@fval+1,i2___ftadd@f1+1
  9785  001B46  C05D  F02E         	movff	i2sprintf@fval+2,i2___ftadd@f1+2
  9786  001B4A  5059               	movf	i2sprintf@prec^0,w,c
  9787  001B4C  EC46  F016         	call	i2_fround
  9788  001B50  C01E  F02F         	movff	?i2_fround,i2___ftadd@f2
  9789  001B54  C01F  F030         	movff	?i2_fround+1,i2___ftadd@f2+1
  9790  001B58  C020  F031         	movff	?i2_fround+2,i2___ftadd@f2+2
  9791  001B5C  EC08  F018         	call	i2___ftadd	;wreg free
  9792  001B60  C02C  F05B         	movff	?i2___ftadd,i2sprintf@fval
  9793  001B64  C02D  F05C         	movff	?i2___ftadd+1,i2sprintf@fval+1
  9794  001B68  C02E  F05D         	movff	?i2___ftadd+2,i2sprintf@fval+2
  9795  001B6C                     i2l5290:
  9796                           
  9797                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  9798  001B6C  BE50               	btfsc	(i2sprintf@eexp+1)^0,7,c
  9799  001B6E  D006               	goto	i2u580_40
  9800  001B70  5050               	movf	(i2sprintf@eexp+1)^0,w,c
  9801  001B72  E11E               	bnz	i2l5298
  9802  001B74  0E0A               	movlw	10
  9803  001B76  5C4F               	subwf	i2sprintf@eexp^0,w,c
  9804  001B78  B0D8               	btfsc	status,0,c
  9805  001B7A  D01A               	goto	i2u583_40
  9806  001B7C                     i2u580_40:
  9807  001B7C  505B               	movf	i2sprintf@fval^0,w,c
  9808  001B7E  105C               	iorwf	(i2sprintf@fval+1)^0,w,c
  9809  001B80  105D               	iorwf	(i2sprintf@fval+2)^0,w,c
  9810  001B82  B4D8               	btfsc	status,2,c
  9811  001B84  D051               	goto	i2l5312
  9812  001B86  C05B  F01E         	movff	i2sprintf@fval,i2___fttol@f1
  9813  001B8A  C05C  F01F         	movff	i2sprintf@fval+1,i2___fttol@f1+1
  9814  001B8E  C05D  F020         	movff	i2sprintf@fval+2,i2___fttol@f1+2
  9815  001B92  ECDA  F01D         	call	i2___fttol	;wreg free
  9816  001B96  501E               	movf	?i2___fttol^0,w,c
  9817  001B98  101F               	iorwf	(?i2___fttol+1)^0,w,c
  9818  001B9A  1020               	iorwf	(?i2___fttol+2)^0,w,c
  9819  001B9C  1021               	iorwf	(?i2___fttol+3)^0,w,c
  9820  001B9E  B4D8               	btfsc	status,2,c
  9821  001BA0  BE50               	btfsc	(i2sprintf@eexp+1)^0,7,c
  9822  001BA2  D042               	goto	i2l5312
  9823  001BA4  5050               	movf	(i2sprintf@eexp+1)^0,w,c
  9824  001BA6  E104               	bnz	i2u583_40
  9825  001BA8  0E02               	movlw	2
  9826  001BAA  5C4F               	subwf	i2sprintf@eexp^0,w,c
  9827  001BAC  A0D8               	btfss	status,0,c
  9828  001BAE  D03C               	goto	i2l5312
  9829  001BB0                     i2u583_40:
  9830  001BB0                     i2l5298:
  9831                           
  9832                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  9833  001BB0  C051  F001         	movff	i2sprintf@tmpval,i2___ftge@ff1
  9834  001BB4  C052  F002         	movff	i2sprintf@tmpval+1,i2___ftge@ff1+1
  9835  001BB8  C053  F003         	movff	i2sprintf@tmpval+2,i2___ftge@ff1+2
  9836  001BBC  0E70               	movlw	112
  9837  001BBE  6E04               	movwf	i2___ftge@ff2^0,c
  9838  001BC0  0E89               	movlw	137
  9839  001BC2  6E05               	movwf	(i2___ftge@ff2+1)^0,c
  9840  001BC4  0E40               	movlw	64
  9841  001BC6  6E06               	movwf	(i2___ftge@ff2+2)^0,c
  9842  001BC8  EC1A  F021         	call	i2___ftge	;wreg free
  9843  001BCC  B0D8               	btfsc	status,0,c
  9844  001BCE  D002               	goto	i2l5302
  9845                           
  9846                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  9847  001BD0  0EF7               	movlw	247
  9848  001BD2  D001               	goto	L7
  9849  001BD4                     i2l5302:
  9850                           
  9851                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  9852  001BD4  0EF8               	movlw	248
  9853  001BD6                     L7:
  9854  001BD6  264F               	addwf	i2sprintf@eexp^0,f,c
  9855  001BD8  0EFF               	movlw	255
  9856  001BDA  2250               	addwfc	(i2sprintf@eexp+1)^0,f,c
  9857                           
  9858                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  9859  001BDC  504F               	movf	i2sprintf@eexp^0,w,c
  9860  001BDE  EC22  F012         	call	i2_scale
  9861  001BE2  C01E  F051         	movff	?i2_scale,i2sprintf@tmpval
  9862  001BE6  C01F  F052         	movff	?i2_scale+1,i2sprintf@tmpval+1
  9863  001BEA  C020  F053         	movff	?i2_scale+2,i2sprintf@tmpval+2
  9864                           
  9865                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  9866  001BEE  C05B  F001         	movff	i2sprintf@fval,i2__tdiv_to_l_@f1
  9867  001BF2  C05C  F002         	movff	i2sprintf@fval+1,i2__tdiv_to_l_@f1+1
  9868  001BF6  C05D  F003         	movff	i2sprintf@fval+2,i2__tdiv_to_l_@f1+2
  9869  001BFA  C051  F004         	movff	i2sprintf@tmpval,i2__tdiv_to_l_@f2
  9870  001BFE  C052  F005         	movff	i2sprintf@tmpval+1,i2__tdiv_to_l_@f2+1
  9871  001C02  C053  F006         	movff	i2sprintf@tmpval+2,i2__tdiv_to_l_@f2+2
  9872  001C06  EC22  F01A         	call	i2__tdiv_to_l_	;wreg free
  9873  001C0A  C001  F055         	movff	?i2__tdiv_to_l_,i2sprintf@val
  9874  001C0E  C002  F056         	movff	?i2__tdiv_to_l_+1,i2sprintf@val+1
  9875  001C12  C003  F057         	movff	?i2__tdiv_to_l_+2,i2sprintf@val+2
  9876  001C16  C004  F058         	movff	?i2__tdiv_to_l_+3,i2sprintf@val+3
  9877                           
  9878                           ;doprnt.c: 1155: fval = 0.0;
  9879  001C1A  0E00               	movlw	0
  9880  001C1C  6E5B               	movwf	i2sprintf@fval^0,c
  9881  001C1E  0E00               	movlw	0
  9882  001C20  6E5C               	movwf	(i2sprintf@fval+1)^0,c
  9883  001C22  0E00               	movlw	0
  9884  001C24  6E5D               	movwf	(i2sprintf@fval+2)^0,c
  9885                           
  9886                           ;doprnt.c: 1156: } else {
  9887  001C26  D032               	goto	i2l5316
  9888  001C28                     i2l5312:
  9889                           
  9890                           ;doprnt.c: 1157: val = (unsigned long)fval;
  9891  001C28  C05B  F01E         	movff	i2sprintf@fval,i2___fttol@f1
  9892  001C2C  C05C  F01F         	movff	i2sprintf@fval+1,i2___fttol@f1+1
  9893  001C30  C05D  F020         	movff	i2sprintf@fval+2,i2___fttol@f1+2
  9894  001C34  ECDA  F01D         	call	i2___fttol	;wreg free
  9895  001C38  C01E  F055         	movff	?i2___fttol,i2sprintf@val
  9896  001C3C  C01F  F056         	movff	?i2___fttol+1,i2sprintf@val+1
  9897  001C40  C020  F057         	movff	?i2___fttol+2,i2sprintf@val+2
  9898  001C44  C021  F058         	movff	?i2___fttol+3,i2sprintf@val+3
  9899                           
  9900                           ;doprnt.c: 1158: fval -= (double)val;
  9901  001C48  C05B  F038         	movff	i2sprintf@fval,i2___ftsub@f1
  9902  001C4C  C05C  F039         	movff	i2sprintf@fval+1,i2___ftsub@f1+1
  9903  001C50  C05D  F03A         	movff	i2sprintf@fval+2,i2___ftsub@f1+2
  9904  001C54  C055  F009         	movff	i2sprintf@val,i2___lltoft@c
  9905  001C58  C056  F00A         	movff	i2sprintf@val+1,i2___lltoft@c+1
  9906  001C5C  C057  F00B         	movff	i2sprintf@val+2,i2___lltoft@c+2
  9907  001C60  C058  F00C         	movff	i2sprintf@val+3,i2___lltoft@c+3
  9908  001C64  EC86  F022         	call	i2___lltoft	;wreg free
  9909  001C68  C009  F03B         	movff	?i2___lltoft,i2___ftsub@f2
  9910  001C6C  C00A  F03C         	movff	?i2___lltoft+1,i2___ftsub@f2+1
  9911  001C70  C00B  F03D         	movff	?i2___lltoft+2,i2___ftsub@f2+2
  9912  001C74  EC88  F023         	call	i2___ftsub	;wreg free
  9913  001C78  C038  F05B         	movff	?i2___ftsub,i2sprintf@fval
  9914  001C7C  C039  F05C         	movff	?i2___ftsub+1,i2sprintf@fval+1
  9915  001C80  C03A  F05D         	movff	?i2___ftsub+2,i2sprintf@fval+2
  9916                           
  9917                           ;doprnt.c: 1159: eexp = 0;
  9918  001C84  0E00               	movlw	0
  9919  001C86  6E50               	movwf	(i2sprintf@eexp+1)^0,c
  9920  001C88  0E00               	movlw	0
  9921  001C8A  6E4F               	movwf	i2sprintf@eexp^0,c
  9922  001C8C                     i2l5316:
  9923                           
  9924                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  9925  001C8C  0E01               	movlw	1
  9926  001C8E  6E5E               	movwf	i2sprintf@c^0,c
  9927  001C90                     i2l5322:
  9928                           
  9929                           ;doprnt.c: 1163: if(val < dpowers[c])
  9930  001C90  505E               	movf	i2sprintf@c^0,w,c
  9931  001C92  0D04               	mullw	4
  9932  001C94  50F3               	movf	243,w,c
  9933  001C96  0F4F               	addlw	low _dpowers
  9934  001C98  6E43               	movwf	??i2_sprintf^0,c
  9935  001C9A  C043  FFF6         	movff	??i2_sprintf,tblptrl
  9936  001C9E                     	if	1	;There is more than 1 active tblptr byte
  9937  001C9E  0E10               	movlw	high __smallconst
  9938  001CA0  6EF7               	movwf	tblptrh,c
  9939  001CA2                     	endif
  9940  001CA2                     	if	0	;tblptru may be non-zero
  9941  001CA2                     	endif
  9942  001CA2                     	if	0	;tblptru may be non-zero
  9943  001CA2                     	endif
  9944  001CA2  0009               	tblrd		*+
  9945  001CA4  50F5               	movf	tablat,w,c
  9946  001CA6  5C55               	subwf	i2sprintf@val^0,w,c
  9947  001CA8  0009               	tblrd		*+
  9948  001CAA  50F5               	movf	tablat,w,c
  9949  001CAC  5856               	subwfb	(i2sprintf@val+1)^0,w,c
  9950  001CAE  0009               	tblrd		*+
  9951  001CB0  50F5               	movf	tablat,w,c
  9952  001CB2  5857               	subwfb	(i2sprintf@val+2)^0,w,c
  9953  001CB4  0009               	tblrd		*+
  9954  001CB6  50F5               	movf	tablat,w,c
  9955  001CB8  5858               	subwfb	(i2sprintf@val+3)^0,w,c
  9956  001CBA  A0D8               	btfss	status,0,c
  9957  001CBC  D005               	goto	i2u586_40
  9958  001CBE  2A5E               	incf	i2sprintf@c^0,f,c
  9959  001CC0  0E0A               	movlw	10
  9960  001CC2  185E               	xorwf	i2sprintf@c^0,w,c
  9961  001CC4  A4D8               	btfss	status,2,c
  9962  001CC6  D7E4               	goto	i2l5322
  9963  001CC8                     i2u586_40:
  9964                           
  9965                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  9966  001CC8  C04D  F043         	movff	i2sprintf@flag,??i2_sprintf
  9967  001CCC  0E03               	movlw	3
  9968  001CCE  1643               	andwf	??i2_sprintf^0,f,c
  9969  001CD0  B4D8               	btfsc	status,2,c
  9970  001CD2  D04E               	goto	i2l5344
  9971                           
  9972                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  9973  001CD4  503E               	movf	i2sprintf@sp^0,w,c
  9974  001CD6  6ED9               	movwf	fsr2l,c
  9975  001CD8  6ADA               	clrf	fsr2h,c
  9976  001CDA  0E2D               	movlw	45
  9977  001CDC  6EDF               	movwf	indf2,c
  9978  001CDE  2A3E               	incf	i2sprintf@sp^0,f,c
  9979  001CE0  D047               	goto	i2l5344
  9980  001CE2                     i2l5336:
  9981                           
  9982                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  9983  001CE2  C055  F001         	movff	i2sprintf@val,i2___lldiv@dividend
  9984  001CE6  C056  F002         	movff	i2sprintf@val+1,i2___lldiv@dividend+1
  9985  001CEA  C057  F003         	movff	i2sprintf@val+2,i2___lldiv@dividend+2
  9986  001CEE  C058  F004         	movff	i2sprintf@val+3,i2___lldiv@dividend+3
  9987  001CF2  505E               	movf	i2sprintf@c^0,w,c
  9988  001CF4  0D04               	mullw	4
  9989  001CF6  50F3               	movf	243,w,c
  9990  001CF8  0F4F               	addlw	low _dpowers
  9991  001CFA  6E43               	movwf	??i2_sprintf^0,c
  9992  001CFC  C043  FFF6         	movff	??i2_sprintf,tblptrl
  9993  001D00                     	if	1	;There is more than 1 active tblptr byte
  9994  001D00  0E10               	movlw	high __smallconst
  9995  001D02  6EF7               	movwf	tblptrh,c
  9996  001D04                     	endif
  9997  001D04                     	if	0	;tblptru may be non-zero
  9998  001D04                     	endif
  9999  001D04                     	if	0	;tblptru may be non-zero
 10000  001D04                     	endif
 10001  001D04  0009               	tblrd		*+
 10002  001D06  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 10003  001D0A  0009               	tblrd		*+
 10004  001D0C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 10005  001D10  0009               	tblrd		*+
 10006  001D12  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 10007  001D16  000A               	tblrd		*-
 10008  001D18  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 10009  001D1C  EC9F  F020         	call	i2___lldiv	;wreg free
 10010  001D20  C001  F051         	movff	?i2___lldiv,i2sprintf@tmpval
 10011  001D24  C002  F052         	movff	?i2___lldiv+1,i2sprintf@tmpval+1
 10012  001D28  C003  F053         	movff	?i2___lldiv+2,i2sprintf@tmpval+2
 10013  001D2C  C004  F054         	movff	?i2___lldiv+3,i2sprintf@tmpval+3
 10014                           
 10015                           ;doprnt.c: 1228: tmpval.vd %= 10;
 10016  001D30  C051  F00E         	movff	i2sprintf@tmpval,i2___llmod@dividend
 10017  001D34  C052  F00F         	movff	i2sprintf@tmpval+1,i2___llmod@dividend+1
 10018  001D38  C053  F010         	movff	i2sprintf@tmpval+2,i2___llmod@dividend+2
 10019  001D3C  C054  F011         	movff	i2sprintf@tmpval+3,i2___llmod@dividend+3
 10020  001D40  0E0A               	movlw	10
 10021  001D42  6E12               	movwf	i2___llmod@divisor^0,c
 10022  001D44  0E00               	movlw	0
 10023  001D46  6E13               	movwf	(i2___llmod@divisor+1)^0,c
 10024  001D48  0E00               	movlw	0
 10025  001D4A  6E14               	movwf	(i2___llmod@divisor+2)^0,c
 10026  001D4C  0E00               	movlw	0
 10027  001D4E  6E15               	movwf	(i2___llmod@divisor+3)^0,c
 10028  001D50  ECF7  F021         	call	i2___llmod	;wreg free
 10029  001D54  C00E  F051         	movff	?i2___llmod,i2sprintf@tmpval
 10030  001D58  C00F  F052         	movff	?i2___llmod+1,i2sprintf@tmpval+1
 10031  001D5C  C010  F053         	movff	?i2___llmod+2,i2sprintf@tmpval+2
 10032  001D60  C011  F054         	movff	?i2___llmod+3,i2sprintf@tmpval+3
 10033                           
 10034                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
 10035  001D64  503E               	movf	i2sprintf@sp^0,w,c
 10036  001D66  6ED9               	movwf	fsr2l,c
 10037  001D68  6ADA               	clrf	fsr2h,c
 10038  001D6A  5051               	movf	i2sprintf@tmpval^0,w,c
 10039  001D6C  0F30               	addlw	48
 10040  001D6E  D7B6               	goto	L8
 10041  001D70                     i2l5344:
 10042  001D70  065E               	decf	i2sprintf@c^0,f,c
 10043  001D72  285E               	incf	i2sprintf@c^0,w,c
 10044  001D74  B4D8               	btfsc	status,2,c
 10045  001D76  D00A               	goto	i2l5352
 10046  001D78  D7B4               	goto	i2l5336
 10047  001D7A                     i2l5346:
 10048                           
 10049                           ;doprnt.c: 1234: ((*sp++ = ('0')));
 10050  001D7A  503E               	movf	i2sprintf@sp^0,w,c
 10051  001D7C  6ED9               	movwf	fsr2l,c
 10052  001D7E  6ADA               	clrf	fsr2h,c
 10053  001D80  0E30               	movlw	48
 10054  001D82  6EDF               	movwf	indf2,c
 10055  001D84  2A3E               	incf	i2sprintf@sp^0,f,c
 10056                           
 10057                           ;doprnt.c: 1235: eexp--;
 10058  001D86  064F               	decf	i2sprintf@eexp^0,f,c
 10059  001D88  A0D8               	btfss	status,0,c
 10060  001D8A  0650               	decf	(i2sprintf@eexp+1)^0,f,c
 10061  001D8C                     i2l5352:
 10062  001D8C  BE50               	btfsc	(i2sprintf@eexp+1)^0,7,c
 10063  001D8E  D005               	goto	i2u589_40
 10064  001D90  5050               	movf	(i2sprintf@eexp+1)^0,w,c
 10065  001D92  E1F3               	bnz	i2l5346
 10066  001D94  044F               	decf	i2sprintf@eexp^0,w,c
 10067  001D96  B0D8               	btfsc	status,0,c
 10068  001D98  D7F0               	goto	i2l5346
 10069  001D9A                     i2u589_40:
 10070                           
 10071                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
 10072  001D9A  BE5A               	btfsc	(i2sprintf@prec+1)^0,7,c
 10073  001D9C  D009               	goto	i2l319
 10074  001D9E  505A               	movf	(i2sprintf@prec+1)^0,w,c
 10075  001DA0  E104               	bnz	i2u590_40
 10076  001DA2  0E09               	movlw	9
 10077  001DA4  5C59               	subwf	i2sprintf@prec^0,w,c
 10078  001DA6  A0D8               	btfss	status,0,c
 10079  001DA8  D003               	goto	i2l319
 10080  001DAA                     i2u590_40:
 10081                           
 10082                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
 10083  001DAA  0E08               	movlw	8
 10084  001DAC  6E5E               	movwf	i2sprintf@c^0,c
 10085  001DAE  D002               	goto	i2l5358
 10086  001DB0                     i2l319:
 10087                           
 10088                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
 10089  001DB0  C059  F05E         	movff	i2sprintf@prec,i2sprintf@c
 10090  001DB4                     i2l5358:
 10091                           
 10092                           ;doprnt.c: 1241: prec -= (int)c;
 10093  001DB4  505E               	movf	i2sprintf@c^0,w,c
 10094  001DB6  5E59               	subwf	i2sprintf@prec^0,f,c
 10095  001DB8  0E00               	movlw	0
 10096  001DBA  5A5A               	subwfb	(i2sprintf@prec+1)^0,f,c
 10097                           
 10098                           ;doprnt.c: 1245: if(c)
 10099  001DBC  505E               	movf	i2sprintf@c^0,w,c
 10100  001DBE  B4D8               	btfsc	status,2,c
 10101  001DC0  D006               	goto	i2l5366
 10102                           
 10103                           ;doprnt.c: 1247: ((*sp++ = ('.')));
 10104  001DC2  503E               	movf	i2sprintf@sp^0,w,c
 10105  001DC4  6ED9               	movwf	fsr2l,c
 10106  001DC6  6ADA               	clrf	fsr2h,c
 10107  001DC8  0E2E               	movlw	46
 10108  001DCA  6EDF               	movwf	indf2,c
 10109  001DCC  2A3E               	incf	i2sprintf@sp^0,f,c
 10110  001DCE                     i2l5366:
 10111                           
 10112                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
 10113  001DCE  505E               	movf	i2sprintf@c^0,w,c
 10114  001DD0  EC22  F012         	call	i2_scale
 10115  001DD4  C01E  F049         	movff	?i2_scale,i2_sprintf$1356
 10116  001DD8  C01F  F04A         	movff	?i2_scale+1,i2_sprintf$1356+1
 10117  001DDC  C020  F04B         	movff	?i2_scale+2,i2_sprintf$1356+2
 10118                           
 10119                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
 10120  001DE0  C05B  F012         	movff	i2sprintf@fval,i2___ftmul@f2
 10121  001DE4  C05C  F013         	movff	i2sprintf@fval+1,i2___ftmul@f2+1
 10122  001DE8  C05D  F014         	movff	i2sprintf@fval+2,i2___ftmul@f2+2
 10123  001DEC  C049  F00F         	movff	i2_sprintf$1356,i2___ftmul@f1
 10124  001DF0  C04A  F010         	movff	i2_sprintf$1356+1,i2___ftmul@f1+1
 10125  001DF4  C04B  F011         	movff	i2_sprintf$1356+2,i2___ftmul@f1+2
 10126  001DF8  EC96  F01B         	call	i2___ftmul	;wreg free
 10127  001DFC  C00F  F01E         	movff	?i2___ftmul,i2___fttol@f1
 10128  001E00  C010  F01F         	movff	?i2___ftmul+1,i2___fttol@f1+1
 10129  001E04  C011  F020         	movff	?i2___ftmul+2,i2___fttol@f1+2
 10130  001E08  ECDA  F01D         	call	i2___fttol	;wreg free
 10131  001E0C  C01E  F055         	movff	?i2___fttol,i2sprintf@val
 10132  001E10  C01F  F056         	movff	?i2___fttol+1,i2sprintf@val+1
 10133  001E14  C020  F057         	movff	?i2___fttol+2,i2sprintf@val+2
 10134  001E18  C021  F058         	movff	?i2___fttol+3,i2sprintf@val+3
 10135                           
 10136                           ;doprnt.c: 1254: while(c--) {
 10137  001E1C  D06F               	goto	i2l5380
 10138  001E1E                     i2l5370:
 10139                           
 10140                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
 10141  001E1E  C055  F001         	movff	i2sprintf@val,i2___lldiv@dividend
 10142  001E22  C056  F002         	movff	i2sprintf@val+1,i2___lldiv@dividend+1
 10143  001E26  C057  F003         	movff	i2sprintf@val+2,i2___lldiv@dividend+2
 10144  001E2A  C058  F004         	movff	i2sprintf@val+3,i2___lldiv@dividend+3
 10145  001E2E  505E               	movf	i2sprintf@c^0,w,c
 10146  001E30  0D04               	mullw	4
 10147  001E32  50F3               	movf	243,w,c
 10148  001E34  0F4F               	addlw	low _dpowers
 10149  001E36  6E43               	movwf	??i2_sprintf^0,c
 10150  001E38  C043  FFF6         	movff	??i2_sprintf,tblptrl
 10151  001E3C                     	if	1	;There is more than 1 active tblptr byte
 10152  001E3C  0E10               	movlw	high __smallconst
 10153  001E3E  6EF7               	movwf	tblptrh,c
 10154  001E40                     	endif
 10155  001E40                     	if	0	;tblptru may be non-zero
 10156  001E40                     	endif
 10157  001E40                     	if	0	;tblptru may be non-zero
 10158  001E40                     	endif
 10159  001E40  0009               	tblrd		*+
 10160  001E42  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 10161  001E46  0009               	tblrd		*+
 10162  001E48  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 10163  001E4C  0009               	tblrd		*+
 10164  001E4E  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 10165  001E52  000A               	tblrd		*-
 10166  001E54  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 10167  001E58  EC9F  F020         	call	i2___lldiv	;wreg free
 10168  001E5C  C001  F051         	movff	?i2___lldiv,i2sprintf@tmpval
 10169  001E60  C002  F052         	movff	?i2___lldiv+1,i2sprintf@tmpval+1
 10170  001E64  C003  F053         	movff	?i2___lldiv+2,i2sprintf@tmpval+2
 10171  001E68  C004  F054         	movff	?i2___lldiv+3,i2sprintf@tmpval+3
 10172                           
 10173                           ;doprnt.c: 1256: tmpval.vd %= 10;
 10174  001E6C  C051  F00E         	movff	i2sprintf@tmpval,i2___llmod@dividend
 10175  001E70  C052  F00F         	movff	i2sprintf@tmpval+1,i2___llmod@dividend+1
 10176  001E74  C053  F010         	movff	i2sprintf@tmpval+2,i2___llmod@dividend+2
 10177  001E78  C054  F011         	movff	i2sprintf@tmpval+3,i2___llmod@dividend+3
 10178  001E7C  0E0A               	movlw	10
 10179  001E7E  6E12               	movwf	i2___llmod@divisor^0,c
 10180  001E80  0E00               	movlw	0
 10181  001E82  6E13               	movwf	(i2___llmod@divisor+1)^0,c
 10182  001E84  0E00               	movlw	0
 10183  001E86  6E14               	movwf	(i2___llmod@divisor+2)^0,c
 10184  001E88  0E00               	movlw	0
 10185  001E8A  6E15               	movwf	(i2___llmod@divisor+3)^0,c
 10186  001E8C  ECF7  F021         	call	i2___llmod	;wreg free
 10187  001E90  C00E  F051         	movff	?i2___llmod,i2sprintf@tmpval
 10188  001E94  C00F  F052         	movff	?i2___llmod+1,i2sprintf@tmpval+1
 10189  001E98  C010  F053         	movff	?i2___llmod+2,i2sprintf@tmpval+2
 10190  001E9C  C011  F054         	movff	?i2___llmod+3,i2sprintf@tmpval+3
 10191                           
 10192                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
 10193  001EA0  503E               	movf	i2sprintf@sp^0,w,c
 10194  001EA2  6ED9               	movwf	fsr2l,c
 10195  001EA4  6ADA               	clrf	fsr2h,c
 10196  001EA6  5051               	movf	i2sprintf@tmpval^0,w,c
 10197  001EA8  0F30               	addlw	48
 10198  001EAA  6EDF               	movwf	indf2,c
 10199  001EAC  2A3E               	incf	i2sprintf@sp^0,f,c
 10200                           
 10201                           ;doprnt.c: 1258: val %= dpowers[c];
 10202  001EAE  C055  F00E         	movff	i2sprintf@val,i2___llmod@dividend
 10203  001EB2  C056  F00F         	movff	i2sprintf@val+1,i2___llmod@dividend+1
 10204  001EB6  C057  F010         	movff	i2sprintf@val+2,i2___llmod@dividend+2
 10205  001EBA  C058  F011         	movff	i2sprintf@val+3,i2___llmod@dividend+3
 10206  001EBE  505E               	movf	i2sprintf@c^0,w,c
 10207  001EC0  0D04               	mullw	4
 10208  001EC2  50F3               	movf	243,w,c
 10209  001EC4  0F4F               	addlw	low _dpowers
 10210  001EC6  6E43               	movwf	??i2_sprintf^0,c
 10211  001EC8  C043  FFF6         	movff	??i2_sprintf,tblptrl
 10212  001ECC                     	if	1	;There is more than 1 active tblptr byte
 10213  001ECC  0E10               	movlw	high __smallconst
 10214  001ECE  6EF7               	movwf	tblptrh,c
 10215  001ED0                     	endif
 10216  001ED0                     	if	0	;tblptru may be non-zero
 10217  001ED0                     	endif
 10218  001ED0                     	if	0	;tblptru may be non-zero
 10219  001ED0                     	endif
 10220  001ED0  0009               	tblrd		*+
 10221  001ED2  CFF5 F012          	movff	tablat,i2___llmod@divisor
 10222  001ED6  0009               	tblrd		*+
 10223  001ED8  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 10224  001EDC  0009               	tblrd		*+
 10225  001EDE  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 10226  001EE2  000A               	tblrd		*-
 10227  001EE4  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 10228  001EE8  ECF7  F021         	call	i2___llmod	;wreg free
 10229  001EEC  C00E  F055         	movff	?i2___llmod,i2sprintf@val
 10230  001EF0  C00F  F056         	movff	?i2___llmod+1,i2sprintf@val+1
 10231  001EF4  C010  F057         	movff	?i2___llmod+2,i2sprintf@val+2
 10232  001EF8  C011  F058         	movff	?i2___llmod+3,i2sprintf@val+3
 10233  001EFC                     i2l5380:
 10234  001EFC  065E               	decf	i2sprintf@c^0,f,c
 10235  001EFE  285E               	incf	i2sprintf@c^0,w,c
 10236  001F00  B4D8               	btfsc	status,2,c
 10237  001F02  D00A               	goto	i2l5388
 10238  001F04  D78C               	goto	i2l5370
 10239  001F06                     i2l5382:
 10240                           
 10241                           ;doprnt.c: 1262: ((*sp++ = ('0')));
 10242  001F06  503E               	movf	i2sprintf@sp^0,w,c
 10243  001F08  6ED9               	movwf	fsr2l,c
 10244  001F0A  6ADA               	clrf	fsr2h,c
 10245  001F0C  0E30               	movlw	48
 10246  001F0E  6EDF               	movwf	indf2,c
 10247  001F10  2A3E               	incf	i2sprintf@sp^0,f,c
 10248                           
 10249                           ;doprnt.c: 1263: prec--;
 10250  001F12  0659               	decf	i2sprintf@prec^0,f,c
 10251  001F14  A0D8               	btfss	status,0,c
 10252  001F16  065A               	decf	(i2sprintf@prec+1)^0,f,c
 10253  001F18                     i2l5388:
 10254  001F18  5059               	movf	i2sprintf@prec^0,w,c
 10255  001F1A  105A               	iorwf	(i2sprintf@prec+1)^0,w,c
 10256  001F1C  B4D8               	btfsc	status,2,c
 10257  001F1E  D0B1               	goto	i2u602_40
 10258  001F20  D7F2               	goto	i2l5382
 10259  001F22                     i2l5390:
 10260                           
 10261                           ;doprnt.c: 1272: };doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_
      +                          arg((*(int **)ap), (int)0));
 10262  001F22  504C               	movf	i2sprintf@ap^0,w,c
 10263  001F24  6ED9               	movwf	fsr2l,c
 10264  001F26  6ADA               	clrf	fsr2h,c
 10265  001F28  CFDE F055          	movff	postinc2,i2sprintf@val
 10266  001F2C  CFDD F056          	movff	postdec2,i2sprintf@val+1
 10267  001F30  0E00               	movlw	0
 10268  001F32  BE56               	btfsc	(i2sprintf@val+1)^0,7,c
 10269  001F34  0EFF               	movlw	-1
 10270  001F36  6E57               	movwf	(i2sprintf@val+2)^0,c
 10271  001F38  6E58               	movwf	(i2sprintf@val+3)^0,c
 10272  001F3A  0E02               	movlw	2
 10273  001F3C  264C               	addwf	i2sprintf@ap^0,f,c
 10274                           
 10275                           ;doprnt.c: 1287: if((long)val < 0) {
 10276  001F3E  AE58               	btfss	(i2sprintf@val+3)^0,7,c
 10277  001F40  D00A               	goto	i2l5400
 10278                           
 10279                           ;doprnt.c: 1288: flag |= 0x03;
 10280  001F42  0E03               	movlw	3
 10281  001F44  124D               	iorwf	i2sprintf@flag^0,f,c
 10282                           
 10283                           ;doprnt.c: 1289: val = -val;
 10284  001F46  1E58               	comf	(i2sprintf@val+3)^0,f,c
 10285  001F48  1E57               	comf	(i2sprintf@val+2)^0,f,c
 10286  001F4A  1E56               	comf	(i2sprintf@val+1)^0,f,c
 10287  001F4C  6C55               	negf	i2sprintf@val^0,c
 10288  001F4E  0E00               	movlw	0
 10289  001F50  2256               	addwfc	(i2sprintf@val+1)^0,f,c
 10290  001F52  2257               	addwfc	(i2sprintf@val+2)^0,f,c
 10291  001F54  2258               	addwfc	(i2sprintf@val+3)^0,f,c
 10292  001F56                     i2l5400:
 10293                           
 10294                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1316: if(prec == 0 && val == 0)
 10295  001F56  5059               	movf	i2sprintf@prec^0,w,c
 10296  001F58  105A               	iorwf	(i2sprintf@prec+1)^0,w,c
 10297  001F5A  A4D8               	btfss	status,2,c
 10298  001F5C  D008               	goto	i2l5406
 10299  001F5E  5055               	movf	i2sprintf@val^0,w,c
 10300  001F60  1056               	iorwf	(i2sprintf@val+1)^0,w,c
 10301  001F62  1057               	iorwf	(i2sprintf@val+2)^0,w,c
 10302  001F64  1058               	iorwf	(i2sprintf@val+3)^0,w,c
 10303  001F66  A4D8               	btfss	status,2,c
 10304  001F68  D002               	goto	i2l5406
 10305                           
 10306                           ;doprnt.c: 1317: prec++;
 10307  001F6A  4A59               	infsnz	i2sprintf@prec^0,f,c
 10308  001F6C  2A5A               	incf	(i2sprintf@prec+1)^0,f,c
 10309  001F6E                     i2l5406:
 10310                           
 10311                           ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10312  001F6E  0E01               	movlw	1
 10313  001F70  6E5E               	movwf	i2sprintf@c^0,c
 10314  001F72                     i2l5412:
 10315                           
 10316                           ;doprnt.c: 1332: if(val < dpowers[c])
 10317  001F72  505E               	movf	i2sprintf@c^0,w,c
 10318  001F74  0D04               	mullw	4
 10319  001F76  50F3               	movf	243,w,c
 10320  001F78  0F4F               	addlw	low _dpowers
 10321  001F7A  6E43               	movwf	??i2_sprintf^0,c
 10322  001F7C  C043  FFF6         	movff	??i2_sprintf,tblptrl
 10323  001F80                     	if	1	;There is more than 1 active tblptr byte
 10324  001F80  0E10               	movlw	high __smallconst
 10325  001F82  6EF7               	movwf	tblptrh,c
 10326  001F84                     	endif
 10327  001F84                     	if	0	;tblptru may be non-zero
 10328  001F84                     	endif
 10329  001F84                     	if	0	;tblptru may be non-zero
 10330  001F84                     	endif
 10331  001F84  0009               	tblrd		*+
 10332  001F86  50F5               	movf	tablat,w,c
 10333  001F88  5C55               	subwf	i2sprintf@val^0,w,c
 10334  001F8A  0009               	tblrd		*+
 10335  001F8C  50F5               	movf	tablat,w,c
 10336  001F8E  5856               	subwfb	(i2sprintf@val+1)^0,w,c
 10337  001F90  0009               	tblrd		*+
 10338  001F92  50F5               	movf	tablat,w,c
 10339  001F94  5857               	subwfb	(i2sprintf@val+2)^0,w,c
 10340  001F96  0009               	tblrd		*+
 10341  001F98  50F5               	movf	tablat,w,c
 10342  001F9A  5858               	subwfb	(i2sprintf@val+3)^0,w,c
 10343  001F9C  A0D8               	btfss	status,0,c
 10344  001F9E  D005               	goto	i2u598_40
 10345  001FA0  2A5E               	incf	i2sprintf@c^0,f,c
 10346  001FA2  0E0A               	movlw	10
 10347  001FA4  185E               	xorwf	i2sprintf@c^0,w,c
 10348  001FA6  A4D8               	btfss	status,2,c
 10349  001FA8  D7E4               	goto	i2l5412
 10350  001FAA                     i2u598_40:
 10351                           
 10352                           ;doprnt.c: 1365: if(c < prec)
 10353  001FAA  505E               	movf	i2sprintf@c^0,w,c
 10354  001FAC  6E43               	movwf	??i2_sprintf^0,c
 10355  001FAE  6A44               	clrf	(??i2_sprintf+1)^0,c
 10356  001FB0  5059               	movf	i2sprintf@prec^0,w,c
 10357  001FB2  5C43               	subwf	??i2_sprintf^0,w,c
 10358  001FB4  5044               	movf	(??i2_sprintf+1)^0,w,c
 10359  001FB6  0A80               	xorlw	128
 10360  001FB8  6E45               	movwf	(??i2_sprintf+2)^0,c
 10361  001FBA  505A               	movf	(i2sprintf@prec+1)^0,w,c
 10362  001FBC  0A80               	xorlw	128
 10363  001FBE  5845               	subwfb	(??i2_sprintf+2)^0,w,c
 10364  001FC0  A0D8               	btfss	status,0,c
 10365  001FC2  D010               	goto	i2l5428
 10366                           
 10367                           ;doprnt.c: 1367: else if(prec < c)
 10368  001FC4  505E               	movf	i2sprintf@c^0,w,c
 10369  001FC6  6E43               	movwf	??i2_sprintf^0,c
 10370  001FC8  6A44               	clrf	(??i2_sprintf+1)^0,c
 10371  001FCA  5043               	movf	??i2_sprintf^0,w,c
 10372  001FCC  5C59               	subwf	i2sprintf@prec^0,w,c
 10373  001FCE  505A               	movf	(i2sprintf@prec+1)^0,w,c
 10374  001FD0  0A80               	xorlw	128
 10375  001FD2  6E45               	movwf	(??i2_sprintf+2)^0,c
 10376  001FD4  5044               	movf	(??i2_sprintf+1)^0,w,c
 10377  001FD6  0A80               	xorlw	128
 10378  001FD8  5845               	subwfb	(??i2_sprintf+2)^0,w,c
 10379  001FDA  B0D8               	btfsc	status,0,c
 10380  001FDC  D003               	goto	i2l5428
 10381                           
 10382                           ;doprnt.c: 1368: prec = c;
 10383  001FDE  C05E  F059         	movff	i2sprintf@c,i2sprintf@prec
 10384  001FE2  6A5A               	clrf	(i2sprintf@prec+1)^0,c
 10385  001FE4                     i2l5428:
 10386                           
 10387                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
 10388  001FE4  C04D  F043         	movff	i2sprintf@flag,??i2_sprintf
 10389  001FE8  0E03               	movlw	3
 10390  001FEA  1643               	andwf	??i2_sprintf^0,f,c
 10391  001FEC  B4D8               	btfsc	status,2,c
 10392  001FEE  D041               	goto	i2l5440
 10393                           
 10394                           ;doprnt.c: 1465: ((*sp++ = ('-')));
 10395  001FF0  503E               	movf	i2sprintf@sp^0,w,c
 10396  001FF2  6ED9               	movwf	fsr2l,c
 10397  001FF4  6ADA               	clrf	fsr2h,c
 10398  001FF6  0E2D               	movlw	45
 10399  001FF8  6EDF               	movwf	indf2,c
 10400  001FFA                     i2l5432:
 10401  001FFA  2A3E               	incf	i2sprintf@sp^0,f,c
 10402  001FFC  D03A               	goto	i2l5440
 10403  001FFE                     i2l5434:
 10404                           
 10405                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
 10406  001FFE  5059               	movf	i2sprintf@prec^0,w,c
 10407  002000  0D04               	mullw	4
 10408  002002  50F3               	movf	243,w,c
 10409  002004  0F4F               	addlw	low _dpowers
 10410  002006  6E43               	movwf	??i2_sprintf^0,c
 10411  002008  C043  FFF6         	movff	??i2_sprintf,tblptrl
 10412  00200C                     	if	1	;There is more than 1 active tblptr byte
 10413  00200C  0E10               	movlw	high __smallconst
 10414  00200E  6EF7               	movwf	tblptrh,c
 10415  002010                     	endif
 10416  002010                     	if	0	;tblptru may be non-zero
 10417  002010                     	endif
 10418  002010                     	if	0	;tblptru may be non-zero
 10419  002010                     	endif
 10420  002010  0009               	tblrd		*+
 10421  002012  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 10422  002016  0009               	tblrd		*+
 10423  002018  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 10424  00201C  0009               	tblrd		*+
 10425  00201E  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 10426  002022  000A               	tblrd		*-
 10427  002024  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 10428  002028  C055  F001         	movff	i2sprintf@val,i2___lldiv@dividend
 10429  00202C  C056  F002         	movff	i2sprintf@val+1,i2___lldiv@dividend+1
 10430  002030  C057  F003         	movff	i2sprintf@val+2,i2___lldiv@dividend+2
 10431  002034  C058  F004         	movff	i2sprintf@val+3,i2___lldiv@dividend+3
 10432  002038  EC9F  F020         	call	i2___lldiv	;wreg free
 10433  00203C  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 10434  002040  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 10435  002044  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 10436  002048  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 10437  00204C  0E0A               	movlw	10
 10438  00204E  6E12               	movwf	i2___llmod@divisor^0,c
 10439  002050  0E00               	movlw	0
 10440  002052  6E13               	movwf	(i2___llmod@divisor+1)^0,c
 10441  002054  0E00               	movlw	0
 10442  002056  6E14               	movwf	(i2___llmod@divisor+2)^0,c
 10443  002058  0E00               	movlw	0
 10444  00205A  6E15               	movwf	(i2___llmod@divisor+3)^0,c
 10445  00205C  ECF7  F021         	call	i2___llmod	;wreg free
 10446  002060  500E               	movf	?i2___llmod^0,w,c
 10447  002062  0F30               	addlw	48
 10448  002064  6E5E               	movwf	i2sprintf@c^0,c
 10449                           
 10450                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
 10451  002066  503E               	movf	i2sprintf@sp^0,w,c
 10452  002068  6ED9               	movwf	fsr2l,c
 10453  00206A  6ADA               	clrf	fsr2h,c
 10454  00206C  C05E  FFDF         	movff	i2sprintf@c,indf2
 10455  002070  D7C4               	goto	i2l5432
 10456  002072                     i2l5440:
 10457  002072  0659               	decf	i2sprintf@prec^0,f,c
 10458  002074  A0D8               	btfss	status,0,c
 10459  002076  065A               	decf	(i2sprintf@prec+1)^0,f,c
 10460  002078  2859               	incf	i2sprintf@prec^0,w,c
 10461  00207A  E1C1               	bnz	i2l5434
 10462  00207C  285A               	incf	(i2sprintf@prec+1)^0,w,c
 10463  00207E  A4D8               	btfss	status,2,c
 10464  002080  D7BE               	goto	i2l5434
 10465  002082                     i2u602_40:
 10466  002082  2A3F               	incf	i2sprintf@f^0,f,c
 10467  002084  043F               	decf	i2sprintf@f^0,w,c
 10468  002086  6E43               	movwf	??i2_sprintf^0,c
 10469  002088  C043  FFF6         	movff	??i2_sprintf,tblptrl
 10470  00208C                     	if	1	;There is more than 1 active tblptr byte
 10471  00208C  0E10               	movlw	high __smallconst
 10472  00208E  6EF7               	movwf	tblptrh,c
 10473  002090                     	endif
 10474  002090                     	if	0	;tblptru may be non-zero
 10475  002090                     	endif
 10476  002090                     	if	0	;tblptru may be non-zero
 10477  002090                     	endif
 10478  002090  0008               	tblrd		*
 10479  002092  CFF5 F05E          	movff	tablat,i2sprintf@c
 10480  002096  505E               	movf	i2sprintf@c^0,w,c
 10481  002098  A4D8               	btfss	status,2,c
 10482  00209A  D42A               	goto	i2l5210
 10483  00209C                     i2u603_40:
 10484                           
 10485                           ;doprnt.c: 1564: *sp = 0;
 10486  00209C  503E               	movf	i2sprintf@sp^0,w,c
 10487  00209E  6ED9               	movwf	fsr2l,c
 10488  0020A0  6ADA               	clrf	fsr2h,c
 10489  0020A2  0E00               	movlw	0
 10490  0020A4  6EDF               	movwf	indf2,c
 10491  0020A6  0012               	return		;funcret
 10492  0020A8                     __end_ofi2_sprintf:
 10493                           	callstack 0
 10494                           
 10495 ;; *************** function i2_scale *****************
 10496 ;; Defined at:
 10497 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;  scl             1    wreg     char 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;  scl             1   39[COMRAM] char 
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  3   29[COMRAM] char 
 10504 ;; Registers used:
 10505 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10511 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;Total ram usage:       11 bytes
 10516 ;; Hardware stack levels used: 1
 10517 ;; Hardware stack levels required when called: 2
 10518 ;; This function calls:
 10519 ;;		i2___awdiv
 10520 ;;		i2___awmod
 10521 ;;		i2___ftmul
 10522 ;; This function is called by:
 10523 ;;		i2_sprintf
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           	psect	text47
 10528  002444                     __ptext47:
 10529                           	callstack 0
 10530  002444                     i2_scale:
 10531                           	callstack 21
 10532                           
 10533                           ;incstack = 0
 10534                           ;i2scale@scl stored from wreg
 10535  002444  6E28               	movwf	i2scale@scl^0,c
 10536                           
 10537                           ;doprnt.c: 436: if(scl < 0) {
 10538  002446  AE28               	btfss	i2scale@scl^0,7,c
 10539  002448  D0E5               	goto	i2l4546
 10540                           
 10541                           ;doprnt.c: 437: scl = -scl;
 10542  00244A  6C28               	negf	i2scale@scl^0,c
 10543                           
 10544                           ;doprnt.c: 438: if(scl>=110)
 10545  00244C  5028               	movf	i2scale@scl^0,w,c
 10546  00244E  0A80               	xorlw	128
 10547  002450  0F12               	addlw	-238
 10548  002452  A0D8               	btfss	status,0,c
 10549  002454  D080               	goto	i2l4536
 10550                           
 10551                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
 10552  002456  0E00               	movlw	0
 10553  002458  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 10554  00245A  0E0A               	movlw	10
 10555  00245C  6E09               	movwf	i2___awdiv@divisor^0,c
 10556  00245E  0E00               	movlw	0
 10557  002460  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 10558  002462  0E64               	movlw	100
 10559  002464  6E03               	movwf	i2___awmod@divisor^0,c
 10560  002466  5028               	movf	i2scale@scl^0,w,c
 10561  002468  6E01               	movwf	i2___awmod@dividend^0,c
 10562  00246A  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 10563  00246C  BE01               	btfsc	i2___awmod@dividend^0,7,c
 10564  00246E  0602               	decf	(i2___awmod@dividend+1)^0,f,c
 10565  002470  EC8C  F021         	call	i2___awmod	;wreg free
 10566  002474  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 10567  002478  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 10568  00247C  ECDB  F01F         	call	i2___awdiv	;wreg free
 10569  002480  5007               	movf	?i2___awdiv^0,w,c
 10570  002482  0D03               	mullw	3
 10571  002484  CFF3 F021          	movff	prodl,??i2_scale
 10572  002488  0E1B               	movlw	27
 10573  00248A  2621               	addwf	??i2_scale^0,f,c
 10574  00248C  5021               	movf	??i2_scale^0,w,c
 10575  00248E  0F28               	addlw	low __npowers_
 10576  002490  6E22               	movwf	(??i2_scale+1)^0,c
 10577  002492  C022  FFF6         	movff	??i2_scale+1,tblptrl
 10578  002496                     	if	1	;There is more than 1 active tblptr byte
 10579  002496  0E10               	movlw	high __smallconst
 10580  002498  6EF7               	movwf	tblptrh,c
 10581  00249A                     	endif
 10582  00249A                     	if	0	;tblptru may be non-zero
 10583  00249A                     	endif
 10584  00249A                     	if	0	;tblptru may be non-zero
 10585  00249A                     	endif
 10586  00249A  0009               	tblrd		*+
 10587  00249C  CFF5 F012          	movff	tablat,i2___ftmul@f2
 10588  0024A0  0009               	tblrd		*+
 10589  0024A2  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 10590  0024A6  000A               	tblrd		*-
 10591  0024A8  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 10592  0024AC  0E00               	movlw	0
 10593  0024AE  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 10594  0024B0  0E64               	movlw	100
 10595  0024B2  6E09               	movwf	i2___awdiv@divisor^0,c
 10596  0024B4  5028               	movf	i2scale@scl^0,w,c
 10597  0024B6  6E07               	movwf	i2___awdiv@dividend^0,c
 10598  0024B8  6A08               	clrf	(i2___awdiv@dividend+1)^0,c
 10599  0024BA  BE07               	btfsc	i2___awdiv@dividend^0,7,c
 10600  0024BC  0608               	decf	(i2___awdiv@dividend+1)^0,f,c
 10601  0024BE  ECDB  F01F         	call	i2___awdiv	;wreg free
 10602  0024C2  5007               	movf	?i2___awdiv^0,w,c
 10603  0024C4  0D03               	mullw	3
 10604  0024C6  CFF3 F023          	movff	prodl,??i2_scale+2
 10605  0024CA  0E36               	movlw	54
 10606  0024CC  2623               	addwf	(??i2_scale+2)^0,f,c
 10607  0024CE  5023               	movf	(??i2_scale+2)^0,w,c
 10608  0024D0  0F28               	addlw	low __npowers_
 10609  0024D2  6E24               	movwf	(??i2_scale+3)^0,c
 10610  0024D4  C024  FFF6         	movff	??i2_scale+3,tblptrl
 10611  0024D8                     	if	1	;There is more than 1 active tblptr byte
 10612  0024D8  0E10               	movlw	high __smallconst
 10613  0024DA  6EF7               	movwf	tblptrh,c
 10614  0024DC                     	endif
 10615  0024DC                     	if	0	;tblptru may be non-zero
 10616  0024DC                     	endif
 10617  0024DC                     	if	0	;tblptru may be non-zero
 10618  0024DC                     	endif
 10619  0024DC  0009               	tblrd		*+
 10620  0024DE  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 10621  0024E2  0009               	tblrd		*+
 10622  0024E4  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 10623  0024E8  000A               	tblrd		*-
 10624  0024EA  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 10625  0024EE  EC96  F01B         	call	i2___ftmul	;wreg free
 10626  0024F2  C00F  F025         	movff	?i2___ftmul,i2_scale$1355
 10627  0024F6  C010  F026         	movff	?i2___ftmul+1,i2_scale$1355+1
 10628  0024FA  C011  F027         	movff	?i2___ftmul+2,i2_scale$1355+2
 10629                           
 10630                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
 10631  0024FE  C025  F00F         	movff	i2_scale$1355,i2___ftmul@f1
 10632  002502  C026  F010         	movff	i2_scale$1355+1,i2___ftmul@f1+1
 10633  002506  C027  F011         	movff	i2_scale$1355+2,i2___ftmul@f1+2
 10634  00250A  0E00               	movlw	0
 10635  00250C  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 10636  00250E  0E0A               	movlw	10
 10637  002510  6E03               	movwf	i2___awmod@divisor^0,c
 10638  002512  5028               	movf	i2scale@scl^0,w,c
 10639  002514  6E01               	movwf	i2___awmod@dividend^0,c
 10640  002516  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 10641  002518  BE01               	btfsc	i2___awmod@dividend^0,7,c
 10642  00251A  0602               	decf	(i2___awmod@dividend+1)^0,f,c
 10643  00251C  EC8C  F021         	call	i2___awmod	;wreg free
 10644  002520  5001               	movf	?i2___awmod^0,w,c
 10645  002522  0D03               	mullw	3
 10646  002524  50F3               	movf	243,w,c
 10647  002526  0F28               	addlw	low __npowers_
 10648  002528  6E21               	movwf	??i2_scale^0,c
 10649  00252A  C021  FFF6         	movff	??i2_scale,tblptrl
 10650  00252E                     	if	1	;There is more than 1 active tblptr byte
 10651  00252E  0E10               	movlw	high __smallconst
 10652  002530  6EF7               	movwf	tblptrh,c
 10653  002532                     	endif
 10654  002532                     	if	0	;tblptru may be non-zero
 10655  002532                     	endif
 10656  002532                     	if	0	;tblptru may be non-zero
 10657  002532                     	endif
 10658  002532  0009               	tblrd		*+
 10659  002534  CFF5 F012          	movff	tablat,i2___ftmul@f2
 10660  002538  0009               	tblrd		*+
 10661  00253A  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 10662  00253E  000A               	tblrd		*-
 10663  002540  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 10664  002544  EC96  F01B         	call	i2___ftmul	;wreg free
 10665  002548  C00F  F01E         	movff	?i2___ftmul,?i2_scale
 10666  00254C  C010  F01F         	movff	?i2___ftmul+1,?i2_scale+1
 10667  002550  C011  F020         	movff	?i2___ftmul+2,?i2_scale+2
 10668  002554  0012               	return	
 10669  002556                     i2l4536:
 10670                           
 10671                           ;doprnt.c: 440: else if(scl > 10)
 10672  002556  5028               	movf	i2scale@scl^0,w,c
 10673  002558  0A80               	xorlw	128
 10674  00255A  0F75               	addlw	-139
 10675  00255C  A0D8               	btfss	status,0,c
 10676  00255E  D047               	goto	i2l4542
 10677                           
 10678                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
 10679  002560  0E00               	movlw	0
 10680  002562  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 10681  002564  0E0A               	movlw	10
 10682  002566  6E09               	movwf	i2___awdiv@divisor^0,c
 10683  002568  5028               	movf	i2scale@scl^0,w,c
 10684  00256A  6E07               	movwf	i2___awdiv@dividend^0,c
 10685  00256C  6A08               	clrf	(i2___awdiv@dividend+1)^0,c
 10686  00256E  BE07               	btfsc	i2___awdiv@dividend^0,7,c
 10687  002570  0608               	decf	(i2___awdiv@dividend+1)^0,f,c
 10688  002572  ECDB  F01F         	call	i2___awdiv	;wreg free
 10689  002576  5007               	movf	?i2___awdiv^0,w,c
 10690  002578  0D03               	mullw	3
 10691  00257A  CFF3 F021          	movff	prodl,??i2_scale
 10692  00257E  0E1B               	movlw	27
 10693  002580  2621               	addwf	??i2_scale^0,f,c
 10694  002582  5021               	movf	??i2_scale^0,w,c
 10695  002584  0F28               	addlw	low __npowers_
 10696  002586  6E22               	movwf	(??i2_scale+1)^0,c
 10697  002588  C022  FFF6         	movff	??i2_scale+1,tblptrl
 10698  00258C                     	if	1	;There is more than 1 active tblptr byte
 10699  00258C  0E10               	movlw	high __smallconst
 10700  00258E  6EF7               	movwf	tblptrh,c
 10701  002590                     	endif
 10702  002590                     	if	0	;tblptru may be non-zero
 10703  002590                     	endif
 10704  002590                     	if	0	;tblptru may be non-zero
 10705  002590                     	endif
 10706  002590  0009               	tblrd		*+
 10707  002592  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 10708  002596  0009               	tblrd		*+
 10709  002598  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 10710  00259C  000A               	tblrd		*-
 10711  00259E  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 10712  0025A2  0E00               	movlw	0
 10713  0025A4  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 10714  0025A6  0E0A               	movlw	10
 10715  0025A8  6E03               	movwf	i2___awmod@divisor^0,c
 10716  0025AA  5028               	movf	i2scale@scl^0,w,c
 10717  0025AC  6E01               	movwf	i2___awmod@dividend^0,c
 10718  0025AE  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 10719  0025B0  BE01               	btfsc	i2___awmod@dividend^0,7,c
 10720  0025B2  0602               	decf	(i2___awmod@dividend+1)^0,f,c
 10721  0025B4  EC8C  F021         	call	i2___awmod	;wreg free
 10722  0025B8  5001               	movf	?i2___awmod^0,w,c
 10723  0025BA  0D03               	mullw	3
 10724  0025BC  50F3               	movf	243,w,c
 10725  0025BE  0F28               	addlw	low __npowers_
 10726  0025C0  6E23               	movwf	(??i2_scale+2)^0,c
 10727  0025C2  C023  FFF6         	movff	??i2_scale+2,tblptrl
 10728  0025C6                     	if	1	;There is more than 1 active tblptr byte
 10729  0025C6  0E10               	movlw	high __smallconst
 10730  0025C8  6EF7               	movwf	tblptrh,c
 10731  0025CA                     	endif
 10732  0025CA                     	if	0	;tblptru may be non-zero
 10733  0025CA                     	endif
 10734  0025CA                     	if	0	;tblptru may be non-zero
 10735  0025CA                     	endif
 10736  0025CA  0009               	tblrd		*+
 10737  0025CC  CFF5 F012          	movff	tablat,i2___ftmul@f2
 10738  0025D0  0009               	tblrd		*+
 10739  0025D2  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 10740  0025D6  000A               	tblrd		*-
 10741  0025D8  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 10742  0025DC  EC96  F01B         	call	i2___ftmul	;wreg free
 10743  0025E0  C00F  F01E         	movff	?i2___ftmul,?i2_scale
 10744  0025E4  C010  F01F         	movff	?i2___ftmul+1,?i2_scale+1
 10745  0025E8  C011  F020         	movff	?i2___ftmul+2,?i2_scale+2
 10746  0025EC  0012               	return	
 10747  0025EE                     i2l4542:
 10748                           
 10749                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
 10750  0025EE  5028               	movf	i2scale@scl^0,w,c
 10751  0025F0  0D03               	mullw	3
 10752  0025F2  50F3               	movf	243,w,c
 10753  0025F4  0F28               	addlw	low __npowers_
 10754  0025F6  6E21               	movwf	??i2_scale^0,c
 10755  0025F8  C021  FFF6         	movff	??i2_scale,tblptrl
 10756  0025FC                     	if	1	;There is more than 1 active tblptr byte
 10757  0025FC  0E10               	movlw	high __smallconst
 10758  0025FE  6EF7               	movwf	tblptrh,c
 10759  002600                     	endif
 10760  002600                     	if	0	;tblptru may be non-zero
 10761  002600                     	endif
 10762  002600                     	if	0	;tblptru may be non-zero
 10763  002600                     	endif
 10764  002600  0009               	tblrd		*+
 10765  002602  CFF5 F01E          	movff	tablat,?i2_scale
 10766  002606  0009               	tblrd		*+
 10767  002608  CFF5 F01F          	movff	tablat,?i2_scale+1
 10768  00260C  000A               	tblrd		*-
 10769  00260E  CFF5 F020          	movff	tablat,?i2_scale+2
 10770  002612  0012               	return	
 10771  002614                     i2l4546:
 10772                           
 10773                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
 10774  002614  5028               	movf	i2scale@scl^0,w,c
 10775  002616  0A80               	xorlw	128
 10776  002618  0F12               	addlw	-238
 10777  00261A  A0D8               	btfss	status,0,c
 10778  00261C  D080               	goto	i2l4554
 10779                           
 10780                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
 10781  00261E  0E00               	movlw	0
 10782  002620  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 10783  002622  0E0A               	movlw	10
 10784  002624  6E09               	movwf	i2___awdiv@divisor^0,c
 10785  002626  0E00               	movlw	0
 10786  002628  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 10787  00262A  0E64               	movlw	100
 10788  00262C  6E03               	movwf	i2___awmod@divisor^0,c
 10789  00262E  5028               	movf	i2scale@scl^0,w,c
 10790  002630  6E01               	movwf	i2___awmod@dividend^0,c
 10791  002632  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 10792  002634  BE01               	btfsc	i2___awmod@dividend^0,7,c
 10793  002636  0602               	decf	(i2___awmod@dividend+1)^0,f,c
 10794  002638  EC8C  F021         	call	i2___awmod	;wreg free
 10795  00263C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 10796  002640  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 10797  002644  ECDB  F01F         	call	i2___awdiv	;wreg free
 10798  002648  5007               	movf	?i2___awdiv^0,w,c
 10799  00264A  0D03               	mullw	3
 10800  00264C  CFF3 F021          	movff	prodl,??i2_scale
 10801  002650  0E1B               	movlw	27
 10802  002652  2621               	addwf	??i2_scale^0,f,c
 10803  002654  5021               	movf	??i2_scale^0,w,c
 10804  002656  0F01               	addlw	low __powers_
 10805  002658  6E22               	movwf	(??i2_scale+1)^0,c
 10806  00265A  C022  FFF6         	movff	??i2_scale+1,tblptrl
 10807  00265E                     	if	1	;There is more than 1 active tblptr byte
 10808  00265E  0E10               	movlw	high __smallconst
 10809  002660  6EF7               	movwf	tblptrh,c
 10810  002662                     	endif
 10811  002662                     	if	0	;tblptru may be non-zero
 10812  002662                     	endif
 10813  002662                     	if	0	;tblptru may be non-zero
 10814  002662                     	endif
 10815  002662  0009               	tblrd		*+
 10816  002664  CFF5 F012          	movff	tablat,i2___ftmul@f2
 10817  002668  0009               	tblrd		*+
 10818  00266A  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 10819  00266E  000A               	tblrd		*-
 10820  002670  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 10821  002674  0E00               	movlw	0
 10822  002676  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 10823  002678  0E64               	movlw	100
 10824  00267A  6E09               	movwf	i2___awdiv@divisor^0,c
 10825  00267C  5028               	movf	i2scale@scl^0,w,c
 10826  00267E  6E07               	movwf	i2___awdiv@dividend^0,c
 10827  002680  6A08               	clrf	(i2___awdiv@dividend+1)^0,c
 10828  002682  BE07               	btfsc	i2___awdiv@dividend^0,7,c
 10829  002684  0608               	decf	(i2___awdiv@dividend+1)^0,f,c
 10830  002686  ECDB  F01F         	call	i2___awdiv	;wreg free
 10831  00268A  5007               	movf	?i2___awdiv^0,w,c
 10832  00268C  0D03               	mullw	3
 10833  00268E  CFF3 F023          	movff	prodl,??i2_scale+2
 10834  002692  0E36               	movlw	54
 10835  002694  2623               	addwf	(??i2_scale+2)^0,f,c
 10836  002696  5023               	movf	(??i2_scale+2)^0,w,c
 10837  002698  0F01               	addlw	low __powers_
 10838  00269A  6E24               	movwf	(??i2_scale+3)^0,c
 10839  00269C  C024  FFF6         	movff	??i2_scale+3,tblptrl
 10840  0026A0                     	if	1	;There is more than 1 active tblptr byte
 10841  0026A0  0E10               	movlw	high __smallconst
 10842  0026A2  6EF7               	movwf	tblptrh,c
 10843  0026A4                     	endif
 10844  0026A4                     	if	0	;tblptru may be non-zero
 10845  0026A4                     	endif
 10846  0026A4                     	if	0	;tblptru may be non-zero
 10847  0026A4                     	endif
 10848  0026A4  0009               	tblrd		*+
 10849  0026A6  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 10850  0026AA  0009               	tblrd		*+
 10851  0026AC  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 10852  0026B0  000A               	tblrd		*-
 10853  0026B2  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 10854  0026B6  EC96  F01B         	call	i2___ftmul	;wreg free
 10855  0026BA  C00F  F025         	movff	?i2___ftmul,i2_scale$1355
 10856  0026BE  C010  F026         	movff	?i2___ftmul+1,i2_scale$1355+1
 10857  0026C2  C011  F027         	movff	?i2___ftmul+2,i2_scale$1355+2
 10858                           
 10859                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
 10860  0026C6  C025  F00F         	movff	i2_scale$1355,i2___ftmul@f1
 10861  0026CA  C026  F010         	movff	i2_scale$1355+1,i2___ftmul@f1+1
 10862  0026CE  C027  F011         	movff	i2_scale$1355+2,i2___ftmul@f1+2
 10863  0026D2  0E00               	movlw	0
 10864  0026D4  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 10865  0026D6  0E0A               	movlw	10
 10866  0026D8  6E03               	movwf	i2___awmod@divisor^0,c
 10867  0026DA  5028               	movf	i2scale@scl^0,w,c
 10868  0026DC  6E01               	movwf	i2___awmod@dividend^0,c
 10869  0026DE  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 10870  0026E0  BE01               	btfsc	i2___awmod@dividend^0,7,c
 10871  0026E2  0602               	decf	(i2___awmod@dividend+1)^0,f,c
 10872  0026E4  EC8C  F021         	call	i2___awmod	;wreg free
 10873  0026E8  5001               	movf	?i2___awmod^0,w,c
 10874  0026EA  0D03               	mullw	3
 10875  0026EC  50F3               	movf	243,w,c
 10876  0026EE  0F01               	addlw	low __powers_
 10877  0026F0  6E21               	movwf	??i2_scale^0,c
 10878  0026F2  C021  FFF6         	movff	??i2_scale,tblptrl
 10879  0026F6                     	if	1	;There is more than 1 active tblptr byte
 10880  0026F6  0E10               	movlw	high __smallconst
 10881  0026F8  6EF7               	movwf	tblptrh,c
 10882  0026FA                     	endif
 10883  0026FA                     	if	0	;tblptru may be non-zero
 10884  0026FA                     	endif
 10885  0026FA                     	if	0	;tblptru may be non-zero
 10886  0026FA                     	endif
 10887  0026FA  0009               	tblrd		*+
 10888  0026FC  CFF5 F012          	movff	tablat,i2___ftmul@f2
 10889  002700  0009               	tblrd		*+
 10890  002702  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 10891  002706  000A               	tblrd		*-
 10892  002708  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 10893  00270C  EC96  F01B         	call	i2___ftmul	;wreg free
 10894  002710  C00F  F01E         	movff	?i2___ftmul,?i2_scale
 10895  002714  C010  F01F         	movff	?i2___ftmul+1,?i2_scale+1
 10896  002718  C011  F020         	movff	?i2___ftmul+2,?i2_scale+2
 10897  00271C  0012               	return	
 10898  00271E                     i2l4554:
 10899                           
 10900                           ;doprnt.c: 446: else if(scl > 10)
 10901  00271E  5028               	movf	i2scale@scl^0,w,c
 10902  002720  0A80               	xorlw	128
 10903  002722  0F75               	addlw	-139
 10904  002724  A0D8               	btfss	status,0,c
 10905  002726  D047               	goto	i2l4560
 10906                           
 10907                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
 10908  002728  0E00               	movlw	0
 10909  00272A  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 10910  00272C  0E0A               	movlw	10
 10911  00272E  6E09               	movwf	i2___awdiv@divisor^0,c
 10912  002730  5028               	movf	i2scale@scl^0,w,c
 10913  002732  6E07               	movwf	i2___awdiv@dividend^0,c
 10914  002734  6A08               	clrf	(i2___awdiv@dividend+1)^0,c
 10915  002736  BE07               	btfsc	i2___awdiv@dividend^0,7,c
 10916  002738  0608               	decf	(i2___awdiv@dividend+1)^0,f,c
 10917  00273A  ECDB  F01F         	call	i2___awdiv	;wreg free
 10918  00273E  5007               	movf	?i2___awdiv^0,w,c
 10919  002740  0D03               	mullw	3
 10920  002742  CFF3 F021          	movff	prodl,??i2_scale
 10921  002746  0E1B               	movlw	27
 10922  002748  2621               	addwf	??i2_scale^0,f,c
 10923  00274A  5021               	movf	??i2_scale^0,w,c
 10924  00274C  0F01               	addlw	low __powers_
 10925  00274E  6E22               	movwf	(??i2_scale+1)^0,c
 10926  002750  C022  FFF6         	movff	??i2_scale+1,tblptrl
 10927  002754                     	if	1	;There is more than 1 active tblptr byte
 10928  002754  0E10               	movlw	high __smallconst
 10929  002756  6EF7               	movwf	tblptrh,c
 10930  002758                     	endif
 10931  002758                     	if	0	;tblptru may be non-zero
 10932  002758                     	endif
 10933  002758                     	if	0	;tblptru may be non-zero
 10934  002758                     	endif
 10935  002758  0009               	tblrd		*+
 10936  00275A  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 10937  00275E  0009               	tblrd		*+
 10938  002760  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 10939  002764  000A               	tblrd		*-
 10940  002766  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 10941  00276A  0E00               	movlw	0
 10942  00276C  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 10943  00276E  0E0A               	movlw	10
 10944  002770  6E03               	movwf	i2___awmod@divisor^0,c
 10945  002772  5028               	movf	i2scale@scl^0,w,c
 10946  002774  6E01               	movwf	i2___awmod@dividend^0,c
 10947  002776  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 10948  002778  BE01               	btfsc	i2___awmod@dividend^0,7,c
 10949  00277A  0602               	decf	(i2___awmod@dividend+1)^0,f,c
 10950  00277C  EC8C  F021         	call	i2___awmod	;wreg free
 10951  002780  5001               	movf	?i2___awmod^0,w,c
 10952  002782  0D03               	mullw	3
 10953  002784  50F3               	movf	243,w,c
 10954  002786  0F01               	addlw	low __powers_
 10955  002788  6E23               	movwf	(??i2_scale+2)^0,c
 10956  00278A  C023  FFF6         	movff	??i2_scale+2,tblptrl
 10957  00278E                     	if	1	;There is more than 1 active tblptr byte
 10958  00278E  0E10               	movlw	high __smallconst
 10959  002790  6EF7               	movwf	tblptrh,c
 10960  002792                     	endif
 10961  002792                     	if	0	;tblptru may be non-zero
 10962  002792                     	endif
 10963  002792                     	if	0	;tblptru may be non-zero
 10964  002792                     	endif
 10965  002792  0009               	tblrd		*+
 10966  002794  CFF5 F012          	movff	tablat,i2___ftmul@f2
 10967  002798  0009               	tblrd		*+
 10968  00279A  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 10969  00279E  000A               	tblrd		*-
 10970  0027A0  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 10971  0027A4  EC96  F01B         	call	i2___ftmul	;wreg free
 10972  0027A8  C00F  F01E         	movff	?i2___ftmul,?i2_scale
 10973  0027AC  C010  F01F         	movff	?i2___ftmul+1,?i2_scale+1
 10974  0027B0  C011  F020         	movff	?i2___ftmul+2,?i2_scale+2
 10975  0027B4  0012               	return	
 10976  0027B6                     i2l4560:
 10977                           
 10978                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
 10979  0027B6  5028               	movf	i2scale@scl^0,w,c
 10980  0027B8  0D03               	mullw	3
 10981  0027BA  50F3               	movf	243,w,c
 10982  0027BC  0F01               	addlw	low __powers_
 10983  0027BE  6E21               	movwf	??i2_scale^0,c
 10984  0027C0  C021  FFF6         	movff	??i2_scale,tblptrl
 10985  0027C4                     	if	1	;There is more than 1 active tblptr byte
 10986  0027C4  0E10               	movlw	high __smallconst
 10987  0027C6  6EF7               	movwf	tblptrh,c
 10988  0027C8                     	endif
 10989  0027C8                     	if	0	;tblptru may be non-zero
 10990  0027C8                     	endif
 10991  0027C8                     	if	0	;tblptru may be non-zero
 10992  0027C8                     	endif
 10993  0027C8  0009               	tblrd		*+
 10994  0027CA  CFF5 F01E          	movff	tablat,?i2_scale
 10995  0027CE  0009               	tblrd		*+
 10996  0027D0  CFF5 F01F          	movff	tablat,?i2_scale+1
 10997  0027D4  000A               	tblrd		*-
 10998  0027D6  CFF5 F020          	movff	tablat,?i2_scale+2
 10999  0027DA  0012               	return		;funcret
 11000  0027DC                     __end_ofi2_scale:
 11001                           	callstack 0
 11002                           
 11003 ;; *************** function i2___awmod *****************
 11004 ;; Defined at:
 11005 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  dividend        2    0[COMRAM] int 
 11008 ;;  divisor         2    2[COMRAM] int 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  sign            1    5[COMRAM] unsigned char 
 11011 ;;  counter         1    4[COMRAM] unsigned char 
 11012 ;; Return value:  Size  Location     Type
 11013 ;;                  2    0[COMRAM] int 
 11014 ;; Registers used:
 11015 ;;		wreg, status,2, status,0
 11016 ;; Tracked objects:
 11017 ;;		On entry : 0/0
 11018 ;;		On exit  : 0/0
 11019 ;;		Unchanged: 0/0
 11020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;Total ram usage:        6 bytes
 11026 ;; Hardware stack levels used: 1
 11027 ;; This function calls:
 11028 ;;		Nothing
 11029 ;; This function is called by:
 11030 ;;		i2_scale
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           	psect	text48
 11035  004318                     __ptext48:
 11036                           	callstack 0
 11037  004318                     i2___awmod:
 11038                           	callstack 22
 11039                           
 11040                           ;incstack = 0
 11041  004318  0E00               	movlw	0
 11042  00431A  6E06               	movwf	i2___awmod@sign^0,c
 11043  00431C  AE02               	btfss	(i2___awmod@dividend+1)^0,7,c
 11044  00431E  D006               	goto	i2l4004
 11045  004320  6C01               	negf	i2___awmod@dividend^0,c
 11046  004322  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 11047  004324  B0D8               	btfsc	status,0,c
 11048  004326  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 11049  004328  0E01               	movlw	1
 11050  00432A  6E06               	movwf	i2___awmod@sign^0,c
 11051  00432C                     i2l4004:
 11052  00432C  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 11053  00432E  D004               	goto	i2l4008
 11054  004330  6C03               	negf	i2___awmod@divisor^0,c
 11055  004332  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
 11056  004334  B0D8               	btfsc	status,0,c
 11057  004336  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
 11058  004338                     i2l4008:
 11059  004338  5003               	movf	i2___awmod@divisor^0,w,c
 11060  00433A  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
 11061  00433C  B4D8               	btfsc	status,2,c
 11062  00433E  D018               	goto	i2l4024
 11063  004340  0E01               	movlw	1
 11064  004342  6E05               	movwf	i2___awmod@counter^0,c
 11065  004344  D004               	goto	i2l4014
 11066  004346                     i2l4012:
 11067  004346  90D8               	bcf	status,0,c
 11068  004348  3603               	rlcf	i2___awmod@divisor^0,f,c
 11069  00434A  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
 11070  00434C  2A05               	incf	i2___awmod@counter^0,f,c
 11071  00434E                     i2l4014:
 11072  00434E  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 11073  004350  D7FA               	goto	i2l4012
 11074  004352                     i2u408_40:
 11075  004352  5003               	movf	i2___awmod@divisor^0,w,c
 11076  004354  5C01               	subwf	i2___awmod@dividend^0,w,c
 11077  004356  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 11078  004358  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
 11079  00435A  A0D8               	btfss	status,0,c
 11080  00435C  D004               	goto	i2l4020
 11081  00435E  5003               	movf	i2___awmod@divisor^0,w,c
 11082  004360  5E01               	subwf	i2___awmod@dividend^0,f,c
 11083  004362  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 11084  004364  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
 11085  004366                     i2l4020:
 11086  004366  90D8               	bcf	status,0,c
 11087  004368  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
 11088  00436A  3203               	rrcf	i2___awmod@divisor^0,f,c
 11089  00436C  2E05               	decfsz	i2___awmod@counter^0,f,c
 11090  00436E  D7F1               	goto	i2u408_40
 11091  004370                     i2l4024:
 11092  004370  5006               	movf	i2___awmod@sign^0,w,c
 11093  004372  B4D8               	btfsc	status,2,c
 11094  004374  D004               	goto	i2l4028
 11095  004376  6C01               	negf	i2___awmod@dividend^0,c
 11096  004378  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 11097  00437A  B0D8               	btfsc	status,0,c
 11098  00437C  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 11099  00437E                     i2l4028:
 11100  00437E  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11101  004382  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11102  004386  0012               	return		;funcret
 11103  004388                     __end_ofi2___awmod:
 11104                           	callstack 0
 11105                           
 11106 ;; *************** function i2_isdigit *****************
 11107 ;; Defined at:
 11108 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\isdigit.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;  c               1    wreg     unsigned char 
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;  c               1    2[COMRAM] unsigned char 
 11113 ;; Return value:  Size  Location     Type
 11114 ;;		None               void
 11115 ;; Registers used:
 11116 ;;		wreg, status,2, status,0
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;Total ram usage:        3 bytes
 11127 ;; Hardware stack levels used: 1
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		i2_sprintf
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           	psect	text49
 11136  0049F4                     __ptext49:
 11137                           	callstack 0
 11138  0049F4                     i2_isdigit:
 11139                           	callstack 23
 11140                           
 11141                           ;incstack = 0
 11142                           ;i2isdigit@c stored from wreg
 11143  0049F4  6E03               	movwf	i2isdigit@c^0,c
 11144  0049F6  0E00               	movlw	0
 11145  0049F8  6E02               	movwf	i2_isdigit$930^0,c
 11146  0049FA  0E3A               	movlw	58
 11147  0049FC  6003               	cpfslt	i2isdigit@c^0,c
 11148  0049FE  D005               	goto	i2l4818
 11149  004A00  0E2F               	movlw	47
 11150  004A02  6403               	cpfsgt	i2isdigit@c^0,c
 11151  004A04  D002               	goto	i2l4818
 11152  004A06  0E01               	movlw	1
 11153  004A08  6E02               	movwf	i2_isdigit$930^0,c
 11154  004A0A                     i2l4818:
 11155  004A0A  C002  F001         	movff	i2_isdigit$930,??i2_isdigit
 11156  004A0E  3001               	rrcf	??i2_isdigit^0,w,c
 11157  004A10  0012               	return		;funcret
 11158  004A12                     __end_ofi2_isdigit:
 11159                           	callstack 0
 11160                           
 11161 ;; *************** function i2_fround *****************
 11162 ;; Defined at:
 11163 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;  prec            1    wreg     unsigned char 
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;  prec            1   42[COMRAM] unsigned char 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;                  3   29[COMRAM] unsigned char 
 11170 ;; Registers used:
 11171 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11177 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11178 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11179 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11180 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11181 ;;Total ram usage:       14 bytes
 11182 ;; Hardware stack levels used: 1
 11183 ;; Hardware stack levels required when called: 2
 11184 ;; This function calls:
 11185 ;;		i2___ftmul
 11186 ;;		i2___lbdiv
 11187 ;;		i2___lbmod
 11188 ;; This function is called by:
 11189 ;;		i2_sprintf
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           	psect	text50
 11194  002C8C                     __ptext50:
 11195                           	callstack 0
 11196  002C8C                     i2_fround:
 11197                           	callstack 21
 11198                           
 11199                           ;incstack = 0
 11200                           ;i2fround@prec stored from wreg
 11201  002C8C  6E2B               	movwf	i2fround@prec^0,c
 11202                           
 11203                           ;doprnt.c: 421: if(prec>=110)
 11204  002C8E  0E6D               	movlw	109
 11205  002C90  642B               	cpfsgt	i2fround@prec^0,c
 11206  002C92  D079               	goto	i2l4514
 11207                           
 11208                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
 11209  002C94  0E0A               	movlw	10
 11210  002C96  6E05               	movwf	i2___lbdiv@divisor^0,c
 11211  002C98  0E64               	movlw	100
 11212  002C9A  6E01               	movwf	i2___lbmod@divisor^0,c
 11213  002C9C  502B               	movf	i2fround@prec^0,w,c
 11214  002C9E  EC67  F024         	call	i2___lbmod
 11215  002CA2  ECE4  F023         	call	i2___lbdiv
 11216  002CA6  0D03               	mullw	3
 11217  002CA8  CFF3 F021          	movff	prodl,??i2_fround
 11218  002CAC  0E1B               	movlw	27
 11219  002CAE  2621               	addwf	??i2_fround^0,f,c
 11220  002CB0  5021               	movf	??i2_fround^0,w,c
 11221  002CB2  0F28               	addlw	low __npowers_
 11222  002CB4  6E22               	movwf	(??i2_fround+1)^0,c
 11223  002CB6  C022  FFF6         	movff	??i2_fround+1,tblptrl
 11224  002CBA                     	if	1	;There is more than 1 active tblptr byte
 11225  002CBA  0E10               	movlw	high __smallconst
 11226  002CBC  6EF7               	movwf	tblptrh,c
 11227  002CBE                     	endif
 11228  002CBE                     	if	0	;tblptru may be non-zero
 11229  002CBE                     	endif
 11230  002CBE                     	if	0	;tblptru may be non-zero
 11231  002CBE                     	endif
 11232  002CBE  0009               	tblrd		*+
 11233  002CC0  CFF5 F012          	movff	tablat,i2___ftmul@f2
 11234  002CC4  0009               	tblrd		*+
 11235  002CC6  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 11236  002CCA  000A               	tblrd		*-
 11237  002CCC  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 11238  002CD0  0E64               	movlw	100
 11239  002CD2  6E05               	movwf	i2___lbdiv@divisor^0,c
 11240  002CD4  502B               	movf	i2fround@prec^0,w,c
 11241  002CD6  ECE4  F023         	call	i2___lbdiv
 11242  002CDA  0D03               	mullw	3
 11243  002CDC  CFF3 F023          	movff	prodl,??i2_fround+2
 11244  002CE0  0E36               	movlw	54
 11245  002CE2  2623               	addwf	(??i2_fround+2)^0,f,c
 11246  002CE4  5023               	movf	(??i2_fround+2)^0,w,c
 11247  002CE6  0F28               	addlw	low __npowers_
 11248  002CE8  6E24               	movwf	(??i2_fround+3)^0,c
 11249  002CEA  C024  FFF6         	movff	??i2_fround+3,tblptrl
 11250  002CEE                     	if	1	;There is more than 1 active tblptr byte
 11251  002CEE  0E10               	movlw	high __smallconst
 11252  002CF0  6EF7               	movwf	tblptrh,c
 11253  002CF2                     	endif
 11254  002CF2                     	if	0	;tblptru may be non-zero
 11255  002CF2                     	endif
 11256  002CF2                     	if	0	;tblptru may be non-zero
 11257  002CF2                     	endif
 11258  002CF2  0009               	tblrd		*+
 11259  002CF4  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 11260  002CF8  0009               	tblrd		*+
 11261  002CFA  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 11262  002CFE  000A               	tblrd		*-
 11263  002D00  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 11264  002D04  EC96  F01B         	call	i2___ftmul	;wreg free
 11265  002D08  C00F  F028         	movff	?i2___ftmul,i2_fround$1353
 11266  002D0C  C010  F029         	movff	?i2___ftmul+1,i2_fround$1353+1
 11267  002D10  C011  F02A         	movff	?i2___ftmul+2,i2_fround$1353+2
 11268                           
 11269                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
 11270  002D14  0E0A               	movlw	10
 11271  002D16  6E01               	movwf	i2___lbmod@divisor^0,c
 11272  002D18  502B               	movf	i2fround@prec^0,w,c
 11273  002D1A  EC67  F024         	call	i2___lbmod
 11274  002D1E  0D03               	mullw	3
 11275  002D20  50F3               	movf	243,w,c
 11276  002D22  0F28               	addlw	low __npowers_
 11277  002D24  6E21               	movwf	??i2_fround^0,c
 11278  002D26  C021  FFF6         	movff	??i2_fround,tblptrl
 11279  002D2A                     	if	1	;There is more than 1 active tblptr byte
 11280  002D2A  0E10               	movlw	high __smallconst
 11281  002D2C  6EF7               	movwf	tblptrh,c
 11282  002D2E                     	endif
 11283  002D2E                     	if	0	;tblptru may be non-zero
 11284  002D2E                     	endif
 11285  002D2E                     	if	0	;tblptru may be non-zero
 11286  002D2E                     	endif
 11287  002D2E  0009               	tblrd		*+
 11288  002D30  CFF5 F012          	movff	tablat,i2___ftmul@f2
 11289  002D34  0009               	tblrd		*+
 11290  002D36  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 11291  002D3A  000A               	tblrd		*-
 11292  002D3C  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 11293  002D40  C028  F00F         	movff	i2_fround$1353,i2___ftmul@f1
 11294  002D44  C029  F010         	movff	i2_fround$1353+1,i2___ftmul@f1+1
 11295  002D48  C02A  F011         	movff	i2_fround$1353+2,i2___ftmul@f1+2
 11296  002D4C  EC96  F01B         	call	i2___ftmul	;wreg free
 11297  002D50  C00F  F025         	movff	?i2___ftmul,i2_fround$1354
 11298  002D54  C010  F026         	movff	?i2___ftmul+1,i2_fround$1354+1
 11299  002D58  C011  F027         	movff	?i2___ftmul+2,i2_fround$1354+2
 11300                           
 11301                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
 11302  002D5C  C025  F00F         	movff	i2_fround$1354,i2___ftmul@f1
 11303  002D60  C026  F010         	movff	i2_fround$1354+1,i2___ftmul@f1+1
 11304  002D64  C027  F011         	movff	i2_fround$1354+2,i2___ftmul@f1+2
 11305  002D68  0E00               	movlw	0
 11306  002D6A  6E12               	movwf	i2___ftmul@f2^0,c
 11307  002D6C  0E00               	movlw	0
 11308  002D6E  6E13               	movwf	(i2___ftmul@f2+1)^0,c
 11309  002D70  0E3F               	movlw	63
 11310  002D72  6E14               	movwf	(i2___ftmul@f2+2)^0,c
 11311  002D74  EC96  F01B         	call	i2___ftmul	;wreg free
 11312  002D78  C00F  F01E         	movff	?i2___ftmul,?i2_fround
 11313  002D7C  C010  F01F         	movff	?i2___ftmul+1,?i2_fround+1
 11314  002D80  C011  F020         	movff	?i2___ftmul+2,?i2_fround+2
 11315  002D84  0012               	return	
 11316  002D86                     i2l4514:
 11317                           
 11318                           ;doprnt.c: 423: else if(prec > 10)
 11319  002D86  0E0A               	movlw	10
 11320  002D88  642B               	cpfsgt	i2fround@prec^0,c
 11321  002D8A  D04D               	goto	i2l4522
 11322                           
 11323                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
 11324  002D8C  0E0A               	movlw	10
 11325  002D8E  6E01               	movwf	i2___lbmod@divisor^0,c
 11326  002D90  502B               	movf	i2fround@prec^0,w,c
 11327  002D92  EC67  F024         	call	i2___lbmod
 11328  002D96  0D03               	mullw	3
 11329  002D98  50F3               	movf	243,w,c
 11330  002D9A  0F28               	addlw	low __npowers_
 11331  002D9C  6E21               	movwf	??i2_fround^0,c
 11332  002D9E  C021  FFF6         	movff	??i2_fround,tblptrl
 11333  002DA2                     	if	1	;There is more than 1 active tblptr byte
 11334  002DA2  0E10               	movlw	high __smallconst
 11335  002DA4  6EF7               	movwf	tblptrh,c
 11336  002DA6                     	endif
 11337  002DA6                     	if	0	;tblptru may be non-zero
 11338  002DA6                     	endif
 11339  002DA6                     	if	0	;tblptru may be non-zero
 11340  002DA6                     	endif
 11341  002DA6  0009               	tblrd		*+
 11342  002DA8  CFF5 F012          	movff	tablat,i2___ftmul@f2
 11343  002DAC  0009               	tblrd		*+
 11344  002DAE  CFF5 F013          	movff	tablat,i2___ftmul@f2+1
 11345  002DB2  000A               	tblrd		*-
 11346  002DB4  CFF5 F014          	movff	tablat,i2___ftmul@f2+2
 11347  002DB8  0E0A               	movlw	10
 11348  002DBA  6E05               	movwf	i2___lbdiv@divisor^0,c
 11349  002DBC  502B               	movf	i2fround@prec^0,w,c
 11350  002DBE  ECE4  F023         	call	i2___lbdiv
 11351  002DC2  0D03               	mullw	3
 11352  002DC4  CFF3 F022          	movff	prodl,??i2_fround+1
 11353  002DC8  0E1B               	movlw	27
 11354  002DCA  2622               	addwf	(??i2_fround+1)^0,f,c
 11355  002DCC  5022               	movf	(??i2_fround+1)^0,w,c
 11356  002DCE  0F28               	addlw	low __npowers_
 11357  002DD0  6E23               	movwf	(??i2_fround+2)^0,c
 11358  002DD2  C023  FFF6         	movff	??i2_fround+2,tblptrl
 11359  002DD6                     	if	1	;There is more than 1 active tblptr byte
 11360  002DD6  0E10               	movlw	high __smallconst
 11361  002DD8  6EF7               	movwf	tblptrh,c
 11362  002DDA                     	endif
 11363  002DDA                     	if	0	;tblptru may be non-zero
 11364  002DDA                     	endif
 11365  002DDA                     	if	0	;tblptru may be non-zero
 11366  002DDA                     	endif
 11367  002DDA  0009               	tblrd		*+
 11368  002DDC  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 11369  002DE0  0009               	tblrd		*+
 11370  002DE2  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 11371  002DE6  000A               	tblrd		*-
 11372  002DE8  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 11373  002DEC  EC96  F01B         	call	i2___ftmul	;wreg free
 11374  002DF0  C00F  F028         	movff	?i2___ftmul,i2_fround$1353
 11375  002DF4  C010  F029         	movff	?i2___ftmul+1,i2_fround$1353+1
 11376  002DF8  C011  F02A         	movff	?i2___ftmul+2,i2_fround$1353+2
 11377                           
 11378                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
 11379  002DFC  C028  F00F         	movff	i2_fround$1353,i2___ftmul@f1
 11380  002E00  C029  F010         	movff	i2_fround$1353+1,i2___ftmul@f1+1
 11381  002E04  C02A  F011         	movff	i2_fround$1353+2,i2___ftmul@f1+2
 11382  002E08  0E00               	movlw	0
 11383  002E0A  6E12               	movwf	i2___ftmul@f2^0,c
 11384  002E0C  0E00               	movlw	0
 11385  002E0E  6E13               	movwf	(i2___ftmul@f2+1)^0,c
 11386  002E10  0E3F               	movlw	63
 11387  002E12  6E14               	movwf	(i2___ftmul@f2+2)^0,c
 11388  002E14  EC96  F01B         	call	i2___ftmul	;wreg free
 11389  002E18  C00F  F01E         	movff	?i2___ftmul,?i2_fround
 11390  002E1C  C010  F01F         	movff	?i2___ftmul+1,?i2_fround+1
 11391  002E20  C011  F020         	movff	?i2___ftmul+2,?i2_fround+2
 11392  002E24  0012               	return	
 11393  002E26                     i2l4522:
 11394                           
 11395                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
 11396  002E26  502B               	movf	i2fround@prec^0,w,c
 11397  002E28  0D03               	mullw	3
 11398  002E2A  50F3               	movf	243,w,c
 11399  002E2C  0F28               	addlw	low __npowers_
 11400  002E2E  6E21               	movwf	??i2_fround^0,c
 11401  002E30  C021  FFF6         	movff	??i2_fround,tblptrl
 11402  002E34                     	if	1	;There is more than 1 active tblptr byte
 11403  002E34  0E10               	movlw	high __smallconst
 11404  002E36  6EF7               	movwf	tblptrh,c
 11405  002E38                     	endif
 11406  002E38                     	if	0	;tblptru may be non-zero
 11407  002E38                     	endif
 11408  002E38                     	if	0	;tblptru may be non-zero
 11409  002E38                     	endif
 11410  002E38  0009               	tblrd		*+
 11411  002E3A  CFF5 F00F          	movff	tablat,i2___ftmul@f1
 11412  002E3E  0009               	tblrd		*+
 11413  002E40  CFF5 F010          	movff	tablat,i2___ftmul@f1+1
 11414  002E44  000A               	tblrd		*-
 11415  002E46  CFF5 F011          	movff	tablat,i2___ftmul@f1+2
 11416  002E4A  0E00               	movlw	0
 11417  002E4C  6E12               	movwf	i2___ftmul@f2^0,c
 11418  002E4E  0E00               	movlw	0
 11419  002E50  6E13               	movwf	(i2___ftmul@f2+1)^0,c
 11420  002E52  0E3F               	movlw	63
 11421  002E54  6E14               	movwf	(i2___ftmul@f2+2)^0,c
 11422  002E56  EC96  F01B         	call	i2___ftmul	;wreg free
 11423  002E5A  C00F  F01E         	movff	?i2___ftmul,?i2_fround
 11424  002E5E  C010  F01F         	movff	?i2___ftmul+1,?i2_fround+1
 11425  002E62  C011  F020         	movff	?i2___ftmul+2,?i2_fround+2
 11426  002E66  0012               	return		;funcret
 11427  002E68                     __end_ofi2_fround:
 11428                           	callstack 0
 11429                           
 11430 ;; *************** function i2___lbmod *****************
 11431 ;; Defined at:
 11432 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  dividend        1    wreg     unsigned char 
 11435 ;;  divisor         1    0[COMRAM] unsigned char 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  dividend        1    1[COMRAM] unsigned char 
 11438 ;;  rem             1    3[COMRAM] unsigned char 
 11439 ;;  counter         1    2[COMRAM] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      unsigned char 
 11442 ;; Registers used:
 11443 ;;		wreg, status,2, status,0
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11449 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;Total ram usage:        4 bytes
 11454 ;; Hardware stack levels used: 1
 11455 ;; This function calls:
 11456 ;;		Nothing
 11457 ;; This function is called by:
 11458 ;;		i2_fround
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text51
 11463  0048CE                     __ptext51:
 11464                           	callstack 0
 11465  0048CE                     i2___lbmod:
 11466                           	callstack 22
 11467                           
 11468                           ;incstack = 0
 11469                           ;i2___lbmod@dividend stored from wreg
 11470  0048CE  6E02               	movwf	i2___lbmod@dividend^0,c
 11471  0048D0  0E08               	movlw	8
 11472  0048D2  6E03               	movwf	i2___lbmod@counter^0,c
 11473  0048D4  0E00               	movlw	0
 11474  0048D6  6E04               	movwf	i2___lbmod@rem^0,c
 11475  0048D8                     i2l4178:
 11476  0048D8  90D8               	bcf	status,0,c
 11477  0048DA  3402               	rlcf	i2___lbmod@dividend^0,w,c
 11478  0048DC  3404               	rlcf	i2___lbmod@rem^0,w,c
 11479  0048DE  6E04               	movwf	i2___lbmod@rem^0,c
 11480  0048E0  90D8               	bcf	status,0,c
 11481  0048E2  3602               	rlcf	i2___lbmod@dividend^0,f,c
 11482  0048E4  5001               	movf	i2___lbmod@divisor^0,w,c
 11483  0048E6  5C04               	subwf	i2___lbmod@rem^0,w,c
 11484  0048E8  A0D8               	btfss	status,0,c
 11485  0048EA  D002               	goto	i2l4186
 11486  0048EC  5001               	movf	i2___lbmod@divisor^0,w,c
 11487  0048EE  5E04               	subwf	i2___lbmod@rem^0,f,c
 11488  0048F0                     i2l4186:
 11489  0048F0  2E03               	decfsz	i2___lbmod@counter^0,f,c
 11490  0048F2  D7F2               	goto	i2l4178
 11491  0048F4  5004               	movf	i2___lbmod@rem^0,w,c
 11492  0048F6  0012               	return		;funcret
 11493  0048F8                     __end_ofi2___lbmod:
 11494                           	callstack 0
 11495                           
 11496 ;; *************** function i2___lbdiv *****************
 11497 ;; Defined at:
 11498 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;  dividend        1    wreg     unsigned char 
 11501 ;;  divisor         1    4[COMRAM] unsigned char 
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;  dividend        1    5[COMRAM] unsigned char 
 11504 ;;  quotient        1    7[COMRAM] unsigned char 
 11505 ;;  counter         1    6[COMRAM] unsigned char 
 11506 ;; Return value:  Size  Location     Type
 11507 ;;                  1    wreg      unsigned char 
 11508 ;; Registers used:
 11509 ;;		wreg, status,2, status,0
 11510 ;; Tracked objects:
 11511 ;;		On entry : 0/0
 11512 ;;		On exit  : 0/0
 11513 ;;		Unchanged: 0/0
 11514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11515 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;Total ram usage:        4 bytes
 11520 ;; Hardware stack levels used: 1
 11521 ;; This function calls:
 11522 ;;		Nothing
 11523 ;; This function is called by:
 11524 ;;		i2_fround
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           	psect	text52
 11529  0047C8                     __ptext52:
 11530                           	callstack 0
 11531  0047C8                     i2___lbdiv:
 11532                           	callstack 22
 11533                           
 11534                           ;incstack = 0
 11535                           ;i2___lbdiv@dividend stored from wreg
 11536  0047C8  6E06               	movwf	i2___lbdiv@dividend^0,c
 11537  0047CA  0E00               	movlw	0
 11538  0047CC  6E08               	movwf	i2___lbdiv@quotient^0,c
 11539  0047CE  5005               	movf	i2___lbdiv@divisor^0,w,c
 11540  0047D0  B4D8               	btfsc	status,2,c
 11541  0047D2  D015               	goto	i2l4172
 11542  0047D4  0E01               	movlw	1
 11543  0047D6  6E07               	movwf	i2___lbdiv@counter^0,c
 11544  0047D8  D003               	goto	i2l4160
 11545  0047DA                     i2l4156:
 11546  0047DA  90D8               	bcf	status,0,c
 11547  0047DC  3605               	rlcf	i2___lbdiv@divisor^0,f,c
 11548  0047DE  2A07               	incf	i2___lbdiv@counter^0,f,c
 11549  0047E0                     i2l4160:
 11550  0047E0  AE05               	btfss	i2___lbdiv@divisor^0,7,c
 11551  0047E2  D7FB               	goto	i2l4156
 11552  0047E4                     i2u439_40:
 11553  0047E4  90D8               	bcf	status,0,c
 11554  0047E6  3608               	rlcf	i2___lbdiv@quotient^0,f,c
 11555  0047E8  5005               	movf	i2___lbdiv@divisor^0,w,c
 11556  0047EA  5C06               	subwf	i2___lbdiv@dividend^0,w,c
 11557  0047EC  A0D8               	btfss	status,0,c
 11558  0047EE  D003               	goto	i2l4168
 11559  0047F0  5005               	movf	i2___lbdiv@divisor^0,w,c
 11560  0047F2  5E06               	subwf	i2___lbdiv@dividend^0,f,c
 11561  0047F4  8008               	bsf	i2___lbdiv@quotient^0,0,c
 11562  0047F6                     i2l4168:
 11563  0047F6  90D8               	bcf	status,0,c
 11564  0047F8  3205               	rrcf	i2___lbdiv@divisor^0,f,c
 11565  0047FA  2E07               	decfsz	i2___lbdiv@counter^0,f,c
 11566  0047FC  D7F3               	goto	i2u439_40
 11567  0047FE                     i2l4172:
 11568  0047FE  5008               	movf	i2___lbdiv@quotient^0,w,c
 11569  004800  0012               	return		;funcret
 11570  004802                     __end_ofi2___lbdiv:
 11571                           	callstack 0
 11572                           
 11573 ;; *************** function i2___ftmul *****************
 11574 ;; Defined at:
 11575 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftmul.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;  f1              3   14[COMRAM] float 
 11578 ;;  f2              3   17[COMRAM] float 
 11579 ;; Auto vars:     Size  Location     Type
 11580 ;;  f3_as_produc    3   24[COMRAM] unsigned um
 11581 ;;  sign            1   28[COMRAM] unsigned char 
 11582 ;;  cntr            1   27[COMRAM] unsigned char 
 11583 ;;  exp             1   23[COMRAM] unsigned char 
 11584 ;; Return value:  Size  Location     Type
 11585 ;;                  3   14[COMRAM] float 
 11586 ;; Registers used:
 11587 ;;		wreg, status,2, status,0, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11593 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;Total ram usage:       15 bytes
 11598 ;; Hardware stack levels used: 1
 11599 ;; Hardware stack levels required when called: 1
 11600 ;; This function calls:
 11601 ;;		i2___ftpack
 11602 ;; This function is called by:
 11603 ;;		_TMR1_ISR
 11604 ;;		i2_fround
 11605 ;;		i2_scale
 11606 ;;		i2_sprintf
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           	psect	text53
 11611  00372C                     __ptext53:
 11612                           	callstack 0
 11613  00372C                     i2___ftmul:
 11614                           	callstack 21
 11615                           
 11616                           ;incstack = 0
 11617  00372C  C011  F015         	movff	i2___ftmul@f1+2,??i2___ftmul
 11618  003730  6A16               	clrf	(??i2___ftmul+1)^0,c
 11619  003732  6A17               	clrf	(??i2___ftmul+2)^0,c
 11620  003734  3410               	rlcf	(i2___ftmul@f1+1)^0,w,c
 11621  003736  3615               	rlcf	??i2___ftmul^0,f,c
 11622  003738  E301               	bnc	u432_41
 11623  00373A  8016               	bsf	(??i2___ftmul+1)^0,0,c
 11624  00373C                     u432_41:
 11625  00373C  5015               	movf	??i2___ftmul^0,w,c
 11626  00373E  6E18               	movwf	i2___ftmul@exp^0,c
 11627  003740  5018               	movf	i2___ftmul@exp^0,w,c
 11628  003742  A4D8               	btfss	status,2,c
 11629  003744  D007               	goto	i2l4108
 11630  003746  0E00               	movlw	0
 11631  003748  6E0F               	movwf	?i2___ftmul^0,c
 11632  00374A  0E00               	movlw	0
 11633  00374C  6E10               	movwf	(?i2___ftmul+1)^0,c
 11634  00374E  0E00               	movlw	0
 11635  003750  6E11               	movwf	(?i2___ftmul+2)^0,c
 11636  003752  0012               	return	
 11637  003754                     i2l4108:
 11638  003754  C014  F015         	movff	i2___ftmul@f2+2,??i2___ftmul
 11639  003758  6A16               	clrf	(??i2___ftmul+1)^0,c
 11640  00375A  6A17               	clrf	(??i2___ftmul+2)^0,c
 11641  00375C  3413               	rlcf	(i2___ftmul@f2+1)^0,w,c
 11642  00375E  3615               	rlcf	??i2___ftmul^0,f,c
 11643  003760  E301               	bnc	u434_41
 11644  003762  8016               	bsf	(??i2___ftmul+1)^0,0,c
 11645  003764                     u434_41:
 11646  003764  5015               	movf	??i2___ftmul^0,w,c
 11647  003766  6E1D               	movwf	i2___ftmul@sign^0,c
 11648  003768  501D               	movf	i2___ftmul@sign^0,w,c
 11649  00376A  A4D8               	btfss	status,2,c
 11650  00376C  D007               	goto	i2l4114
 11651  00376E  0E00               	movlw	0
 11652  003770  6E0F               	movwf	?i2___ftmul^0,c
 11653  003772  0E00               	movlw	0
 11654  003774  6E10               	movwf	(?i2___ftmul+1)^0,c
 11655  003776  0E00               	movlw	0
 11656  003778  6E11               	movwf	(?i2___ftmul+2)^0,c
 11657  00377A  0012               	return	
 11658  00377C                     i2l4114:
 11659  00377C  501D               	movf	i2___ftmul@sign^0,w,c
 11660  00377E  0F7B               	addlw	123
 11661  003780  2618               	addwf	i2___ftmul@exp^0,f,c
 11662  003782  C011  F01D         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 11663  003786  5014               	movf	(i2___ftmul@f2+2)^0,w,c
 11664  003788  1A1D               	xorwf	i2___ftmul@sign^0,f,c
 11665  00378A  0E80               	movlw	128
 11666  00378C  161D               	andwf	i2___ftmul@sign^0,f,c
 11667  00378E  8E10               	bsf	(i2___ftmul@f1+1)^0,7,c
 11668  003790  8E13               	bsf	(i2___ftmul@f2+1)^0,7,c
 11669  003792  0EFF               	movlw	255
 11670  003794  1612               	andwf	i2___ftmul@f2^0,f,c
 11671  003796  0EFF               	movlw	255
 11672  003798  1613               	andwf	(i2___ftmul@f2+1)^0,f,c
 11673  00379A  0E00               	movlw	0
 11674  00379C  1614               	andwf	(i2___ftmul@f2+2)^0,f,c
 11675  00379E  0E00               	movlw	0
 11676  0037A0  6E19               	movwf	i2___ftmul@f3_as_product^0,c
 11677  0037A2  0E00               	movlw	0
 11678  0037A4  6E1A               	movwf	(i2___ftmul@f3_as_product+1)^0,c
 11679  0037A6  0E00               	movlw	0
 11680  0037A8  6E1B               	movwf	(i2___ftmul@f3_as_product+2)^0,c
 11681  0037AA  0E07               	movlw	7
 11682  0037AC  6E1C               	movwf	i2___ftmul@cntr^0,c
 11683  0037AE                     i2l4128:
 11684  0037AE  A00F               	btfss	i2___ftmul@f1^0,0,c
 11685  0037B0  D006               	goto	i2l4132
 11686  0037B2  5012               	movf	i2___ftmul@f2^0,w,c
 11687  0037B4  2619               	addwf	i2___ftmul@f3_as_product^0,f,c
 11688  0037B6  5013               	movf	(i2___ftmul@f2+1)^0,w,c
 11689  0037B8  221A               	addwfc	(i2___ftmul@f3_as_product+1)^0,f,c
 11690  0037BA  5014               	movf	(i2___ftmul@f2+2)^0,w,c
 11691  0037BC  221B               	addwfc	(i2___ftmul@f3_as_product+2)^0,f,c
 11692  0037BE                     i2l4132:
 11693  0037BE  90D8               	bcf	status,0,c
 11694  0037C0  3211               	rrcf	(i2___ftmul@f1+2)^0,f,c
 11695  0037C2  3210               	rrcf	(i2___ftmul@f1+1)^0,f,c
 11696  0037C4  320F               	rrcf	i2___ftmul@f1^0,f,c
 11697  0037C6  90D8               	bcf	status,0,c
 11698  0037C8  3612               	rlcf	i2___ftmul@f2^0,f,c
 11699  0037CA  3613               	rlcf	(i2___ftmul@f2+1)^0,f,c
 11700  0037CC  3614               	rlcf	(i2___ftmul@f2+2)^0,f,c
 11701  0037CE  2E1C               	decfsz	i2___ftmul@cntr^0,f,c
 11702  0037D0  D7EE               	goto	i2l4128
 11703  0037D2  0E09               	movlw	9
 11704  0037D4  6E1C               	movwf	i2___ftmul@cntr^0,c
 11705  0037D6                     i2l4138:
 11706  0037D6  A00F               	btfss	i2___ftmul@f1^0,0,c
 11707  0037D8  D006               	goto	i2l4142
 11708  0037DA  5012               	movf	i2___ftmul@f2^0,w,c
 11709  0037DC  2619               	addwf	i2___ftmul@f3_as_product^0,f,c
 11710  0037DE  5013               	movf	(i2___ftmul@f2+1)^0,w,c
 11711  0037E0  221A               	addwfc	(i2___ftmul@f3_as_product+1)^0,f,c
 11712  0037E2  5014               	movf	(i2___ftmul@f2+2)^0,w,c
 11713  0037E4  221B               	addwfc	(i2___ftmul@f3_as_product+2)^0,f,c
 11714  0037E6                     i2l4142:
 11715  0037E6  90D8               	bcf	status,0,c
 11716  0037E8  3211               	rrcf	(i2___ftmul@f1+2)^0,f,c
 11717  0037EA  3210               	rrcf	(i2___ftmul@f1+1)^0,f,c
 11718  0037EC  320F               	rrcf	i2___ftmul@f1^0,f,c
 11719  0037EE  90D8               	bcf	status,0,c
 11720  0037F0  321B               	rrcf	(i2___ftmul@f3_as_product+2)^0,f,c
 11721  0037F2  321A               	rrcf	(i2___ftmul@f3_as_product+1)^0,f,c
 11722  0037F4  3219               	rrcf	i2___ftmul@f3_as_product^0,f,c
 11723  0037F6  2E1C               	decfsz	i2___ftmul@cntr^0,f,c
 11724  0037F8  D7EE               	goto	i2l4138
 11725  0037FA  C019  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 11726  0037FE  C01A  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 11727  003802  C01B  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 11728  003806  C018  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 11729  00380A  C01D  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 11730  00380E  EC9A  F01E         	call	i2___ftpack	;wreg free
 11731  003812  C001  F00F         	movff	?i2___ftpack,?i2___ftmul
 11732  003816  C002  F010         	movff	?i2___ftpack+1,?i2___ftmul+1
 11733  00381A  C003  F011         	movff	?i2___ftpack+2,?i2___ftmul+2
 11734  00381E  0012               	return		;funcret
 11735  003820                     __end_ofi2___ftmul:
 11736                           	callstack 0
 11737                           
 11738 ;; *************** function i2__tdiv_to_l_ *****************
 11739 ;; Defined at:
 11740 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdivl.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  f1              3    0[COMRAM] float 
 11743 ;;  f2              3    3[COMRAM] float 
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  quot            4    9[COMRAM] unsigned long 
 11746 ;;  exp1            1   14[COMRAM] unsigned char 
 11747 ;;  cntr            1   13[COMRAM] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  4    0[COMRAM] unsigned long 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11757 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;Total ram usage:       15 bytes
 11762 ;; Hardware stack levels used: 1
 11763 ;; This function calls:
 11764 ;;		Nothing
 11765 ;; This function is called by:
 11766 ;;		i2_sprintf
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           	psect	text54
 11771  003444                     __ptext54:
 11772                           	callstack 0
 11773  003444                     i2__tdiv_to_l_:
 11774                           	callstack 23
 11775                           
 11776                           ;incstack = 0
 11777  003444  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 11778  003448  6A08               	clrf	(??i2__tdiv_to_l_+1)^0,c
 11779  00344A  6A09               	clrf	(??i2__tdiv_to_l_+2)^0,c
 11780  00344C  3402               	rlcf	(i2__tdiv_to_l_@f1+1)^0,w,c
 11781  00344E  3607               	rlcf	??i2__tdiv_to_l_^0,f,c
 11782  003450  E301               	bnc	u498_41
 11783  003452  8008               	bsf	(??i2__tdiv_to_l_+1)^0,0,c
 11784  003454                     u498_41:
 11785  003454  5007               	movf	??i2__tdiv_to_l_^0,w,c
 11786  003456  6E0F               	movwf	i2__tdiv_to_l_@exp1^0,c
 11787  003458  500F               	movf	i2__tdiv_to_l_@exp1^0,w,c
 11788  00345A  A4D8               	btfss	status,2,c
 11789  00345C  D009               	goto	i2l4658
 11790  00345E                     i2u499_40:
 11791  00345E  0E00               	movlw	0
 11792  003460  6E01               	movwf	?i2__tdiv_to_l_^0,c
 11793  003462  0E00               	movlw	0
 11794  003464  6E02               	movwf	(?i2__tdiv_to_l_+1)^0,c
 11795  003466  0E00               	movlw	0
 11796  003468  6E03               	movwf	(?i2__tdiv_to_l_+2)^0,c
 11797  00346A  0E00               	movlw	0
 11798  00346C  6E04               	movwf	(?i2__tdiv_to_l_+3)^0,c
 11799  00346E  0012               	return	
 11800  003470                     i2l4658:
 11801  003470  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 11802  003474  6A08               	clrf	(??i2__tdiv_to_l_+1)^0,c
 11803  003476  6A09               	clrf	(??i2__tdiv_to_l_+2)^0,c
 11804  003478  3405               	rlcf	(i2__tdiv_to_l_@f2+1)^0,w,c
 11805  00347A  3607               	rlcf	??i2__tdiv_to_l_^0,f,c
 11806  00347C  E301               	bnc	u500_41
 11807  00347E  8008               	bsf	(??i2__tdiv_to_l_+1)^0,0,c
 11808  003480                     u500_41:
 11809  003480  5007               	movf	??i2__tdiv_to_l_^0,w,c
 11810  003482  6E0E               	movwf	i2__tdiv_to_l_@cntr^0,c
 11811  003484  500E               	movf	i2__tdiv_to_l_@cntr^0,w,c
 11812  003486  B4D8               	btfsc	status,2,c
 11813  003488  D7EA               	goto	i2u499_40
 11814  00348A  8E02               	bsf	(i2__tdiv_to_l_@f1+1)^0,7,c
 11815  00348C  0EFF               	movlw	255
 11816  00348E  1601               	andwf	i2__tdiv_to_l_@f1^0,f,c
 11817  003490  0EFF               	movlw	255
 11818  003492  1602               	andwf	(i2__tdiv_to_l_@f1+1)^0,f,c
 11819  003494  0E00               	movlw	0
 11820  003496  1603               	andwf	(i2__tdiv_to_l_@f1+2)^0,f,c
 11821  003498  8E05               	bsf	(i2__tdiv_to_l_@f2+1)^0,7,c
 11822  00349A  0EFF               	movlw	255
 11823  00349C  1604               	andwf	i2__tdiv_to_l_@f2^0,f,c
 11824  00349E  0EFF               	movlw	255
 11825  0034A0  1605               	andwf	(i2__tdiv_to_l_@f2+1)^0,f,c
 11826  0034A2  0E00               	movlw	0
 11827  0034A4  1606               	andwf	(i2__tdiv_to_l_@f2+2)^0,f,c
 11828  0034A6  0E00               	movlw	0
 11829  0034A8  6E0A               	movwf	i2__tdiv_to_l_@quot^0,c
 11830  0034AA  0E00               	movlw	0
 11831  0034AC  6E0B               	movwf	(i2__tdiv_to_l_@quot+1)^0,c
 11832  0034AE  0E00               	movlw	0
 11833  0034B0  6E0C               	movwf	(i2__tdiv_to_l_@quot+2)^0,c
 11834  0034B2  0E00               	movlw	0
 11835  0034B4  6E0D               	movwf	(i2__tdiv_to_l_@quot+3)^0,c
 11836  0034B6  0E7F               	movlw	127
 11837  0034B8  5E0F               	subwf	i2__tdiv_to_l_@exp1^0,f,c
 11838  0034BA  500E               	movf	i2__tdiv_to_l_@cntr^0,w,c
 11839  0034BC  0F98               	addlw	152
 11840  0034BE  5E0F               	subwf	i2__tdiv_to_l_@exp1^0,f,c
 11841  0034C0  0E18               	movlw	24
 11842  0034C2  6E0E               	movwf	i2__tdiv_to_l_@cntr^0,c
 11843  0034C4                     i2l709:
 11844  0034C4  90D8               	bcf	status,0,c
 11845  0034C6  360A               	rlcf	i2__tdiv_to_l_@quot^0,f,c
 11846  0034C8  360B               	rlcf	(i2__tdiv_to_l_@quot+1)^0,f,c
 11847  0034CA  360C               	rlcf	(i2__tdiv_to_l_@quot+2)^0,f,c
 11848  0034CC  360D               	rlcf	(i2__tdiv_to_l_@quot+3)^0,f,c
 11849  0034CE  5004               	movf	i2__tdiv_to_l_@f2^0,w,c
 11850  0034D0  5C01               	subwf	i2__tdiv_to_l_@f1^0,w,c
 11851  0034D2  5005               	movf	(i2__tdiv_to_l_@f2+1)^0,w,c
 11852  0034D4  5802               	subwfb	(i2__tdiv_to_l_@f1+1)^0,w,c
 11853  0034D6  5006               	movf	(i2__tdiv_to_l_@f2+2)^0,w,c
 11854  0034D8  5803               	subwfb	(i2__tdiv_to_l_@f1+2)^0,w,c
 11855  0034DA  A0D8               	btfss	status,0,c
 11856  0034DC  D007               	goto	i2l710
 11857  0034DE  5004               	movf	i2__tdiv_to_l_@f2^0,w,c
 11858  0034E0  5E01               	subwf	i2__tdiv_to_l_@f1^0,f,c
 11859  0034E2  5005               	movf	(i2__tdiv_to_l_@f2+1)^0,w,c
 11860  0034E4  5A02               	subwfb	(i2__tdiv_to_l_@f1+1)^0,f,c
 11861  0034E6  5006               	movf	(i2__tdiv_to_l_@f2+2)^0,w,c
 11862  0034E8  5A03               	subwfb	(i2__tdiv_to_l_@f1+2)^0,f,c
 11863  0034EA  800A               	bsf	i2__tdiv_to_l_@quot^0,0,c
 11864  0034EC                     i2l710:
 11865  0034EC  90D8               	bcf	status,0,c
 11866  0034EE  3601               	rlcf	i2__tdiv_to_l_@f1^0,f,c
 11867  0034F0  3602               	rlcf	(i2__tdiv_to_l_@f1+1)^0,f,c
 11868  0034F2  3603               	rlcf	(i2__tdiv_to_l_@f1+2)^0,f,c
 11869  0034F4  2E0E               	decfsz	i2__tdiv_to_l_@cntr^0,f,c
 11870  0034F6  D7E6               	goto	i2l709
 11871  0034F8  AE0F               	btfss	i2__tdiv_to_l_@exp1^0,7,c
 11872  0034FA  D00D               	goto	i2l4698
 11873  0034FC  500F               	movf	i2__tdiv_to_l_@exp1^0,w,c
 11874  0034FE  0A80               	xorlw	128
 11875  003500  0F97               	addlw	151
 11876  003502  A0D8               	btfss	status,0,c
 11877  003504  D7AC               	goto	i2u499_40
 11878  003506                     i2l4694:
 11879  003506  90D8               	bcf	status,0,c
 11880  003508  320D               	rrcf	(i2__tdiv_to_l_@quot+3)^0,f,c
 11881  00350A  320C               	rrcf	(i2__tdiv_to_l_@quot+2)^0,f,c
 11882  00350C  320B               	rrcf	(i2__tdiv_to_l_@quot+1)^0,f,c
 11883  00350E  320A               	rrcf	i2__tdiv_to_l_@quot^0,f,c
 11884  003510  3E0F               	incfsz	i2__tdiv_to_l_@exp1^0,f,c
 11885  003512  D7F9               	goto	i2l4694
 11886  003514  D00D               	goto	i2u506_40
 11887  003516                     i2l4698:
 11888  003516  0E17               	movlw	23
 11889  003518  640F               	cpfsgt	i2__tdiv_to_l_@exp1^0,c
 11890  00351A  D007               	goto	i2l4706
 11891  00351C  D7A0               	goto	i2u499_40
 11892  00351E                     i2l4704:
 11893  00351E  90D8               	bcf	status,0,c
 11894  003520  360A               	rlcf	i2__tdiv_to_l_@quot^0,f,c
 11895  003522  360B               	rlcf	(i2__tdiv_to_l_@quot+1)^0,f,c
 11896  003524  360C               	rlcf	(i2__tdiv_to_l_@quot+2)^0,f,c
 11897  003526  360D               	rlcf	(i2__tdiv_to_l_@quot+3)^0,f,c
 11898  003528  060F               	decf	i2__tdiv_to_l_@exp1^0,f,c
 11899  00352A                     i2l4706:
 11900  00352A  500F               	movf	i2__tdiv_to_l_@exp1^0,w,c
 11901  00352C  A4D8               	btfss	status,2,c
 11902  00352E  D7F7               	goto	i2l4704
 11903  003530                     i2u506_40:
 11904  003530  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 11905  003534  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 11906  003538  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 11907  00353C  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 11908  003540  0012               	return		;funcret
 11909  003542                     __end_ofi2__tdiv_to_l_:
 11910                           	callstack 0
 11911                           
 11912 ;; *************** function i2__div_to_l_ *****************
 11913 ;; Defined at:
 11914 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fldivl.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;  f1              3    0[COMRAM] unsigned long 
 11917 ;;  f2              3    3[COMRAM] unsigned long 
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;  quot            4    6[COMRAM] unsigned long 
 11920 ;;  exp1            1   11[COMRAM] unsigned char 
 11921 ;;  cntr            1   10[COMRAM] unsigned char 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  4    0[COMRAM] unsigned long 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2, status,0
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11931 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;Total ram usage:       12 bytes
 11936 ;; Hardware stack levels used: 1
 11937 ;; This function calls:
 11938 ;;		Nothing
 11939 ;; This function is called by:
 11940 ;;		i2_sprintf
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           	psect	text55
 11945  003820                     __ptext55:
 11946                           	callstack 0
 11947  003820                     i2__div_to_l_:
 11948                           	callstack 23
 11949                           
 11950                           ;incstack = 0
 11951  003820  3403               	rlcf	(i2__div_to_l_@f1+2)^0,w,c
 11952  003822  3404               	rlcf	(i2__div_to_l_@f1+3)^0,w,c
 11953  003824  6E0C               	movwf	i2__div_to_l_@exp1^0,c
 11954  003826  500C               	movf	i2__div_to_l_@exp1^0,w,c
 11955  003828  A4D8               	btfss	status,2,c
 11956  00382A  D009               	goto	i2l4598
 11957  00382C                     i2u491_40:
 11958  00382C  0E00               	movlw	0
 11959  00382E  6E01               	movwf	?i2__div_to_l_^0,c
 11960  003830  0E00               	movlw	0
 11961  003832  6E02               	movwf	(?i2__div_to_l_+1)^0,c
 11962  003834  0E00               	movlw	0
 11963  003836  6E03               	movwf	(?i2__div_to_l_+2)^0,c
 11964  003838  0E00               	movlw	0
 11965  00383A  6E04               	movwf	(?i2__div_to_l_+3)^0,c
 11966  00383C  0012               	return	
 11967  00383E                     i2l4598:
 11968  00383E  3406               	rlcf	(i2__div_to_l_@f2+2)^0,w,c
 11969  003840  3407               	rlcf	(i2__div_to_l_@f2+3)^0,w,c
 11970  003842  6E0B               	movwf	i2__div_to_l_@cntr^0,c
 11971  003844  500B               	movf	i2__div_to_l_@cntr^0,w,c
 11972  003846  B4D8               	btfsc	status,2,c
 11973  003848  D7F1               	goto	i2u491_40
 11974  00384A  8E03               	bsf	(i2__div_to_l_@f1+2)^0,7,c
 11975  00384C  0EFF               	movlw	255
 11976  00384E  1601               	andwf	i2__div_to_l_@f1^0,f,c
 11977  003850  0EFF               	movlw	255
 11978  003852  1602               	andwf	(i2__div_to_l_@f1+1)^0,f,c
 11979  003854  0EFF               	movlw	255
 11980  003856  1603               	andwf	(i2__div_to_l_@f1+2)^0,f,c
 11981  003858  0E00               	movlw	0
 11982  00385A  1604               	andwf	(i2__div_to_l_@f1+3)^0,f,c
 11983  00385C  8E06               	bsf	(i2__div_to_l_@f2+2)^0,7,c
 11984  00385E  0EFF               	movlw	255
 11985  003860  1604               	andwf	i2__div_to_l_@f2^0,f,c
 11986  003862  0EFF               	movlw	255
 11987  003864  1605               	andwf	(i2__div_to_l_@f2+1)^0,f,c
 11988  003866  0EFF               	movlw	255
 11989  003868  1606               	andwf	(i2__div_to_l_@f2+2)^0,f,c
 11990  00386A  0E00               	movlw	0
 11991  00386C  1607               	andwf	(i2__div_to_l_@f2+3)^0,f,c
 11992  00386E  0E00               	movlw	0
 11993  003870  6E07               	movwf	i2__div_to_l_@quot^0,c
 11994  003872  0E00               	movlw	0
 11995  003874  6E08               	movwf	(i2__div_to_l_@quot+1)^0,c
 11996  003876  0E00               	movlw	0
 11997  003878  6E09               	movwf	(i2__div_to_l_@quot+2)^0,c
 11998  00387A  0E00               	movlw	0
 11999  00387C  6E0A               	movwf	(i2__div_to_l_@quot+3)^0,c
 12000  00387E  0E7F               	movlw	127
 12001  003880  5E0C               	subwf	i2__div_to_l_@exp1^0,f,c
 12002  003882  500B               	movf	i2__div_to_l_@cntr^0,w,c
 12003  003884  0FA0               	addlw	160
 12004  003886  5E0C               	subwf	i2__div_to_l_@exp1^0,f,c
 12005  003888  0E20               	movlw	32
 12006  00388A  6E0B               	movwf	i2__div_to_l_@cntr^0,c
 12007  00388C                     i2l4618:
 12008  00388C  90D8               	bcf	status,0,c
 12009  00388E  3607               	rlcf	i2__div_to_l_@quot^0,f,c
 12010  003890  3608               	rlcf	(i2__div_to_l_@quot+1)^0,f,c
 12011  003892  3609               	rlcf	(i2__div_to_l_@quot+2)^0,f,c
 12012  003894  360A               	rlcf	(i2__div_to_l_@quot+3)^0,f,c
 12013  003896  5004               	movf	i2__div_to_l_@f2^0,w,c
 12014  003898  5C01               	subwf	i2__div_to_l_@f1^0,w,c
 12015  00389A  5005               	movf	(i2__div_to_l_@f2+1)^0,w,c
 12016  00389C  5802               	subwfb	(i2__div_to_l_@f1+1)^0,w,c
 12017  00389E  5006               	movf	(i2__div_to_l_@f2+2)^0,w,c
 12018  0038A0  5803               	subwfb	(i2__div_to_l_@f1+2)^0,w,c
 12019  0038A2  5007               	movf	(i2__div_to_l_@f2+3)^0,w,c
 12020  0038A4  5804               	subwfb	(i2__div_to_l_@f1+3)^0,w,c
 12021  0038A6  A0D8               	btfss	status,0,c
 12022  0038A8  D009               	goto	i2l4626
 12023  0038AA  5004               	movf	i2__div_to_l_@f2^0,w,c
 12024  0038AC  5E01               	subwf	i2__div_to_l_@f1^0,f,c
 12025  0038AE  5005               	movf	(i2__div_to_l_@f2+1)^0,w,c
 12026  0038B0  5A02               	subwfb	(i2__div_to_l_@f1+1)^0,f,c
 12027  0038B2  5006               	movf	(i2__div_to_l_@f2+2)^0,w,c
 12028  0038B4  5A03               	subwfb	(i2__div_to_l_@f1+2)^0,f,c
 12029  0038B6  5007               	movf	(i2__div_to_l_@f2+3)^0,w,c
 12030  0038B8  5A04               	subwfb	(i2__div_to_l_@f1+3)^0,f,c
 12031  0038BA  8007               	bsf	i2__div_to_l_@quot^0,0,c
 12032  0038BC                     i2l4626:
 12033  0038BC  90D8               	bcf	status,0,c
 12034  0038BE  3601               	rlcf	i2__div_to_l_@f1^0,f,c
 12035  0038C0  3602               	rlcf	(i2__div_to_l_@f1+1)^0,f,c
 12036  0038C2  3603               	rlcf	(i2__div_to_l_@f1+2)^0,f,c
 12037  0038C4  3604               	rlcf	(i2__div_to_l_@f1+3)^0,f,c
 12038  0038C6  2E0B               	decfsz	i2__div_to_l_@cntr^0,f,c
 12039  0038C8  D7E1               	goto	i2l4618
 12040  0038CA  AE0C               	btfss	i2__div_to_l_@exp1^0,7,c
 12041  0038CC  D00D               	goto	i2l4642
 12042  0038CE  500C               	movf	i2__div_to_l_@exp1^0,w,c
 12043  0038D0  0A80               	xorlw	128
 12044  0038D2  0F9F               	addlw	159
 12045  0038D4  A0D8               	btfss	status,0,c
 12046  0038D6  D7AA               	goto	i2u491_40
 12047  0038D8                     i2l4638:
 12048  0038D8  90D8               	bcf	status,0,c
 12049  0038DA  320A               	rrcf	(i2__div_to_l_@quot+3)^0,f,c
 12050  0038DC  3209               	rrcf	(i2__div_to_l_@quot+2)^0,f,c
 12051  0038DE  3208               	rrcf	(i2__div_to_l_@quot+1)^0,f,c
 12052  0038E0  3207               	rrcf	i2__div_to_l_@quot^0,f,c
 12053  0038E2  3E0C               	incfsz	i2__div_to_l_@exp1^0,f,c
 12054  0038E4  D7F9               	goto	i2l4638
 12055  0038E6  D00D               	goto	i2u497_40
 12056  0038E8                     i2l4642:
 12057  0038E8  0E1F               	movlw	31
 12058  0038EA  640C               	cpfsgt	i2__div_to_l_@exp1^0,c
 12059  0038EC  D007               	goto	i2l4650
 12060  0038EE  D79E               	goto	i2u491_40
 12061  0038F0                     i2l4648:
 12062  0038F0  90D8               	bcf	status,0,c
 12063  0038F2  3607               	rlcf	i2__div_to_l_@quot^0,f,c
 12064  0038F4  3608               	rlcf	(i2__div_to_l_@quot+1)^0,f,c
 12065  0038F6  3609               	rlcf	(i2__div_to_l_@quot+2)^0,f,c
 12066  0038F8  360A               	rlcf	(i2__div_to_l_@quot+3)^0,f,c
 12067  0038FA  060C               	decf	i2__div_to_l_@exp1^0,f,c
 12068  0038FC                     i2l4650:
 12069  0038FC  500C               	movf	i2__div_to_l_@exp1^0,w,c
 12070  0038FE  A4D8               	btfss	status,2,c
 12071  003900  D7F7               	goto	i2l4648
 12072  003902                     i2u497_40:
 12073  003902  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 12074  003906  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 12075  00390A  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 12076  00390E  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 12077  003912  0012               	return		;funcret
 12078  003914                     __end_ofi2__div_to_l_:
 12079                           	callstack 0
 12080                           
 12081 ;; *************** function i2___lltoft *****************
 12082 ;; Defined at:
 12083 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lltoft.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;  c               4    8[COMRAM] unsigned long 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  exp             1   16[COMRAM] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  3    8[COMRAM] float 
 12090 ;; Registers used:
 12091 ;;		wreg, status,2, status,0, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;Total ram usage:        9 bytes
 12102 ;; Hardware stack levels used: 1
 12103 ;; Hardware stack levels required when called: 1
 12104 ;; This function calls:
 12105 ;;		i2___ftpack
 12106 ;; This function is called by:
 12107 ;;		i2_sprintf
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text56
 12112  00450C                     __ptext56:
 12113                           	callstack 0
 12114  00450C                     i2___lltoft:
 12115                           	callstack 22
 12116                           
 12117                           ;incstack = 0
 12118  00450C  0E8E               	movlw	142
 12119  00450E  6E11               	movwf	i2___lltoft@exp^0,c
 12120  004510  D006               	goto	i2l4804
 12121  004512                     i2l4802:
 12122  004512  90D8               	bcf	status,0,c
 12123  004514  320C               	rrcf	(i2___lltoft@c+3)^0,f,c
 12124  004516  320B               	rrcf	(i2___lltoft@c+2)^0,f,c
 12125  004518  320A               	rrcf	(i2___lltoft@c+1)^0,f,c
 12126  00451A  3209               	rrcf	i2___lltoft@c^0,f,c
 12127  00451C  2A11               	incf	i2___lltoft@exp^0,f,c
 12128  00451E                     i2l4804:
 12129  00451E  0E00               	movlw	0
 12130  004520  1409               	andwf	i2___lltoft@c^0,w,c
 12131  004522  6E0D               	movwf	??i2___lltoft^0,c
 12132  004524  0E00               	movlw	0
 12133  004526  140A               	andwf	(i2___lltoft@c+1)^0,w,c
 12134  004528  6E0E               	movwf	(??i2___lltoft+1)^0,c
 12135  00452A  0E00               	movlw	0
 12136  00452C  140B               	andwf	(i2___lltoft@c+2)^0,w,c
 12137  00452E  6E0F               	movwf	(??i2___lltoft+2)^0,c
 12138  004530  0EFF               	movlw	255
 12139  004532  140C               	andwf	(i2___lltoft@c+3)^0,w,c
 12140  004534  6E10               	movwf	(??i2___lltoft+3)^0,c
 12141  004536  500D               	movf	??i2___lltoft^0,w,c
 12142  004538  100E               	iorwf	(??i2___lltoft+1)^0,w,c
 12143  00453A  100F               	iorwf	(??i2___lltoft+2)^0,w,c
 12144  00453C  1010               	iorwf	(??i2___lltoft+3)^0,w,c
 12145  00453E  A4D8               	btfss	status,2,c
 12146  004540  D7E8               	goto	i2l4802
 12147  004542  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 12148  004546  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 12149  00454A  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 12150  00454E  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 12151  004552  0E00               	movlw	0
 12152  004554  6E05               	movwf	i2___ftpack@sign^0,c
 12153  004556  EC9A  F01E         	call	i2___ftpack	;wreg free
 12154  00455A  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 12155  00455E  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 12156  004562  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 12157  004566  0012               	return		;funcret
 12158  004568                     __end_ofi2___lltoft:
 12159                           	callstack 0
 12160                           
 12161 ;; *************** function i2___llmod *****************
 12162 ;; Defined at:
 12163 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\llmod.c"
 12164 ;; Parameters:    Size  Location     Type
 12165 ;;  dividend        4   13[COMRAM] unsigned long 
 12166 ;;  divisor         4   17[COMRAM] unsigned long 
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;  counter         1   21[COMRAM] unsigned char 
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  4   13[COMRAM] unsigned long 
 12171 ;; Registers used:
 12172 ;;		wreg, status,2, status,0
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12178 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12181 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12182 ;;Total ram usage:        9 bytes
 12183 ;; Hardware stack levels used: 1
 12184 ;; This function calls:
 12185 ;;		Nothing
 12186 ;; This function is called by:
 12187 ;;		i2_sprintf
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           	psect	text57
 12192  0043EE                     __ptext57:
 12193                           	callstack 0
 12194  0043EE                     i2___llmod:
 12195                           	callstack 23
 12196                           
 12197                           ;incstack = 0
 12198  0043EE  5012               	movf	i2___llmod@divisor^0,w,c
 12199  0043F0  1013               	iorwf	(i2___llmod@divisor+1)^0,w,c
 12200  0043F2  1014               	iorwf	(i2___llmod@divisor+2)^0,w,c
 12201  0043F4  1015               	iorwf	(i2___llmod@divisor+3)^0,w,c
 12202  0043F6  B4D8               	btfsc	status,2,c
 12203  0043F8  D024               	goto	i2l786
 12204  0043FA  0E01               	movlw	1
 12205  0043FC  6E16               	movwf	i2___llmod@counter^0,c
 12206  0043FE  D006               	goto	i2l4790
 12207  004400                     i2l4788:
 12208  004400  90D8               	bcf	status,0,c
 12209  004402  3612               	rlcf	i2___llmod@divisor^0,f,c
 12210  004404  3613               	rlcf	(i2___llmod@divisor+1)^0,f,c
 12211  004406  3614               	rlcf	(i2___llmod@divisor+2)^0,f,c
 12212  004408  3615               	rlcf	(i2___llmod@divisor+3)^0,f,c
 12213  00440A  2A16               	incf	i2___llmod@counter^0,f,c
 12214  00440C                     i2l4790:
 12215  00440C  AE15               	btfss	(i2___llmod@divisor+3)^0,7,c
 12216  00440E  D7F8               	goto	i2l4788
 12217  004410                     i2u521_40:
 12218  004410  5012               	movf	i2___llmod@divisor^0,w,c
 12219  004412  5C0E               	subwf	i2___llmod@dividend^0,w,c
 12220  004414  5013               	movf	(i2___llmod@divisor+1)^0,w,c
 12221  004416  580F               	subwfb	(i2___llmod@dividend+1)^0,w,c
 12222  004418  5014               	movf	(i2___llmod@divisor+2)^0,w,c
 12223  00441A  5810               	subwfb	(i2___llmod@dividend+2)^0,w,c
 12224  00441C  5015               	movf	(i2___llmod@divisor+3)^0,w,c
 12225  00441E  5811               	subwfb	(i2___llmod@dividend+3)^0,w,c
 12226  004420  A0D8               	btfss	status,0,c
 12227  004422  D008               	goto	i2l4796
 12228  004424  5012               	movf	i2___llmod@divisor^0,w,c
 12229  004426  5E0E               	subwf	i2___llmod@dividend^0,f,c
 12230  004428  5013               	movf	(i2___llmod@divisor+1)^0,w,c
 12231  00442A  5A0F               	subwfb	(i2___llmod@dividend+1)^0,f,c
 12232  00442C  5014               	movf	(i2___llmod@divisor+2)^0,w,c
 12233  00442E  5A10               	subwfb	(i2___llmod@dividend+2)^0,f,c
 12234  004430  5015               	movf	(i2___llmod@divisor+3)^0,w,c
 12235  004432  5A11               	subwfb	(i2___llmod@dividend+3)^0,f,c
 12236  004434                     i2l4796:
 12237  004434  90D8               	bcf	status,0,c
 12238  004436  3215               	rrcf	(i2___llmod@divisor+3)^0,f,c
 12239  004438  3214               	rrcf	(i2___llmod@divisor+2)^0,f,c
 12240  00443A  3213               	rrcf	(i2___llmod@divisor+1)^0,f,c
 12241  00443C  3212               	rrcf	i2___llmod@divisor^0,f,c
 12242  00443E  2E16               	decfsz	i2___llmod@counter^0,f,c
 12243  004440  D7E7               	goto	i2u521_40
 12244  004442                     i2l786:
 12245  004442  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 12246  004446  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 12247  00444A  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 12248  00444E  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 12249  004452  0012               	return		;funcret
 12250  004454                     __end_ofi2___llmod:
 12251                           	callstack 0
 12252                           
 12253 ;; *************** function i2___lldiv *****************
 12254 ;; Defined at:
 12255 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\__lldiv.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;  dividend        4    0[COMRAM] unsigned long 
 12258 ;;  divisor         4    4[COMRAM] unsigned long 
 12259 ;; Auto vars:     Size  Location     Type
 12260 ;;  quotient        4    8[COMRAM] unsigned long 
 12261 ;;  counter         1   12[COMRAM] unsigned char 
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  4    0[COMRAM] unsigned long 
 12264 ;; Registers used:
 12265 ;;		wreg, status,2, status,0
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12271 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12272 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;Total ram usage:       13 bytes
 12276 ;; Hardware stack levels used: 1
 12277 ;; This function calls:
 12278 ;;		Nothing
 12279 ;; This function is called by:
 12280 ;;		i2_sprintf
 12281 ;; This function uses a non-reentrant model
 12282 ;;
 12283                           
 12284                           	psect	text58
 12285  00413E                     __ptext58:
 12286                           	callstack 0
 12287  00413E                     i2___lldiv:
 12288                           	callstack 23
 12289                           
 12290                           ;incstack = 0
 12291  00413E  0E00               	movlw	0
 12292  004140  6E09               	movwf	i2___lldiv@quotient^0,c
 12293  004142  0E00               	movlw	0
 12294  004144  6E0A               	movwf	(i2___lldiv@quotient+1)^0,c
 12295  004146  0E00               	movlw	0
 12296  004148  6E0B               	movwf	(i2___lldiv@quotient+2)^0,c
 12297  00414A  0E00               	movlw	0
 12298  00414C  6E0C               	movwf	(i2___lldiv@quotient+3)^0,c
 12299  00414E  5005               	movf	i2___lldiv@divisor^0,w,c
 12300  004150  1006               	iorwf	(i2___lldiv@divisor+1)^0,w,c
 12301  004152  1007               	iorwf	(i2___lldiv@divisor+2)^0,w,c
 12302  004154  1008               	iorwf	(i2___lldiv@divisor+3)^0,w,c
 12303  004156  B4D8               	btfsc	status,2,c
 12304  004158  D02A               	goto	i2l371
 12305  00415A  0E01               	movlw	1
 12306  00415C  6E0D               	movwf	i2___lldiv@counter^0,c
 12307  00415E  D006               	goto	i2l4578
 12308  004160                     i2l4576:
 12309  004160  90D8               	bcf	status,0,c
 12310  004162  3605               	rlcf	i2___lldiv@divisor^0,f,c
 12311  004164  3606               	rlcf	(i2___lldiv@divisor+1)^0,f,c
 12312  004166  3607               	rlcf	(i2___lldiv@divisor+2)^0,f,c
 12313  004168  3608               	rlcf	(i2___lldiv@divisor+3)^0,f,c
 12314  00416A  2A0D               	incf	i2___lldiv@counter^0,f,c
 12315  00416C                     i2l4578:
 12316  00416C  AE08               	btfss	(i2___lldiv@divisor+3)^0,7,c
 12317  00416E  D7F8               	goto	i2l4576
 12318  004170                     i2u489_40:
 12319  004170  90D8               	bcf	status,0,c
 12320  004172  3609               	rlcf	i2___lldiv@quotient^0,f,c
 12321  004174  360A               	rlcf	(i2___lldiv@quotient+1)^0,f,c
 12322  004176  360B               	rlcf	(i2___lldiv@quotient+2)^0,f,c
 12323  004178  360C               	rlcf	(i2___lldiv@quotient+3)^0,f,c
 12324  00417A  5005               	movf	i2___lldiv@divisor^0,w,c
 12325  00417C  5C01               	subwf	i2___lldiv@dividend^0,w,c
 12326  00417E  5006               	movf	(i2___lldiv@divisor+1)^0,w,c
 12327  004180  5802               	subwfb	(i2___lldiv@dividend+1)^0,w,c
 12328  004182  5007               	movf	(i2___lldiv@divisor+2)^0,w,c
 12329  004184  5803               	subwfb	(i2___lldiv@dividend+2)^0,w,c
 12330  004186  5008               	movf	(i2___lldiv@divisor+3)^0,w,c
 12331  004188  5804               	subwfb	(i2___lldiv@dividend+3)^0,w,c
 12332  00418A  A0D8               	btfss	status,0,c
 12333  00418C  D009               	goto	i2l4588
 12334  00418E  5005               	movf	i2___lldiv@divisor^0,w,c
 12335  004190  5E01               	subwf	i2___lldiv@dividend^0,f,c
 12336  004192  5006               	movf	(i2___lldiv@divisor+1)^0,w,c
 12337  004194  5A02               	subwfb	(i2___lldiv@dividend+1)^0,f,c
 12338  004196  5007               	movf	(i2___lldiv@divisor+2)^0,w,c
 12339  004198  5A03               	subwfb	(i2___lldiv@dividend+2)^0,f,c
 12340  00419A  5008               	movf	(i2___lldiv@divisor+3)^0,w,c
 12341  00419C  5A04               	subwfb	(i2___lldiv@dividend+3)^0,f,c
 12342  00419E  8009               	bsf	i2___lldiv@quotient^0,0,c
 12343  0041A0                     i2l4588:
 12344  0041A0  90D8               	bcf	status,0,c
 12345  0041A2  3208               	rrcf	(i2___lldiv@divisor+3)^0,f,c
 12346  0041A4  3207               	rrcf	(i2___lldiv@divisor+2)^0,f,c
 12347  0041A6  3206               	rrcf	(i2___lldiv@divisor+1)^0,f,c
 12348  0041A8  3205               	rrcf	i2___lldiv@divisor^0,f,c
 12349  0041AA  2E0D               	decfsz	i2___lldiv@counter^0,f,c
 12350  0041AC  D7E1               	goto	i2u489_40
 12351  0041AE                     i2l371:
 12352  0041AE  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 12353  0041B2  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 12354  0041B6  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 12355  0041BA  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 12356  0041BE  0012               	return		;funcret
 12357  0041C0                     __end_ofi2___lldiv:
 12358                           	callstack 0
 12359                           
 12360 ;; *************** function i2___fttol *****************
 12361 ;; Defined at:
 12362 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fttol.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;  f1              3   29[COMRAM] float 
 12365 ;; Auto vars:     Size  Location     Type
 12366 ;;  lval            4   39[COMRAM] unsigned long 
 12367 ;;  exp1            1   43[COMRAM] unsigned char 
 12368 ;;  sign1           1   38[COMRAM] unsigned char 
 12369 ;; Return value:  Size  Location     Type
 12370 ;;                  4   29[COMRAM] long 
 12371 ;; Registers used:
 12372 ;;		wreg, status,2, status,0
 12373 ;; Tracked objects:
 12374 ;;		On entry : 0/0
 12375 ;;		On exit  : 0/0
 12376 ;;		Unchanged: 0/0
 12377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12379 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12380 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12381 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12382 ;;Total ram usage:       15 bytes
 12383 ;; Hardware stack levels used: 1
 12384 ;; This function calls:
 12385 ;;		Nothing
 12386 ;; This function is called by:
 12387 ;;		_TMR1_ISR
 12388 ;;		i2_sprintf
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	text59
 12393  003BB4                     __ptext59:
 12394                           	callstack 0
 12395  003BB4                     i2___fttol:
 12396                           	callstack 23
 12397                           
 12398                           ;incstack = 0
 12399  003BB4  C020  F022         	movff	i2___fttol@f1+2,??i2___fttol
 12400  003BB8  6A23               	clrf	(??i2___fttol+1)^0,c
 12401  003BBA  6A24               	clrf	(??i2___fttol+2)^0,c
 12402  003BBC  341F               	rlcf	(i2___fttol@f1+1)^0,w,c
 12403  003BBE  3622               	rlcf	??i2___fttol^0,f,c
 12404  003BC0  E301               	bnc	u512_41
 12405  003BC2  8023               	bsf	(??i2___fttol+1)^0,0,c
 12406  003BC4                     u512_41:
 12407  003BC4  5022               	movf	??i2___fttol^0,w,c
 12408  003BC6  6E2C               	movwf	i2___fttol@exp1^0,c
 12409  003BC8  502C               	movf	i2___fttol@exp1^0,w,c
 12410  003BCA  A4D8               	btfss	status,2,c
 12411  003BCC  D009               	goto	i2l4744
 12412  003BCE                     i2u513_40:
 12413  003BCE  0E00               	movlw	0
 12414  003BD0  6E1E               	movwf	?i2___fttol^0,c
 12415  003BD2  0E00               	movlw	0
 12416  003BD4  6E1F               	movwf	(?i2___fttol+1)^0,c
 12417  003BD6  0E00               	movlw	0
 12418  003BD8  6E20               	movwf	(?i2___fttol+2)^0,c
 12419  003BDA  0E00               	movlw	0
 12420  003BDC  6E21               	movwf	(?i2___fttol+3)^0,c
 12421  003BDE  0012               	return	
 12422  003BE0                     i2l4744:
 12423  003BE0  0E17               	movlw	23
 12424  003BE2  6E22               	movwf	??i2___fttol^0,c
 12425  003BE4  C01E  F023         	movff	i2___fttol@f1,??i2___fttol+1
 12426  003BE8  C01F  F024         	movff	i2___fttol@f1+1,??i2___fttol+2
 12427  003BEC  C020  F025         	movff	i2___fttol@f1+2,??i2___fttol+3
 12428  003BF0  2822               	incf	??i2___fttol^0,w,c
 12429  003BF2  6E26               	movwf	(??i2___fttol+4)^0,c
 12430  003BF4  D004               	goto	i2u514_40
 12431  003BF6                     i2u514_45:
 12432  003BF6  90D8               	bcf	status,0,c
 12433  003BF8  3225               	rrcf	(??i2___fttol+3)^0,f,c
 12434  003BFA  3224               	rrcf	(??i2___fttol+2)^0,f,c
 12435  003BFC  3223               	rrcf	(??i2___fttol+1)^0,f,c
 12436  003BFE                     i2u514_40:
 12437  003BFE  2E26               	decfsz	(??i2___fttol+4)^0,f,c
 12438  003C00  D7FA               	goto	i2u514_45
 12439  003C02  5023               	movf	(??i2___fttol+1)^0,w,c
 12440  003C04  6E27               	movwf	i2___fttol@sign1^0,c
 12441  003C06  8E1F               	bsf	(i2___fttol@f1+1)^0,7,c
 12442  003C08  0EFF               	movlw	255
 12443  003C0A  161E               	andwf	i2___fttol@f1^0,f,c
 12444  003C0C  0EFF               	movlw	255
 12445  003C0E  161F               	andwf	(i2___fttol@f1+1)^0,f,c
 12446  003C10  0E00               	movlw	0
 12447  003C12  1620               	andwf	(i2___fttol@f1+2)^0,f,c
 12448  003C14  501E               	movf	i2___fttol@f1^0,w,c
 12449  003C16  6E28               	movwf	i2___fttol@lval^0,c
 12450  003C18  501F               	movf	(i2___fttol@f1+1)^0,w,c
 12451  003C1A  6E29               	movwf	(i2___fttol@lval+1)^0,c
 12452  003C1C  5020               	movf	(i2___fttol@f1+2)^0,w,c
 12453  003C1E  6E2A               	movwf	(i2___fttol@lval+2)^0,c
 12454  003C20  6A2B               	clrf	(i2___fttol@lval+3)^0,c
 12455  003C22  0E8E               	movlw	142
 12456  003C24  5E2C               	subwf	i2___fttol@exp1^0,f,c
 12457  003C26  AE2C               	btfss	i2___fttol@exp1^0,7,c
 12458  003C28  D00D               	goto	i2l4766
 12459  003C2A  502C               	movf	i2___fttol@exp1^0,w,c
 12460  003C2C  0A80               	xorlw	128
 12461  003C2E  0F8F               	addlw	143
 12462  003C30  A0D8               	btfss	status,0,c
 12463  003C32  D7CD               	goto	i2u513_40
 12464  003C34                     i2l4762:
 12465  003C34  90D8               	bcf	status,0,c
 12466  003C36  322B               	rrcf	(i2___fttol@lval+3)^0,f,c
 12467  003C38  322A               	rrcf	(i2___fttol@lval+2)^0,f,c
 12468  003C3A  3229               	rrcf	(i2___fttol@lval+1)^0,f,c
 12469  003C3C  3228               	rrcf	i2___fttol@lval^0,f,c
 12470  003C3E  3E2C               	incfsz	i2___fttol@exp1^0,f,c
 12471  003C40  D7F9               	goto	i2l4762
 12472  003C42  D00D               	goto	i2u518_40
 12473  003C44                     i2l4766:
 12474  003C44  0E17               	movlw	23
 12475  003C46  642C               	cpfsgt	i2___fttol@exp1^0,c
 12476  003C48  D007               	goto	i2l4774
 12477  003C4A  D7C1               	goto	i2u513_40
 12478  003C4C                     i2l4772:
 12479  003C4C  90D8               	bcf	status,0,c
 12480  003C4E  3628               	rlcf	i2___fttol@lval^0,f,c
 12481  003C50  3629               	rlcf	(i2___fttol@lval+1)^0,f,c
 12482  003C52  362A               	rlcf	(i2___fttol@lval+2)^0,f,c
 12483  003C54  362B               	rlcf	(i2___fttol@lval+3)^0,f,c
 12484  003C56  062C               	decf	i2___fttol@exp1^0,f,c
 12485  003C58                     i2l4774:
 12486  003C58  502C               	movf	i2___fttol@exp1^0,w,c
 12487  003C5A  A4D8               	btfss	status,2,c
 12488  003C5C  D7F7               	goto	i2l4772
 12489  003C5E                     i2u518_40:
 12490  003C5E  5027               	movf	i2___fttol@sign1^0,w,c
 12491  003C60  B4D8               	btfsc	status,2,c
 12492  003C62  D008               	goto	i2l4780
 12493  003C64  1E2B               	comf	(i2___fttol@lval+3)^0,f,c
 12494  003C66  1E2A               	comf	(i2___fttol@lval+2)^0,f,c
 12495  003C68  1E29               	comf	(i2___fttol@lval+1)^0,f,c
 12496  003C6A  6C28               	negf	i2___fttol@lval^0,c
 12497  003C6C  0E00               	movlw	0
 12498  003C6E  2229               	addwfc	(i2___fttol@lval+1)^0,f,c
 12499  003C70  222A               	addwfc	(i2___fttol@lval+2)^0,f,c
 12500  003C72  222B               	addwfc	(i2___fttol@lval+3)^0,f,c
 12501  003C74                     i2l4780:
 12502  003C74  C028  F01E         	movff	i2___fttol@lval,?i2___fttol
 12503  003C78  C029  F01F         	movff	i2___fttol@lval+1,?i2___fttol+1
 12504  003C7C  C02A  F020         	movff	i2___fttol@lval+2,?i2___fttol+2
 12505  003C80  C02B  F021         	movff	i2___fttol@lval+3,?i2___fttol+3
 12506  003C84  0012               	return		;funcret
 12507  003C86                     __end_ofi2___fttol:
 12508                           	callstack 0
 12509                           
 12510 ;; *************** function i2___ftsub *****************
 12511 ;; Defined at:
 12512 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftsub.c"
 12513 ;; Parameters:    Size  Location     Type
 12514 ;;  f1              3   55[COMRAM] float 
 12515 ;;  f2              3   58[COMRAM] float 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;		None
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  3   55[COMRAM] float 
 12520 ;; Registers used:
 12521 ;;		wreg, status,2, status,0, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12527 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12530 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;Total ram usage:        6 bytes
 12532 ;; Hardware stack levels used: 1
 12533 ;; Hardware stack levels required when called: 2
 12534 ;; This function calls:
 12535 ;;		i2___ftadd
 12536 ;; This function is called by:
 12537 ;;		i2_sprintf
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           	psect	text60
 12542  004710                     __ptext60:
 12543                           	callstack 0
 12544  004710                     i2___ftsub:
 12545                           	callstack 21
 12546                           
 12547                           ;incstack = 0
 12548  004710  503B               	movf	i2___ftsub@f2^0,w,c
 12549  004712  103C               	iorwf	(i2___ftsub@f2+1)^0,w,c
 12550  004714  103D               	iorwf	(i2___ftsub@f2+2)^0,w,c
 12551  004716  B4D8               	btfsc	status,2,c
 12552  004718  D006               	goto	i2l4734
 12553  00471A  0E00               	movlw	0
 12554  00471C  1A3B               	xorwf	i2___ftsub@f2^0,f,c
 12555  00471E  0E00               	movlw	0
 12556  004720  1A3C               	xorwf	(i2___ftsub@f2+1)^0,f,c
 12557  004722  0E80               	movlw	128
 12558  004724  1A3D               	xorwf	(i2___ftsub@f2+2)^0,f,c
 12559  004726                     i2l4734:
 12560  004726  C038  F02C         	movff	i2___ftsub@f1,i2___ftadd@f1
 12561  00472A  C039  F02D         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 12562  00472E  C03A  F02E         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 12563  004732  C03B  F02F         	movff	i2___ftsub@f2,i2___ftadd@f2
 12564  004736  C03C  F030         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 12565  00473A  C03D  F031         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 12566  00473E  EC08  F018         	call	i2___ftadd	;wreg free
 12567  004742  C02C  F038         	movff	?i2___ftadd,?i2___ftsub
 12568  004746  C02D  F039         	movff	?i2___ftadd+1,?i2___ftsub+1
 12569  00474A  C02E  F03A         	movff	?i2___ftadd+2,?i2___ftsub+2
 12570  00474E  0012               	return		;funcret
 12571  004750                     __end_ofi2___ftsub:
 12572                           	callstack 0
 12573                           
 12574 ;; *************** function i2___ftadd *****************
 12575 ;; Defined at:
 12576 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftadd.c"
 12577 ;; Parameters:    Size  Location     Type
 12578 ;;  f1              3   43[COMRAM] float 
 12579 ;;  f2              3   46[COMRAM] float 
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;  exp1            1   54[COMRAM] unsigned char 
 12582 ;;  exp2            1   53[COMRAM] unsigned char 
 12583 ;;  sign            1   52[COMRAM] unsigned char 
 12584 ;; Return value:  Size  Location     Type
 12585 ;;                  3   43[COMRAM] float 
 12586 ;; Registers used:
 12587 ;;		wreg, status,2, status,0, cstack
 12588 ;; Tracked objects:
 12589 ;;		On entry : 0/0
 12590 ;;		On exit  : 0/0
 12591 ;;		Unchanged: 0/0
 12592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12593 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12594 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12595 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12596 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;Total ram usage:       12 bytes
 12598 ;; Hardware stack levels used: 1
 12599 ;; Hardware stack levels required when called: 1
 12600 ;; This function calls:
 12601 ;;		i2___ftpack
 12602 ;; This function is called by:
 12603 ;;		_TMR1_ISR
 12604 ;;		i2_sprintf
 12605 ;;		i2___ftsub
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           	psect	text61
 12610  003010                     __ptext61:
 12611                           	callstack 0
 12612  003010                     i2___ftadd:
 12613                           	callstack 21
 12614                           
 12615                           ;incstack = 0
 12616  003010  C02E  F032         	movff	i2___ftadd@f1+2,??i2___ftadd
 12617  003014  6A33               	clrf	(??i2___ftadd+1)^0,c
 12618  003016  6A34               	clrf	(??i2___ftadd+2)^0,c
 12619  003018  342D               	rlcf	(i2___ftadd@f1+1)^0,w,c
 12620  00301A  3632               	rlcf	??i2___ftadd^0,f,c
 12621  00301C  E301               	bnc	u411_41
 12622  00301E  8033               	bsf	(??i2___ftadd+1)^0,0,c
 12623  003020                     u411_41:
 12624  003020  5032               	movf	??i2___ftadd^0,w,c
 12625  003022  6E37               	movwf	i2___ftadd@exp1^0,c
 12626  003024  C031  F032         	movff	i2___ftadd@f2+2,??i2___ftadd
 12627  003028  6A33               	clrf	(??i2___ftadd+1)^0,c
 12628  00302A  6A34               	clrf	(??i2___ftadd+2)^0,c
 12629  00302C  3430               	rlcf	(i2___ftadd@f2+1)^0,w,c
 12630  00302E  3632               	rlcf	??i2___ftadd^0,f,c
 12631  003030  E301               	bnc	u412_41
 12632  003032  8033               	bsf	(??i2___ftadd+1)^0,0,c
 12633  003034                     u412_41:
 12634  003034  5032               	movf	??i2___ftadd^0,w,c
 12635  003036  6E36               	movwf	i2___ftadd@exp2^0,c
 12636  003038  5037               	movf	i2___ftadd@exp1^0,w,c
 12637  00303A  B4D8               	btfsc	status,2,c
 12638  00303C  D00A               	goto	i2u415_40
 12639  00303E  5036               	movf	i2___ftadd@exp2^0,w,c
 12640  003040  5C37               	subwf	i2___ftadd@exp1^0,w,c
 12641  003042  B0D8               	btfsc	status,0,c
 12642  003044  D00D               	goto	i2l4040
 12643  003046  5037               	movf	i2___ftadd@exp1^0,w,c
 12644  003048  5C36               	subwf	i2___ftadd@exp2^0,w,c
 12645  00304A  6E32               	movwf	??i2___ftadd^0,c
 12646  00304C  0E18               	movlw	24
 12647  00304E  6432               	cpfsgt	??i2___ftadd^0,c
 12648  003050  D007               	goto	i2l4040
 12649  003052                     i2u415_40:
 12650  003052  C02F  F02C         	movff	i2___ftadd@f2,?i2___ftadd
 12651  003056  C030  F02D         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 12652  00305A  C031  F02E         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 12653  00305E  0012               	return	
 12654  003060                     i2l4040:
 12655  003060  5036               	movf	i2___ftadd@exp2^0,w,c
 12656  003062  B4D8               	btfsc	status,2,c
 12657  003064  D00A               	goto	i2u418_40
 12658  003066  5037               	movf	i2___ftadd@exp1^0,w,c
 12659  003068  5C36               	subwf	i2___ftadd@exp2^0,w,c
 12660  00306A  B0D8               	btfsc	status,0,c
 12661  00306C  D00D               	goto	i2l4046
 12662  00306E  5036               	movf	i2___ftadd@exp2^0,w,c
 12663  003070  5C37               	subwf	i2___ftadd@exp1^0,w,c
 12664  003072  6E32               	movwf	??i2___ftadd^0,c
 12665  003074  0E18               	movlw	24
 12666  003076  6432               	cpfsgt	??i2___ftadd^0,c
 12667  003078  D007               	goto	i2l4046
 12668  00307A                     i2u418_40:
 12669  00307A  C02C  F02C         	movff	i2___ftadd@f1,?i2___ftadd
 12670  00307E  C02D  F02D         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 12671  003082  C02E  F02E         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 12672  003086  0012               	return	
 12673  003088                     i2l4046:
 12674  003088  0E06               	movlw	6
 12675  00308A  6E35               	movwf	i2___ftadd@sign^0,c
 12676  00308C  BE2E               	btfsc	(i2___ftadd@f1+2)^0,7,c
 12677  00308E  8E35               	bsf	i2___ftadd@sign^0,7,c
 12678  003090  BE31               	btfsc	(i2___ftadd@f2+2)^0,7,c
 12679  003092  8C35               	bsf	i2___ftadd@sign^0,6,c
 12680  003094  8E2D               	bsf	(i2___ftadd@f1+1)^0,7,c
 12681  003096  0EFF               	movlw	255
 12682  003098  162C               	andwf	i2___ftadd@f1^0,f,c
 12683  00309A  0EFF               	movlw	255
 12684  00309C  162D               	andwf	(i2___ftadd@f1+1)^0,f,c
 12685  00309E  0E00               	movlw	0
 12686  0030A0  162E               	andwf	(i2___ftadd@f1+2)^0,f,c
 12687  0030A2  8E30               	bsf	(i2___ftadd@f2+1)^0,7,c
 12688  0030A4  0EFF               	movlw	255
 12689  0030A6  162F               	andwf	i2___ftadd@f2^0,f,c
 12690  0030A8  0EFF               	movlw	255
 12691  0030AA  1630               	andwf	(i2___ftadd@f2+1)^0,f,c
 12692  0030AC  0E00               	movlw	0
 12693  0030AE  1631               	andwf	(i2___ftadd@f2+2)^0,f,c
 12694  0030B0  5036               	movf	i2___ftadd@exp2^0,w,c
 12695  0030B2  5C37               	subwf	i2___ftadd@exp1^0,w,c
 12696  0030B4  B0D8               	btfsc	status,0,c
 12697  0030B6  D01B               	goto	i2l4072
 12698  0030B8                     i2u421_40:
 12699  0030B8  90D8               	bcf	status,0,c
 12700  0030BA  362F               	rlcf	i2___ftadd@f2^0,f,c
 12701  0030BC  3630               	rlcf	(i2___ftadd@f2+1)^0,f,c
 12702  0030BE  3631               	rlcf	(i2___ftadd@f2+2)^0,f,c
 12703  0030C0  0636               	decf	i2___ftadd@exp2^0,f,c
 12704  0030C2  5037               	movf	i2___ftadd@exp1^0,w,c
 12705  0030C4  1836               	xorwf	i2___ftadd@exp2^0,w,c
 12706  0030C6  B4D8               	btfsc	status,2,c
 12707  0030C8  D00D               	goto	i2l4070
 12708  0030CA  0635               	decf	i2___ftadd@sign^0,f,c
 12709  0030CC  C035  F032         	movff	i2___ftadd@sign,??i2___ftadd
 12710  0030D0  0E07               	movlw	7
 12711  0030D2  1632               	andwf	??i2___ftadd^0,f,c
 12712  0030D4  B4D8               	btfsc	status,2,c
 12713  0030D6  D006               	goto	i2l4070
 12714  0030D8  D7EF               	goto	i2u421_40
 12715  0030DA                     i2l4068:
 12716  0030DA  90D8               	bcf	status,0,c
 12717  0030DC  322E               	rrcf	(i2___ftadd@f1+2)^0,f,c
 12718  0030DE  322D               	rrcf	(i2___ftadd@f1+1)^0,f,c
 12719  0030E0  322C               	rrcf	i2___ftadd@f1^0,f,c
 12720  0030E2  2A37               	incf	i2___ftadd@exp1^0,f,c
 12721  0030E4                     i2l4070:
 12722  0030E4  5036               	movf	i2___ftadd@exp2^0,w,c
 12723  0030E6  1837               	xorwf	i2___ftadd@exp1^0,w,c
 12724  0030E8  B4D8               	btfsc	status,2,c
 12725  0030EA  D01F               	goto	i2u428_40
 12726  0030EC  D7F6               	goto	i2l4068
 12727  0030EE                     i2l4072:
 12728  0030EE  5037               	movf	i2___ftadd@exp1^0,w,c
 12729  0030F0  5C36               	subwf	i2___ftadd@exp2^0,w,c
 12730  0030F2  B0D8               	btfsc	status,0,c
 12731  0030F4  D01A               	goto	i2u428_40
 12732  0030F6                     i2u425_40:
 12733  0030F6  90D8               	bcf	status,0,c
 12734  0030F8  362C               	rlcf	i2___ftadd@f1^0,f,c
 12735  0030FA  362D               	rlcf	(i2___ftadd@f1+1)^0,f,c
 12736  0030FC  362E               	rlcf	(i2___ftadd@f1+2)^0,f,c
 12737  0030FE  0637               	decf	i2___ftadd@exp1^0,f,c
 12738  003100  5037               	movf	i2___ftadd@exp1^0,w,c
 12739  003102  1836               	xorwf	i2___ftadd@exp2^0,w,c
 12740  003104  B4D8               	btfsc	status,2,c
 12741  003106  D00D               	goto	i2l4082
 12742  003108  0635               	decf	i2___ftadd@sign^0,f,c
 12743  00310A  C035  F032         	movff	i2___ftadd@sign,??i2___ftadd
 12744  00310E  0E07               	movlw	7
 12745  003110  1632               	andwf	??i2___ftadd^0,f,c
 12746  003112  B4D8               	btfsc	status,2,c
 12747  003114  D006               	goto	i2l4082
 12748  003116  D7EF               	goto	i2u425_40
 12749  003118                     i2l4080:
 12750  003118  90D8               	bcf	status,0,c
 12751  00311A  3231               	rrcf	(i2___ftadd@f2+2)^0,f,c
 12752  00311C  3230               	rrcf	(i2___ftadd@f2+1)^0,f,c
 12753  00311E  322F               	rrcf	i2___ftadd@f2^0,f,c
 12754  003120  2A36               	incf	i2___ftadd@exp2^0,f,c
 12755  003122                     i2l4082:
 12756  003122  5036               	movf	i2___ftadd@exp2^0,w,c
 12757  003124  1837               	xorwf	i2___ftadd@exp1^0,w,c
 12758  003126  A4D8               	btfss	status,2,c
 12759  003128  D7F7               	goto	i2l4080
 12760  00312A                     i2u428_40:
 12761  00312A  AE35               	btfss	i2___ftadd@sign^0,7,c
 12762  00312C  D00C               	goto	i2l691
 12763  00312E  0EFF               	movlw	255
 12764  003130  1A2C               	xorwf	i2___ftadd@f1^0,f,c
 12765  003132  0EFF               	movlw	255
 12766  003134  1A2D               	xorwf	(i2___ftadd@f1+1)^0,f,c
 12767  003136  0EFF               	movlw	255
 12768  003138  1A2E               	xorwf	(i2___ftadd@f1+2)^0,f,c
 12769  00313A  0E01               	movlw	1
 12770  00313C  262C               	addwf	i2___ftadd@f1^0,f,c
 12771  00313E  0E00               	movlw	0
 12772  003140  222D               	addwfc	(i2___ftadd@f1+1)^0,f,c
 12773  003142  0E00               	movlw	0
 12774  003144  222E               	addwfc	(i2___ftadd@f1+2)^0,f,c
 12775  003146                     i2l691:
 12776  003146  AC35               	btfss	i2___ftadd@sign^0,6,c
 12777  003148  D00C               	goto	i2l4088
 12778  00314A  0EFF               	movlw	255
 12779  00314C  1A2F               	xorwf	i2___ftadd@f2^0,f,c
 12780  00314E  0EFF               	movlw	255
 12781  003150  1A30               	xorwf	(i2___ftadd@f2+1)^0,f,c
 12782  003152  0EFF               	movlw	255
 12783  003154  1A31               	xorwf	(i2___ftadd@f2+2)^0,f,c
 12784  003156  0E01               	movlw	1
 12785  003158  262F               	addwf	i2___ftadd@f2^0,f,c
 12786  00315A  0E00               	movlw	0
 12787  00315C  2230               	addwfc	(i2___ftadd@f2+1)^0,f,c
 12788  00315E  0E00               	movlw	0
 12789  003160  2231               	addwfc	(i2___ftadd@f2+2)^0,f,c
 12790  003162                     i2l4088:
 12791  003162  0E00               	movlw	0
 12792  003164  6E35               	movwf	i2___ftadd@sign^0,c
 12793  003166  502C               	movf	i2___ftadd@f1^0,w,c
 12794  003168  262F               	addwf	i2___ftadd@f2^0,f,c
 12795  00316A  502D               	movf	(i2___ftadd@f1+1)^0,w,c
 12796  00316C  2230               	addwfc	(i2___ftadd@f2+1)^0,f,c
 12797  00316E  502E               	movf	(i2___ftadd@f1+2)^0,w,c
 12798  003170  2231               	addwfc	(i2___ftadd@f2+2)^0,f,c
 12799  003172  AE31               	btfss	(i2___ftadd@f2+2)^0,7,c
 12800  003174  D00E               	goto	i2l4098
 12801  003176  0EFF               	movlw	255
 12802  003178  1A2F               	xorwf	i2___ftadd@f2^0,f,c
 12803  00317A  0EFF               	movlw	255
 12804  00317C  1A30               	xorwf	(i2___ftadd@f2+1)^0,f,c
 12805  00317E  0EFF               	movlw	255
 12806  003180  1A31               	xorwf	(i2___ftadd@f2+2)^0,f,c
 12807  003182  0E01               	movlw	1
 12808  003184  262F               	addwf	i2___ftadd@f2^0,f,c
 12809  003186  0E00               	movlw	0
 12810  003188  2230               	addwfc	(i2___ftadd@f2+1)^0,f,c
 12811  00318A  0E00               	movlw	0
 12812  00318C  2231               	addwfc	(i2___ftadd@f2+2)^0,f,c
 12813  00318E  0E01               	movlw	1
 12814  003190  6E35               	movwf	i2___ftadd@sign^0,c
 12815  003192                     i2l4098:
 12816  003192  C02F  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 12817  003196  C030  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 12818  00319A  C031  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 12819  00319E  C037  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 12820  0031A2  C035  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 12821  0031A6  EC9A  F01E         	call	i2___ftpack	;wreg free
 12822  0031AA  C001  F02C         	movff	?i2___ftpack,?i2___ftadd
 12823  0031AE  C002  F02D         	movff	?i2___ftpack+1,?i2___ftadd+1
 12824  0031B2  C003  F02E         	movff	?i2___ftpack+2,?i2___ftadd+2
 12825  0031B6  0012               	return		;funcret
 12826  0031B8                     __end_ofi2___ftadd:
 12827                           	callstack 0
 12828                           
 12829 ;; *************** function i2___ftneg *****************
 12830 ;; Defined at:
 12831 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftneg.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  f1              3    0[COMRAM] float 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;		None
 12836 ;; Return value:  Size  Location     Type
 12837 ;;                  3    0[COMRAM] float 
 12838 ;; Registers used:
 12839 ;;		wreg, status,2, status,0
 12840 ;; Tracked objects:
 12841 ;;		On entry : 0/0
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12845 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;Total ram usage:        3 bytes
 12850 ;; Hardware stack levels used: 1
 12851 ;; This function calls:
 12852 ;;		Nothing
 12853 ;; This function is called by:
 12854 ;;		i2_sprintf
 12855 ;; This function uses a non-reentrant model
 12856 ;;
 12857                           
 12858                           	psect	text62
 12859  00496A                     __ptext62:
 12860                           	callstack 0
 12861  00496A                     i2___ftneg:
 12862                           	callstack 23
 12863                           
 12864                           ;incstack = 0
 12865  00496A  5001               	movf	i2___ftneg@f1^0,w,c
 12866  00496C  1002               	iorwf	(i2___ftneg@f1+1)^0,w,c
 12867  00496E  1003               	iorwf	(i2___ftneg@f1+2)^0,w,c
 12868  004970  B4D8               	btfsc	status,2,c
 12869  004972  D006               	goto	i2l741
 12870  004974  0E00               	movlw	0
 12871  004976  1A01               	xorwf	i2___ftneg@f1^0,f,c
 12872  004978  0E00               	movlw	0
 12873  00497A  1A02               	xorwf	(i2___ftneg@f1+1)^0,f,c
 12874  00497C  0E80               	movlw	128
 12875  00497E  1A03               	xorwf	(i2___ftneg@f1+2)^0,f,c
 12876  004980                     i2l741:
 12877  004980  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 12878  004984  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 12879  004988  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 12880  00498C  0012               	return		;funcret
 12881  00498E                     __end_ofi2___ftneg:
 12882                           	callstack 0
 12883                           
 12884 ;; *************** function i2___ftge *****************
 12885 ;; Defined at:
 12886 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftge.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;  ff1             3    0[COMRAM] float 
 12889 ;;  ff2             3    3[COMRAM] float 
 12890 ;; Auto vars:     Size  Location     Type
 12891 ;;		None
 12892 ;; Return value:  Size  Location     Type
 12893 ;;		None               void
 12894 ;; Registers used:
 12895 ;;		wreg, status,2, status,0
 12896 ;; Tracked objects:
 12897 ;;		On entry : 0/0
 12898 ;;		On exit  : 0/0
 12899 ;;		Unchanged: 0/0
 12900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12901 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12904 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12905 ;;Total ram usage:        9 bytes
 12906 ;; Hardware stack levels used: 1
 12907 ;; This function calls:
 12908 ;;		Nothing
 12909 ;; This function is called by:
 12910 ;;		i2_sprintf
 12911 ;; This function uses a non-reentrant model
 12912 ;;
 12913                           
 12914                           	psect	text63
 12915  004234                     __ptext63:
 12916                           	callstack 0
 12917  004234                     i2___ftge:
 12918                           	callstack 23
 12919                           
 12920                           ;incstack = 0
 12921  004234  AE03               	btfss	(i2___ftge@ff1+2)^0,7,c
 12922  004236  D00F               	goto	i2l4712
 12923  004238  0E00               	movlw	0
 12924  00423A  6E07               	movwf	??i2___ftge^0,c
 12925  00423C  0E00               	movlw	0
 12926  00423E  6E08               	movwf	(??i2___ftge+1)^0,c
 12927  004240  0E80               	movlw	128
 12928  004242  6E09               	movwf	(??i2___ftge+2)^0,c
 12929  004244  5001               	movf	i2___ftge@ff1^0,w,c
 12930  004246  5C07               	subwf	??i2___ftge^0,w,c
 12931  004248  6E01               	movwf	i2___ftge@ff1^0,c
 12932  00424A  5002               	movf	(i2___ftge@ff1+1)^0,w,c
 12933  00424C  5808               	subwfb	(??i2___ftge+1)^0,w,c
 12934  00424E  6E02               	movwf	(i2___ftge@ff1+1)^0,c
 12935  004250  5003               	movf	(i2___ftge@ff1+2)^0,w,c
 12936  004252  5809               	subwfb	(??i2___ftge+2)^0,w,c
 12937  004254  6E03               	movwf	(i2___ftge@ff1+2)^0,c
 12938  004256                     i2l4712:
 12939  004256  AE06               	btfss	(i2___ftge@ff2+2)^0,7,c
 12940  004258  D00F               	goto	i2l4716
 12941  00425A  0E00               	movlw	0
 12942  00425C  6E07               	movwf	??i2___ftge^0,c
 12943  00425E  0E00               	movlw	0
 12944  004260  6E08               	movwf	(??i2___ftge+1)^0,c
 12945  004262  0E80               	movlw	128
 12946  004264  6E09               	movwf	(??i2___ftge+2)^0,c
 12947  004266  5004               	movf	i2___ftge@ff2^0,w,c
 12948  004268  5C07               	subwf	??i2___ftge^0,w,c
 12949  00426A  6E04               	movwf	i2___ftge@ff2^0,c
 12950  00426C  5005               	movf	(i2___ftge@ff2+1)^0,w,c
 12951  00426E  5808               	subwfb	(??i2___ftge+1)^0,w,c
 12952  004270  6E05               	movwf	(i2___ftge@ff2+1)^0,c
 12953  004272  5006               	movf	(i2___ftge@ff2+2)^0,w,c
 12954  004274  5809               	subwfb	(??i2___ftge+2)^0,w,c
 12955  004276  6E06               	movwf	(i2___ftge@ff2+2)^0,c
 12956  004278                     i2l4716:
 12957  004278  0E00               	movlw	0
 12958  00427A  1A01               	xorwf	i2___ftge@ff1^0,f,c
 12959  00427C  0E00               	movlw	0
 12960  00427E  1A02               	xorwf	(i2___ftge@ff1+1)^0,f,c
 12961  004280  0E80               	movlw	128
 12962  004282  1A03               	xorwf	(i2___ftge@ff1+2)^0,f,c
 12963  004284  0E00               	movlw	0
 12964  004286  1A04               	xorwf	i2___ftge@ff2^0,f,c
 12965  004288  0E00               	movlw	0
 12966  00428A  1A05               	xorwf	(i2___ftge@ff2+1)^0,f,c
 12967  00428C  0E80               	movlw	128
 12968  00428E  1A06               	xorwf	(i2___ftge@ff2+2)^0,f,c
 12969  004290  5004               	movf	i2___ftge@ff2^0,w,c
 12970  004292  5C01               	subwf	i2___ftge@ff1^0,w,c
 12971  004294  5005               	movf	(i2___ftge@ff2+1)^0,w,c
 12972  004296  5802               	subwfb	(i2___ftge@ff1+1)^0,w,c
 12973  004298  5006               	movf	(i2___ftge@ff2+2)^0,w,c
 12974  00429A  5803               	subwfb	(i2___ftge@ff1+2)^0,w,c
 12975  00429C  B0D8               	btfsc	status,0,c
 12976  00429E  D002               	goto	i2l4722
 12977  0042A0  90D8               	bcf	status,0,c
 12978  0042A2  0012               	return	
 12979  0042A4                     i2l4722:
 12980  0042A4  80D8               	bsf	status,0,c
 12981  0042A6  0012               	return		;funcret
 12982  0042A8                     __end_ofi2___ftge:
 12983                           	callstack 0
 12984                           
 12985 ;; *************** function i2_map *****************
 12986 ;; Defined at:
 12987 ;;		line 489 in file "BORRAR.c"
 12988 ;; Parameters:    Size  Location     Type
 12989 ;;  x               2   44[COMRAM] int 
 12990 ;;  In_Min          2   46[COMRAM] int 
 12991 ;;  In_Max          2   48[COMRAM] int 
 12992 ;;  Out_Min         2   50[COMRAM] int 
 12993 ;;  Out_Max         2   52[COMRAM] int 
 12994 ;; Auto vars:     Size  Location     Type
 12995 ;;		None
 12996 ;; Return value:  Size  Location     Type
 12997 ;;                  2   44[COMRAM] int 
 12998 ;; Registers used:
 12999 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13000 ;; Tracked objects:
 13001 ;;		On entry : 0/0
 13002 ;;		On exit  : 0/0
 13003 ;;		Unchanged: 0/0
 13004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13005 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13008 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13009 ;;Total ram usage:       10 bytes
 13010 ;; Hardware stack levels used: 1
 13011 ;; Hardware stack levels required when called: 1
 13012 ;; This function calls:
 13013 ;;		i2___awdiv
 13014 ;;		i2___wmul
 13015 ;; This function is called by:
 13016 ;;		_TMR1_ISR
 13017 ;; This function uses a non-reentrant model
 13018 ;;
 13019                           
 13020                           	psect	text64
 13021  00468E                     __ptext64:
 13022                           	callstack 0
 13023  00468E                     i2_map:
 13024                           	callstack 23
 13025                           
 13026                           ;BORRAR.c: 490: return ((x - In_Min) * ((Out_Max - Out_Min) / (In_Max - In_Min))) +Out_M
      +                          in;
 13027                           
 13028                           ;incstack = 0
 13029  00468E  502F               	movf	i2map@In_Min^0,w,c
 13030  004690  5C2D               	subwf	i2map@x^0,w,c
 13031  004692  6E0F               	movwf	i2___wmul@multiplier^0,c
 13032  004694  5030               	movf	(i2map@In_Min+1)^0,w,c
 13033  004696  582E               	subwfb	(i2map@x+1)^0,w,c
 13034  004698  6E10               	movwf	(i2___wmul@multiplier+1)^0,c
 13035  00469A  502F               	movf	i2map@In_Min^0,w,c
 13036  00469C  5C31               	subwf	i2map@In_Max^0,w,c
 13037  00469E  6E09               	movwf	i2___awdiv@divisor^0,c
 13038  0046A0  5030               	movf	(i2map@In_Min+1)^0,w,c
 13039  0046A2  5832               	subwfb	(i2map@In_Max+1)^0,w,c
 13040  0046A4  6E0A               	movwf	(i2___awdiv@divisor+1)^0,c
 13041  0046A6  5033               	movf	i2map@Out_Min^0,w,c
 13042  0046A8  5C35               	subwf	i2map@Out_Max^0,w,c
 13043  0046AA  6E07               	movwf	i2___awdiv@dividend^0,c
 13044  0046AC  5034               	movf	(i2map@Out_Min+1)^0,w,c
 13045  0046AE  5836               	subwfb	(i2map@Out_Max+1)^0,w,c
 13046  0046B0  6E08               	movwf	(i2___awdiv@dividend+1)^0,c
 13047  0046B2  ECDB  F01F         	call	i2___awdiv	;wreg free
 13048  0046B6  C007  F011         	movff	?i2___awdiv,i2___wmul@multiplicand
 13049  0046BA  C008  F012         	movff	?i2___awdiv+1,i2___wmul@multiplicand+1
 13050  0046BE  ECA2  F024         	call	i2___wmul	;wreg free
 13051  0046C2  5033               	movf	i2map@Out_Min^0,w,c
 13052  0046C4  240F               	addwf	?i2___wmul^0,w,c
 13053  0046C6  6E2D               	movwf	?i2_map^0,c
 13054  0046C8  5034               	movf	(i2map@Out_Min+1)^0,w,c
 13055  0046CA  2010               	addwfc	(?i2___wmul+1)^0,w,c
 13056  0046CC  6E2E               	movwf	(?i2_map+1)^0,c
 13057  0046CE  0012               	return		;funcret
 13058  0046D0                     __end_ofi2_map:
 13059                           	callstack 0
 13060                           
 13061 ;; *************** function i2___wmul *****************
 13062 ;; Defined at:
 13063 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;  multiplier      2   14[COMRAM] unsigned int 
 13066 ;;  multiplicand    2   16[COMRAM] unsigned int 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  product         2   18[COMRAM] unsigned int 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  2   14[COMRAM] unsigned int 
 13071 ;; Registers used:
 13072 ;;		wreg, status,2, status,0, prodl, prodh
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13081 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13082 ;;Total ram usage:        6 bytes
 13083 ;; Hardware stack levels used: 1
 13084 ;; This function calls:
 13085 ;;		Nothing
 13086 ;; This function is called by:
 13087 ;;		i2_map
 13088 ;;		i2_sprintf
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           	psect	text65
 13093  004944                     __ptext65:
 13094                           	callstack 0
 13095  004944                     i2___wmul:
 13096                           	callstack 23
 13097                           
 13098                           ;incstack = 0
 13099  004944  500F               	movf	i2___wmul@multiplier^0,w,c
 13100  004946  0211               	mulwf	i2___wmul@multiplicand^0,c
 13101  004948  CFF3 F013          	movff	prodl,i2___wmul@product
 13102  00494C  CFF4 F014          	movff	prodh,i2___wmul@product+1
 13103  004950  500F               	movf	i2___wmul@multiplier^0,w,c
 13104  004952  0212               	mulwf	(i2___wmul@multiplicand+1)^0,c
 13105  004954  50F3               	movf	243,w,c
 13106  004956  2614               	addwf	(i2___wmul@product+1)^0,f,c
 13107  004958  5010               	movf	(i2___wmul@multiplier+1)^0,w,c
 13108  00495A  0211               	mulwf	i2___wmul@multiplicand^0,c
 13109  00495C  50F3               	movf	243,w,c
 13110  00495E  2614               	addwf	(i2___wmul@product+1)^0,f,c
 13111  004960  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 13112  004964  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 13113  004968  0012               	return		;funcret
 13114  00496A                     __end_ofi2___wmul:
 13115                           	callstack 0
 13116                           
 13117 ;; *************** function i2___awdiv *****************
 13118 ;; Defined at:
 13119 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;  dividend        2    6[COMRAM] int 
 13122 ;;  divisor         2    8[COMRAM] int 
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;  quotient        2   12[COMRAM] int 
 13125 ;;  sign            1   11[COMRAM] unsigned char 
 13126 ;;  counter         1   10[COMRAM] unsigned char 
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  2    6[COMRAM] int 
 13129 ;; Registers used:
 13130 ;;		wreg, status,2, status,0
 13131 ;; Tracked objects:
 13132 ;;		On entry : 0/0
 13133 ;;		On exit  : 0/0
 13134 ;;		Unchanged: 0/0
 13135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13140 ;;Total ram usage:        8 bytes
 13141 ;; Hardware stack levels used: 1
 13142 ;; This function calls:
 13143 ;;		Nothing
 13144 ;; This function is called by:
 13145 ;;		i2_map
 13146 ;;		i2_scale
 13147 ;;		i2_sprintf
 13148 ;; This function uses a non-reentrant model
 13149 ;;
 13150                           
 13151                           	psect	text66
 13152  003FB6                     __ptext66:
 13153                           	callstack 0
 13154  003FB6                     i2___awdiv:
 13155                           	callstack 22
 13156                           
 13157                           ;incstack = 0
 13158  003FB6  0E00               	movlw	0
 13159  003FB8  6E0C               	movwf	i2___awdiv@sign^0,c
 13160  003FBA  AE0A               	btfss	(i2___awdiv@divisor+1)^0,7,c
 13161  003FBC  D006               	goto	i2l3960
 13162  003FBE  6C09               	negf	i2___awdiv@divisor^0,c
 13163  003FC0  1E0A               	comf	(i2___awdiv@divisor+1)^0,f,c
 13164  003FC2  B0D8               	btfsc	status,0,c
 13165  003FC4  2A0A               	incf	(i2___awdiv@divisor+1)^0,f,c
 13166  003FC6  0E01               	movlw	1
 13167  003FC8  6E0C               	movwf	i2___awdiv@sign^0,c
 13168  003FCA                     i2l3960:
 13169  003FCA  AE08               	btfss	(i2___awdiv@dividend+1)^0,7,c
 13170  003FCC  D006               	goto	i2l3966
 13171  003FCE  6C07               	negf	i2___awdiv@dividend^0,c
 13172  003FD0  1E08               	comf	(i2___awdiv@dividend+1)^0,f,c
 13173  003FD2  B0D8               	btfsc	status,0,c
 13174  003FD4  2A08               	incf	(i2___awdiv@dividend+1)^0,f,c
 13175  003FD6  0E01               	movlw	1
 13176  003FD8  1A0C               	xorwf	i2___awdiv@sign^0,f,c
 13177  003FDA                     i2l3966:
 13178  003FDA  0E00               	movlw	0
 13179  003FDC  6E0E               	movwf	(i2___awdiv@quotient+1)^0,c
 13180  003FDE  0E00               	movlw	0
 13181  003FE0  6E0D               	movwf	i2___awdiv@quotient^0,c
 13182  003FE2  5009               	movf	i2___awdiv@divisor^0,w,c
 13183  003FE4  100A               	iorwf	(i2___awdiv@divisor+1)^0,w,c
 13184  003FE6  B4D8               	btfsc	status,2,c
 13185  003FE8  D01C               	goto	i2l3988
 13186  003FEA  0E01               	movlw	1
 13187  003FEC  6E0B               	movwf	i2___awdiv@counter^0,c
 13188  003FEE  D004               	goto	i2l3974
 13189  003FF0                     i2l3972:
 13190  003FF0  90D8               	bcf	status,0,c
 13191  003FF2  3609               	rlcf	i2___awdiv@divisor^0,f,c
 13192  003FF4  360A               	rlcf	(i2___awdiv@divisor+1)^0,f,c
 13193  003FF6  2A0B               	incf	i2___awdiv@counter^0,f,c
 13194  003FF8                     i2l3974:
 13195  003FF8  AE0A               	btfss	(i2___awdiv@divisor+1)^0,7,c
 13196  003FFA  D7FA               	goto	i2l3972
 13197  003FFC                     i2u402_40:
 13198  003FFC  90D8               	bcf	status,0,c
 13199  003FFE  360D               	rlcf	i2___awdiv@quotient^0,f,c
 13200  004000  360E               	rlcf	(i2___awdiv@quotient+1)^0,f,c
 13201  004002  5009               	movf	i2___awdiv@divisor^0,w,c
 13202  004004  5C07               	subwf	i2___awdiv@dividend^0,w,c
 13203  004006  500A               	movf	(i2___awdiv@divisor+1)^0,w,c
 13204  004008  5808               	subwfb	(i2___awdiv@dividend+1)^0,w,c
 13205  00400A  A0D8               	btfss	status,0,c
 13206  00400C  D005               	goto	i2l3984
 13207  00400E  5009               	movf	i2___awdiv@divisor^0,w,c
 13208  004010  5E07               	subwf	i2___awdiv@dividend^0,f,c
 13209  004012  500A               	movf	(i2___awdiv@divisor+1)^0,w,c
 13210  004014  5A08               	subwfb	(i2___awdiv@dividend+1)^0,f,c
 13211  004016  800D               	bsf	i2___awdiv@quotient^0,0,c
 13212  004018                     i2l3984:
 13213  004018  90D8               	bcf	status,0,c
 13214  00401A  320A               	rrcf	(i2___awdiv@divisor+1)^0,f,c
 13215  00401C  3209               	rrcf	i2___awdiv@divisor^0,f,c
 13216  00401E  2E0B               	decfsz	i2___awdiv@counter^0,f,c
 13217  004020  D7ED               	goto	i2u402_40
 13218  004022                     i2l3988:
 13219  004022  500C               	movf	i2___awdiv@sign^0,w,c
 13220  004024  B4D8               	btfsc	status,2,c
 13221  004026  D004               	goto	i2l3992
 13222  004028  6C0D               	negf	i2___awdiv@quotient^0,c
 13223  00402A  1E0E               	comf	(i2___awdiv@quotient+1)^0,f,c
 13224  00402C  B0D8               	btfsc	status,0,c
 13225  00402E  2A0E               	incf	(i2___awdiv@quotient+1)^0,f,c
 13226  004030                     i2l3992:
 13227  004030  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 13228  004034  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 13229  004038  0012               	return		;funcret
 13230  00403A                     __end_ofi2___awdiv:
 13231                           	callstack 0
 13232                           
 13233 ;; *************** function i2_SettingsLCD *****************
 13234 ;; Defined at:
 13235 ;;		line 321 in file "BORRAR.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;  word            1    wreg     unsigned char 
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;  word            1    2[COMRAM] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2, status,0, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13253 ;;Total ram usage:        1 bytes
 13254 ;; Hardware stack levels used: 1
 13255 ;; Hardware stack levels required when called: 1
 13256 ;; This function calls:
 13257 ;;		i2_LCD
 13258 ;; This function is called by:
 13259 ;;		_TMR1_ISR
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           	psect	text67
 13264  004A48                     __ptext67:
 13265                           	callstack 0
 13266  004A48                     i2_SettingsLCD:
 13267                           	callstack 23
 13268                           
 13269                           ;incstack = 0
 13270                           ;i2SettingsLCD@word stored from wreg
 13271  004A48  6E03               	movwf	i2SettingsLCD@word^0,c
 13272                           
 13273                           ;BORRAR.c: 322: LATEbits.LATE1 = 0;
 13274  004A4A  928D               	bcf	141,1,c	;volatile
 13275                           
 13276                           ;BORRAR.c: 323: LCD(word >> 4);
 13277  004A4C  3803               	swapf	i2SettingsLCD@word^0,w,c
 13278  004A4E  0B0F               	andlw	15
 13279  004A50  EC47  F01F         	call	i2_LCD
 13280                           
 13281                           ;BORRAR.c: 324: LCD(word & 0x0F);
 13282  004A54  5003               	movf	i2SettingsLCD@word^0,w,c
 13283  004A56  0B0F               	andlw	15
 13284  004A58  EC47  F01F         	call	i2_LCD
 13285  004A5C  0012               	return		;funcret
 13286  004A5E                     __end_ofi2_SettingsLCD:
 13287                           	callstack 0
 13288                           
 13289 ;; *************** function i2_DataLCD *****************
 13290 ;; Defined at:
 13291 ;;		line 348 in file "BORRAR.c"
 13292 ;; Parameters:    Size  Location     Type
 13293 ;;		None
 13294 ;; Auto vars:     Size  Location     Type
 13295 ;;		None
 13296 ;; Return value:  Size  Location     Type
 13297 ;;                  1    wreg      void 
 13298 ;; Registers used:
 13299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13300 ;; Tracked objects:
 13301 ;;		On entry : 0/0
 13302 ;;		On exit  : 3F/0
 13303 ;;		Unchanged: 0/0
 13304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13309 ;;Total ram usage:        2 bytes
 13310 ;; Hardware stack levels used: 1
 13311 ;; Hardware stack levels required when called: 2
 13312 ;; This function calls:
 13313 ;;		i2_WriteLCD
 13314 ;;		i2_strlen
 13315 ;; This function is called by:
 13316 ;;		_TMR1_ISR
 13317 ;; This function uses a non-reentrant model
 13318 ;;
 13319                           
 13320                           	psect	text68
 13321  004606                     __ptext68:
 13322                           	callstack 0
 13323  004606                     i2_DataLCD:
 13324                           	callstack 22
 13325                           
 13326                           ;BORRAR.c: 349: for (i = 0; i <= strlen(text)-1; i++) {
 13327                           
 13328                           ;incstack = 0
 13329  004606  0E00               	movlw	0
 13330  004608  0100               	movlb	0	; () banked
 13331  00460A  6FC9               	movwf	(_i+1)& (0+255),b
 13332  00460C  0E00               	movlw	0
 13333  00460E  6FC8               	movwf	_i& (0+255),b
 13334  004610  D00A               	goto	i2l5186
 13335  004612                     i2l5182:
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;BORRAR.c: 350: WriteLCD(text[i]);
 13339  004612  51C8               	movf	_i& (0+255),w,b
 13340  004614  0FCC               	addlw	low _text
 13341  004616  6ED9               	movwf	fsr2l,c
 13342  004618  6ADA               	clrf	fsr2h,c
 13343  00461A  50DF               	movf	indf2,w,c
 13344  00461C  EC2F  F025         	call	i2_WriteLCD
 13345  004620  0100               	movlb	0	; () banked
 13346  004622  4BC8               	infsnz	_i& (0+255),f,b
 13347  004624  2BC9               	incf	(_i+1)& (0+255),f,b
 13348  004626                     i2l5186:
 13349                           
 13350                           ; BSR set to: 0
 13351  004626  0EFF               	movlw	255
 13352  004628  6E04               	movwf	??i2_DataLCD^0,c
 13353  00462A  0EFF               	movlw	255
 13354  00462C  6E05               	movwf	(??i2_DataLCD+1)^0,c
 13355  00462E  0ECC               	movlw	low _text
 13356  004630  6E01               	movwf	i2strlen@s^0,c
 13357  004632  ECE9  F024         	call	i2_strlen	;wreg free
 13358  004636  5004               	movf	??i2_DataLCD^0,w,c
 13359  004638  2601               	addwf	?i2_strlen^0,f,c
 13360  00463A  5005               	movf	(??i2_DataLCD+1)^0,w,c
 13361  00463C  2202               	addwfc	(?i2_strlen+1)^0,f,c
 13362  00463E  51C8               	movf	_i& (0+255),w,b
 13363  004640  5C01               	subwf	?i2_strlen^0,w,c
 13364  004642  51C9               	movf	(_i+1)& (0+255),w,b
 13365  004644  5802               	subwfb	(?i2_strlen+1)^0,w,c
 13366  004646  A0D8               	btfss	status,0,c
 13367  004648  0012               	return	
 13368  00464A  D7E3               	goto	i2l5182
 13369  00464C                     __end_ofi2_DataLCD:
 13370                           	callstack 0
 13371                           
 13372 ;; *************** function i2_strlen *****************
 13373 ;; Defined at:
 13374 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\strlen.c"
 13375 ;; Parameters:    Size  Location     Type
 13376 ;;  s               1    0[COMRAM] PTR const unsigned char 
 13377 ;;		 -> text(20), 
 13378 ;; Auto vars:     Size  Location     Type
 13379 ;;  cp              1    2[COMRAM] PTR const unsigned char 
 13380 ;;		 -> text(20), 
 13381 ;; Return value:  Size  Location     Type
 13382 ;;                  2    0[COMRAM] unsigned int 
 13383 ;; Registers used:
 13384 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13385 ;; Tracked objects:
 13386 ;;		On entry : 3F/0
 13387 ;;		On exit  : 3F/0
 13388 ;;		Unchanged: 3F/0
 13389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;Total ram usage:        3 bytes
 13395 ;; Hardware stack levels used: 1
 13396 ;; This function calls:
 13397 ;;		Nothing
 13398 ;; This function is called by:
 13399 ;;		i2_DataLCD
 13400 ;; This function uses a non-reentrant model
 13401 ;;
 13402                           
 13403                           	psect	text69
 13404  0049D2                     __ptext69:
 13405                           	callstack 0
 13406  0049D2                     i2_strlen:
 13407                           	callstack 23
 13408                           
 13409                           ; BSR set to: 0
 13410                           
 13411                           ; BSR set to: 0
 13412                           ;incstack = 0
 13413  0049D2  C001  F003         	movff	i2strlen@s,i2strlen@cp
 13414  0049D6  D001               	goto	i2l4826
 13415  0049D8                     i2l4824:
 13416                           
 13417                           ; BSR set to: 0
 13418  0049D8  2A03               	incf	i2strlen@cp^0,f,c
 13419  0049DA                     i2l4826:
 13420                           
 13421                           ; BSR set to: 0
 13422  0049DA  5003               	movf	i2strlen@cp^0,w,c
 13423  0049DC  6ED9               	movwf	fsr2l,c
 13424  0049DE  6ADA               	clrf	fsr2h,c
 13425  0049E0  50DF               	movf	indf2,w,c
 13426  0049E2  A4D8               	btfss	status,2,c
 13427  0049E4  D7F9               	goto	i2l4824
 13428                           
 13429                           ; BSR set to: 0
 13430  0049E6  5001               	movf	i2strlen@s^0,w,c
 13431  0049E8  5C03               	subwf	i2strlen@cp^0,w,c
 13432  0049EA  6E01               	movwf	?i2_strlen^0,c
 13433  0049EC  6A02               	clrf	(?i2_strlen+1)^0,c
 13434  0049EE  BE01               	btfsc	?i2_strlen^0,7,c
 13435  0049F0  0602               	decf	(?i2_strlen+1)^0,f,c
 13436                           
 13437                           ; BSR set to: 0
 13438  0049F2  0012               	return		;funcret
 13439  0049F4                     __end_ofi2_strlen:
 13440                           	callstack 0
 13441                           
 13442 ;; *************** function i2_WriteLCD *****************
 13443 ;; Defined at:
 13444 ;;		line 327 in file "BORRAR.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  word            1    wreg     unsigned char 
 13447 ;; Auto vars:     Size  Location     Type
 13448 ;;  word            1    2[COMRAM] unsigned char 
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  1    wreg      void 
 13451 ;; Registers used:
 13452 ;;		wreg, status,2, status,0, cstack
 13453 ;; Tracked objects:
 13454 ;;		On entry : 3F/0
 13455 ;;		On exit  : 0/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;Total ram usage:        1 bytes
 13463 ;; Hardware stack levels used: 1
 13464 ;; Hardware stack levels required when called: 1
 13465 ;; This function calls:
 13466 ;;		i2_LCD
 13467 ;; This function is called by:
 13468 ;;		i2_DataLCD
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           	psect	text70
 13473  004A5E                     __ptext70:
 13474                           	callstack 0
 13475  004A5E                     i2_WriteLCD:
 13476                           	callstack 22
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;incstack = 0
 13480                           ;i2WriteLCD@word stored from wreg
 13481  004A5E  6E03               	movwf	i2WriteLCD@word^0,c
 13482                           
 13483                           ;BORRAR.c: 328: LATEbits.LATE1 = 1;
 13484  004A60  828D               	bsf	141,1,c	;volatile
 13485                           
 13486                           ;BORRAR.c: 329: LCD(word >> 4);
 13487  004A62  3803               	swapf	i2WriteLCD@word^0,w,c
 13488  004A64  0B0F               	andlw	15
 13489  004A66  EC47  F01F         	call	i2_LCD
 13490                           
 13491                           ;BORRAR.c: 330: LCD(word & 0x0F);
 13492  004A6A  5003               	movf	i2WriteLCD@word^0,w,c
 13493  004A6C  0B0F               	andlw	15
 13494  004A6E  EC47  F01F         	call	i2_LCD
 13495  004A72  0012               	return		;funcret
 13496  004A74                     __end_ofi2_WriteLCD:
 13497                           	callstack 0
 13498                           
 13499 ;; *************** function i2_LCD *****************
 13500 ;; Defined at:
 13501 ;;		line 333 in file "BORRAR.c"
 13502 ;; Parameters:    Size  Location     Type
 13503 ;;  data            1    wreg     unsigned char 
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;  data            1    1[COMRAM] unsigned char 
 13506 ;; Return value:  Size  Location     Type
 13507 ;;                  1    wreg      void 
 13508 ;; Registers used:
 13509 ;;		wreg, status,2, status,0, cstack
 13510 ;; Tracked objects:
 13511 ;;		On entry : 0/0
 13512 ;;		On exit  : 0/0
 13513 ;;		Unchanged: 0/0
 13514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13519 ;;Total ram usage:        2 bytes
 13520 ;; Hardware stack levels used: 1
 13521 ;; This function calls:
 13522 ;;		Nothing
 13523 ;; This function is called by:
 13524 ;;		i2_SettingsLCD
 13525 ;;		i2_WriteLCD
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           	psect	text71
 13530  003E8E                     __ptext71:
 13531                           	callstack 0
 13532  003E8E                     i2_LCD:
 13533                           	callstack 23
 13534                           
 13535                           ;incstack = 0
 13536                           ;i2LCD@data stored from wreg
 13537  003E8E  6E02               	movwf	i2LCD@data^0,c
 13538                           
 13539                           ;BORRAR.c: 334: LATEbits.LATE0 = 1;
 13540  003E90  808D               	bsf	141,0,c	;volatile
 13541                           
 13542                           ;BORRAR.c: 335: _delay((unsigned long)((10)*(16000000/4000000.0)));
 13543  003E92  0E0D               	movlw	13
 13544  003E94                     i2u788_47:
 13545  003E94  2EE8               	decfsz	wreg,f,c
 13546  003E96  D7FE               	bra	i2u788_47
 13547  003E98  F000               	nop	
 13548                           
 13549                           ;BORRAR.c: 336: LATDbits.LATD0 = (data & 0x01);
 13550  003E9A  C002  F001         	movff	i2LCD@data,??i2_LCD
 13551  003E9E  0E01               	movlw	1
 13552  003EA0  1601               	andwf	??i2_LCD^0,f,c
 13553  003EA2  508C               	movf	140,w,c	;volatile
 13554  003EA4  1801               	xorwf	??i2_LCD^0,w,c
 13555  003EA6  0BFE               	andlw	-2
 13556  003EA8  1801               	xorwf	??i2_LCD^0,w,c
 13557  003EAA  6E8C               	movwf	140,c	;volatile
 13558                           
 13559                           ;BORRAR.c: 337: _delay((unsigned long)((10)*(16000000/4000000.0)));
 13560  003EAC  0E0D               	movlw	13
 13561  003EAE                     i2u789_47:
 13562  003EAE  2EE8               	decfsz	wreg,f,c
 13563  003EB0  D7FE               	bra	i2u789_47
 13564  003EB2  F000               	nop	
 13565                           
 13566                           ;BORRAR.c: 338: LATDbits.LATD1 = (data & 0x02) >> 1;
 13567  003EB4  C002  F001         	movff	i2LCD@data,??i2_LCD
 13568  003EB8  90D8               	bcf	status,0,c
 13569  003EBA  3201               	rrcf	??i2_LCD^0,f,c
 13570  003EBC  0E01               	movlw	1
 13571  003EBE  1601               	andwf	??i2_LCD^0,f,c
 13572  003EC0  4601               	rlncf	??i2_LCD^0,f,c
 13573  003EC2  508C               	movf	140,w,c	;volatile
 13574  003EC4  1801               	xorwf	??i2_LCD^0,w,c
 13575  003EC6  0BFD               	andlw	-3
 13576  003EC8  1801               	xorwf	??i2_LCD^0,w,c
 13577  003ECA  6E8C               	movwf	140,c	;volatile
 13578                           
 13579                           ;BORRAR.c: 339: _delay((unsigned long)((10)*(16000000/4000000.0)));
 13580  003ECC  0E0D               	movlw	13
 13581  003ECE                     i2u790_47:
 13582  003ECE  2EE8               	decfsz	wreg,f,c
 13583  003ED0  D7FE               	bra	i2u790_47
 13584  003ED2  F000               	nop	
 13585                           
 13586                           ;BORRAR.c: 340: LATDbits.LATD2 = (data & 0x04) >> 2;
 13587  003ED4  C002  F001         	movff	i2LCD@data,??i2_LCD
 13588  003ED8  90D8               	bcf	status,0,c
 13589  003EDA  3201               	rrcf	??i2_LCD^0,f,c
 13590  003EDC  90D8               	bcf	status,0,c
 13591  003EDE  3201               	rrcf	??i2_LCD^0,f,c
 13592  003EE0  0E01               	movlw	1
 13593  003EE2  1601               	andwf	??i2_LCD^0,f,c
 13594  003EE4  4601               	rlncf	??i2_LCD^0,f,c
 13595  003EE6  4601               	rlncf	??i2_LCD^0,f,c
 13596  003EE8  508C               	movf	140,w,c	;volatile
 13597  003EEA  1801               	xorwf	??i2_LCD^0,w,c
 13598  003EEC  0BFB               	andlw	-5
 13599  003EEE  1801               	xorwf	??i2_LCD^0,w,c
 13600  003EF0  6E8C               	movwf	140,c	;volatile
 13601                           
 13602                           ;BORRAR.c: 341: _delay((unsigned long)((10)*(16000000/4000000.0)));
 13603  003EF2  0E0D               	movlw	13
 13604  003EF4                     i2u791_47:
 13605  003EF4  2EE8               	decfsz	wreg,f,c
 13606  003EF6  D7FE               	bra	i2u791_47
 13607  003EF8  F000               	nop	
 13608                           
 13609                           ;BORRAR.c: 342: LATDbits.LATD3 = (data & 0x08) >> 3;
 13610  003EFA  C002  F001         	movff	i2LCD@data,??i2_LCD
 13611  003EFE  90D8               	bcf	status,0,c
 13612  003F00  3201               	rrcf	??i2_LCD^0,f,c
 13613  003F02  90D8               	bcf	status,0,c
 13614  003F04  3201               	rrcf	??i2_LCD^0,f,c
 13615  003F06  90D8               	bcf	status,0,c
 13616  003F08  3201               	rrcf	??i2_LCD^0,f,c
 13617  003F0A  0E01               	movlw	1
 13618  003F0C  1601               	andwf	??i2_LCD^0,f,c
 13619  003F0E  4601               	rlncf	??i2_LCD^0,f,c
 13620  003F10  4601               	rlncf	??i2_LCD^0,f,c
 13621  003F12  4601               	rlncf	??i2_LCD^0,f,c
 13622  003F14  508C               	movf	140,w,c	;volatile
 13623  003F16  1801               	xorwf	??i2_LCD^0,w,c
 13624  003F18  0BF7               	andlw	-9
 13625  003F1A  1801               	xorwf	??i2_LCD^0,w,c
 13626  003F1C  6E8C               	movwf	140,c	;volatile
 13627                           
 13628                           ;BORRAR.c: 343: _delay((unsigned long)((10)*(16000000/4000000.0)));
 13629  003F1E  0E0D               	movlw	13
 13630  003F20                     i2u792_47:
 13631  003F20  2EE8               	decfsz	wreg,f,c
 13632  003F22  D7FE               	bra	i2u792_47
 13633  003F24  F000               	nop	
 13634                           
 13635                           ;BORRAR.c: 344: LATEbits.LATE0 = 0;
 13636  003F26  908D               	bcf	141,0,c	;volatile
 13637                           
 13638                           ;BORRAR.c: 345: _delay((unsigned long)((10)*(16000000/4000000.0)));
 13639  003F28  0E0D               	movlw	13
 13640  003F2A                     i2u793_47:
 13641  003F2A  2EE8               	decfsz	wreg,f,c
 13642  003F2C  D7FE               	bra	i2u793_47
 13643  003F2E  F000               	nop	
 13644  003F30  0012               	return		;funcret
 13645  003F32                     __end_ofi2_LCD:
 13646                           	callstack 0
 13647                           
 13648 ;; *************** function ___awtoft *****************
 13649 ;; Defined at:
 13650 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awtoft.c"
 13651 ;; Parameters:    Size  Location     Type
 13652 ;;  c               2    8[COMRAM] int 
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;  sign            1   11[COMRAM] unsigned char 
 13655 ;; Return value:  Size  Location     Type
 13656 ;;                  3    8[COMRAM] float 
 13657 ;; Registers used:
 13658 ;;		wreg, status,2, status,0, cstack
 13659 ;; Tracked objects:
 13660 ;;		On entry : 3F/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13664 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13667 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13668 ;;Total ram usage:        4 bytes
 13669 ;; Hardware stack levels used: 1
 13670 ;; Hardware stack levels required when called: 1
 13671 ;; This function calls:
 13672 ;;		i2___ftpack
 13673 ;; This function is called by:
 13674 ;;		_TMR1_ISR
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678                           	psect	text72
 13679  004802                     __ptext72:
 13680                           	callstack 0
 13681  004802                     ___awtoft:
 13682                           	callstack 23
 13683                           
 13684                           ; BSR set to: 0
 13685                           
 13686                           ;incstack = 0
 13687  004802  0E00               	movlw	0
 13688  004804  6E0C               	movwf	___awtoft@sign^0,c
 13689                           
 13690                           ; BSR set to: 0
 13691  004806  AE0A               	btfss	(___awtoft@c+1)^0,7,c
 13692  004808  D006               	goto	i2l5172
 13693                           
 13694                           ; BSR set to: 0
 13695  00480A  6C09               	negf	___awtoft@c^0,c
 13696  00480C  1E0A               	comf	(___awtoft@c+1)^0,f,c
 13697  00480E  B0D8               	btfsc	status,0,c
 13698  004810  2A0A               	incf	(___awtoft@c+1)^0,f,c
 13699                           
 13700                           ; BSR set to: 0
 13701  004812  0E01               	movlw	1
 13702  004814  6E0C               	movwf	___awtoft@sign^0,c
 13703  004816                     i2l5172:
 13704                           
 13705                           ; BSR set to: 0
 13706  004816  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 13707  00481A  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 13708  00481E  6A03               	clrf	(i2___ftpack@arg+2)^0,c
 13709  004820  0E8E               	movlw	142
 13710  004822  6E04               	movwf	i2___ftpack@exp^0,c
 13711  004824  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 13712  004828  EC9A  F01E         	call	i2___ftpack	;wreg free
 13713  00482C  C001  F009         	movff	?i2___ftpack,?___awtoft
 13714  004830  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 13715  004834  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 13716  004838  0012               	return		;funcret
 13717  00483A                     __end_of___awtoft:
 13718                           	callstack 0
 13719                           
 13720 ;; *************** function i2___ftpack *****************
 13721 ;; Defined at:
 13722 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\float.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;  arg             3    0[COMRAM] unsigned um
 13725 ;;  exp             1    3[COMRAM] unsigned char 
 13726 ;;  sign            1    4[COMRAM] unsigned char 
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;		None
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  3    0[COMRAM] float 
 13731 ;; Registers used:
 13732 ;;		wreg, status,2, status,0
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13738 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13741 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13742 ;;Total ram usage:        8 bytes
 13743 ;; Hardware stack levels used: 1
 13744 ;; This function calls:
 13745 ;;		Nothing
 13746 ;; This function is called by:
 13747 ;;		___awtoft
 13748 ;;		i2___ftadd
 13749 ;;		i2___ftmul
 13750 ;;		i2___lltoft
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	text73
 13755  003D34                     __ptext73:
 13756                           	callstack 0
 13757  003D34                     i2___ftpack:
 13758                           	callstack 21
 13759                           
 13760                           ;incstack = 0
 13761  003D34  5004               	movf	i2___ftpack@exp^0,w,c
 13762  003D36  B4D8               	btfsc	status,2,c
 13763  003D38  D005               	goto	i2u328_40
 13764  003D3A  5001               	movf	i2___ftpack@arg^0,w,c
 13765  003D3C  1002               	iorwf	(i2___ftpack@arg+1)^0,w,c
 13766  003D3E  1003               	iorwf	(i2___ftpack@arg+2)^0,w,c
 13767  003D40  A4D8               	btfss	status,2,c
 13768  003D42  D00C               	goto	i2l3488
 13769  003D44                     i2u328_40:
 13770  003D44  0E00               	movlw	0
 13771  003D46  6E01               	movwf	?i2___ftpack^0,c
 13772  003D48  0E00               	movlw	0
 13773  003D4A  6E02               	movwf	(?i2___ftpack+1)^0,c
 13774  003D4C  0E00               	movlw	0
 13775  003D4E  6E03               	movwf	(?i2___ftpack+2)^0,c
 13776  003D50  0012               	return	
 13777  003D52                     i2l3486:
 13778  003D52  2A04               	incf	i2___ftpack@exp^0,f,c
 13779  003D54  90D8               	bcf	status,0,c
 13780  003D56  3203               	rrcf	(i2___ftpack@arg+2)^0,f,c
 13781  003D58  3202               	rrcf	(i2___ftpack@arg+1)^0,f,c
 13782  003D5A  3201               	rrcf	i2___ftpack@arg^0,f,c
 13783  003D5C                     i2l3488:
 13784  003D5C  0E00               	movlw	0
 13785  003D5E  1401               	andwf	i2___ftpack@arg^0,w,c
 13786  003D60  6E06               	movwf	??i2___ftpack^0,c
 13787  003D62  0E00               	movlw	0
 13788  003D64  1402               	andwf	(i2___ftpack@arg+1)^0,w,c
 13789  003D66  6E07               	movwf	(??i2___ftpack+1)^0,c
 13790  003D68  0EFE               	movlw	254
 13791  003D6A  1403               	andwf	(i2___ftpack@arg+2)^0,w,c
 13792  003D6C  6E08               	movwf	(??i2___ftpack+2)^0,c
 13793  003D6E  5006               	movf	??i2___ftpack^0,w,c
 13794  003D70  1007               	iorwf	(??i2___ftpack+1)^0,w,c
 13795  003D72  1008               	iorwf	(??i2___ftpack+2)^0,w,c
 13796  003D74  B4D8               	btfsc	status,2,c
 13797  003D76  D00C               	goto	i2l3494
 13798  003D78  D7EC               	goto	i2l3486
 13799  003D7A                     i2l3490:
 13800  003D7A  2A04               	incf	i2___ftpack@exp^0,f,c
 13801  003D7C  0E01               	movlw	1
 13802  003D7E  2601               	addwf	i2___ftpack@arg^0,f,c
 13803  003D80  0E00               	movlw	0
 13804  003D82  2202               	addwfc	(i2___ftpack@arg+1)^0,f,c
 13805  003D84  0E00               	movlw	0
 13806  003D86  2203               	addwfc	(i2___ftpack@arg+2)^0,f,c
 13807  003D88  90D8               	bcf	status,0,c
 13808  003D8A  3203               	rrcf	(i2___ftpack@arg+2)^0,f,c
 13809  003D8C  3202               	rrcf	(i2___ftpack@arg+1)^0,f,c
 13810  003D8E  3201               	rrcf	i2___ftpack@arg^0,f,c
 13811  003D90                     i2l3494:
 13812  003D90  0E00               	movlw	0
 13813  003D92  1401               	andwf	i2___ftpack@arg^0,w,c
 13814  003D94  6E06               	movwf	??i2___ftpack^0,c
 13815  003D96  0E00               	movlw	0
 13816  003D98  1402               	andwf	(i2___ftpack@arg+1)^0,w,c
 13817  003D9A  6E07               	movwf	(??i2___ftpack+1)^0,c
 13818  003D9C  0EFF               	movlw	255
 13819  003D9E  1403               	andwf	(i2___ftpack@arg+2)^0,w,c
 13820  003DA0  6E08               	movwf	(??i2___ftpack+2)^0,c
 13821  003DA2  5006               	movf	??i2___ftpack^0,w,c
 13822  003DA4  1007               	iorwf	(??i2___ftpack+1)^0,w,c
 13823  003DA6  1008               	iorwf	(??i2___ftpack+2)^0,w,c
 13824  003DA8  B4D8               	btfsc	status,2,c
 13825  003DAA  D006               	goto	i2l3498
 13826  003DAC  D7E6               	goto	i2l3490
 13827  003DAE                     i2l3496:
 13828  003DAE  0604               	decf	i2___ftpack@exp^0,f,c
 13829  003DB0  90D8               	bcf	status,0,c
 13830  003DB2  3601               	rlcf	i2___ftpack@arg^0,f,c
 13831  003DB4  3602               	rlcf	(i2___ftpack@arg+1)^0,f,c
 13832  003DB6  3603               	rlcf	(i2___ftpack@arg+2)^0,f,c
 13833  003DB8                     i2l3498:
 13834  003DB8  BE02               	btfsc	(i2___ftpack@arg+1)^0,7,c
 13835  003DBA  D003               	goto	i2u332_40
 13836  003DBC  0E02               	movlw	2
 13837  003DBE  6004               	cpfslt	i2___ftpack@exp^0,c
 13838  003DC0  D7F6               	goto	i2l3496
 13839  003DC2                     i2u332_40:
 13840  003DC2  A004               	btfss	i2___ftpack@exp^0,0,c
 13841  003DC4  9E02               	bcf	(i2___ftpack@arg+1)^0,7,c
 13842  003DC6  90D8               	bcf	status,0,c
 13843  003DC8  3204               	rrcf	i2___ftpack@exp^0,f,c
 13844  003DCA  5004               	movf	i2___ftpack@exp^0,w,c
 13845  003DCC  1203               	iorwf	(i2___ftpack@arg+2)^0,f,c
 13846  003DCE  5005               	movf	i2___ftpack@sign^0,w,c
 13847  003DD0  A4D8               	btfss	status,2,c
 13848  003DD2  8E03               	bsf	(i2___ftpack@arg+2)^0,7,c
 13849  003DD4  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13850  003DD8  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13851  003DDC  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13852  003DE0  0012               	return		;funcret
 13853  003DE2                     __end_ofi2___ftpack:
 13854                           	callstack 0
 13855                           
 13856                           	psect	rparam
 13857  0000                     
 13858                           	psect	temp
 13859  00005F                     btemp:
 13860                           	callstack 0
 13861  00005F                     	ds	1
 13862  0000                     int$flags	set	btemp
 13863  0000                     wtemp8	set	btemp+1
 13864  0000                     ttemp5	set	btemp+1
 13865  0000                     ttemp6	set	btemp+4
 13866  0000                     ttemp7	set	btemp+8
 13867                           
 13868                           	psect	idloc
 13869                           
 13870                           ;Config register IDLOC0 @ 0x200000
 13871                           ;	unspecified, using default values
 13872  200000                     	org	2097152
 13873  200000  FF                 	db	255
 13874                           
 13875                           ;Config register IDLOC1 @ 0x200001
 13876                           ;	unspecified, using default values
 13877  200001                     	org	2097153
 13878  200001  FF                 	db	255
 13879                           
 13880                           ;Config register IDLOC2 @ 0x200002
 13881                           ;	unspecified, using default values
 13882  200002                     	org	2097154
 13883  200002  FF                 	db	255
 13884                           
 13885                           ;Config register IDLOC3 @ 0x200003
 13886                           ;	unspecified, using default values
 13887  200003                     	org	2097155
 13888  200003  FF                 	db	255
 13889                           
 13890                           ;Config register IDLOC4 @ 0x200004
 13891                           ;	unspecified, using default values
 13892  200004                     	org	2097156
 13893  200004  FF                 	db	255
 13894                           
 13895                           ;Config register IDLOC5 @ 0x200005
 13896                           ;	unspecified, using default values
 13897  200005                     	org	2097157
 13898  200005  FF                 	db	255
 13899                           
 13900                           ;Config register IDLOC6 @ 0x200006
 13901                           ;	unspecified, using default values
 13902  200006                     	org	2097158
 13903  200006  FF                 	db	255
 13904                           
 13905                           ;Config register IDLOC7 @ 0x200007
 13906                           ;	unspecified, using default values
 13907  200007                     	org	2097159
 13908  200007  FF                 	db	255
 13909                           
 13910                           	psect	config
 13911                           
 13912                           ; Padding undefined space
 13913  300000                     	org	3145728
 13914  300000  FF                 	db	255
 13915                           
 13916                           ;Config register CONFIG1H @ 0x300001
 13917                           ;	Oscillator Selection bits
 13918                           ;	FOSC = INTIO67, Internal oscillator block
 13919                           ;	4X PLL Enable
 13920                           ;	PLLCFG = 0x0, unprogrammed default
 13921                           ;	Primary clock enable bit
 13922                           ;	PRICLKEN = 0x1, unprogrammed default
 13923                           ;	Fail-Safe Clock Monitor Enable bit
 13924                           ;	FCMEN = 0x0, unprogrammed default
 13925                           ;	Internal/External Oscillator Switchover bit
 13926                           ;	IESO = 0x0, unprogrammed default
 13927  300001                     	org	3145729
 13928  300001  28                 	db	40
 13929                           
 13930                           ;Config register CONFIG2L @ 0x300002
 13931                           ;	unspecified, using default values
 13932                           ;	Power-up Timer Enable bit
 13933                           ;	PWRTEN = 0x1, unprogrammed default
 13934                           ;	Brown-out Reset Enable bits
 13935                           ;	BOREN = 0x3, unprogrammed default
 13936                           ;	Brown Out Reset Voltage bits
 13937                           ;	BORV = 0x3, unprogrammed default
 13938  300002                     	org	3145730
 13939  300002  1F                 	db	31
 13940                           
 13941                           ;Config register CONFIG2H @ 0x300003
 13942                           ;	Watchdog Timer Enable bits
 13943                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
 13944                           ;	Watchdog Timer Postscale Select bits
 13945                           ;	WDTPS = 0xF, unprogrammed default
 13946  300003                     	org	3145731
 13947  300003  3C                 	db	60
 13948                           
 13949                           ; Padding undefined space
 13950  300004                     	org	3145732
 13951  300004  FF                 	db	255
 13952                           
 13953                           ;Config register CONFIG3H @ 0x300005
 13954                           ;	unspecified, using default values
 13955                           ;	CCP2 MUX bit
 13956                           ;	CCP2MX = 0x1, unprogrammed default
 13957                           ;	PORTB A/D Enable bit
 13958                           ;	PBADEN = 0x1, unprogrammed default
 13959                           ;	P3A/CCP3 Mux bit
 13960                           ;	CCP3MX = 0x1, unprogrammed default
 13961                           ;	HFINTOSC Fast Start-up
 13962                           ;	HFOFST = 0x1, unprogrammed default
 13963                           ;	Timer3 Clock input mux bit
 13964                           ;	T3CMX = 0x1, unprogrammed default
 13965                           ;	ECCP2 B output mux bit
 13966                           ;	P2BMX = 0x1, unprogrammed default
 13967                           ;	MCLR Pin Enable bit
 13968                           ;	MCLRE = 0x1, unprogrammed default
 13969  300005                     	org	3145733
 13970  300005  BF                 	db	191
 13971                           
 13972                           ;Config register CONFIG4L @ 0x300006
 13973                           ;	Stack Full/Underflow Reset Enable bit
 13974                           ;	STVREN = 0x1, unprogrammed default
 13975                           ;	Single-Supply ICSP Enable bit
 13976                           ;	LVP = OFF, Single-Supply ICSP disabled
 13977                           ;	Extended Instruction Set Enable bit
 13978                           ;	XINST = 0x0, unprogrammed default
 13979                           ;	Background Debug
 13980                           ;	DEBUG = 0x1, unprogrammed default
 13981  300006                     	org	3145734
 13982  300006  81                 	db	129
 13983                           
 13984                           ; Padding undefined space
 13985  300007                     	org	3145735
 13986  300007  FF                 	db	255
 13987                           
 13988                           ;Config register CONFIG5L @ 0x300008
 13989                           ;	unspecified, using default values
 13990                           ;	Code Protection Block 0
 13991                           ;	CP0 = 0x1, unprogrammed default
 13992                           ;	Code Protection Block 1
 13993                           ;	CP1 = 0x1, unprogrammed default
 13994                           ;	Code Protection Block 2
 13995                           ;	CP2 = 0x1, unprogrammed default
 13996                           ;	Code Protection Block 3
 13997                           ;	CP3 = 0x1, unprogrammed default
 13998  300008                     	org	3145736
 13999  300008  0F                 	db	15
 14000                           
 14001                           ;Config register CONFIG5H @ 0x300009
 14002                           ;	unspecified, using default values
 14003                           ;	Boot Block Code Protection bit
 14004                           ;	CPB = 0x1, unprogrammed default
 14005                           ;	Data EEPROM Code Protection bit
 14006                           ;	CPD = 0x1, unprogrammed default
 14007  300009                     	org	3145737
 14008  300009  C0                 	db	192
 14009                           
 14010                           ;Config register CONFIG6L @ 0x30000A
 14011                           ;	unspecified, using default values
 14012                           ;	Write Protection Block 0
 14013                           ;	WRT0 = 0x1, unprogrammed default
 14014                           ;	Write Protection Block 1
 14015                           ;	WRT1 = 0x1, unprogrammed default
 14016                           ;	Write Protection Block 2
 14017                           ;	WRT2 = 0x1, unprogrammed default
 14018                           ;	Write Protection Block 3
 14019                           ;	WRT3 = 0x1, unprogrammed default
 14020  30000A                     	org	3145738
 14021  30000A  0F                 	db	15
 14022                           
 14023                           ;Config register CONFIG6H @ 0x30000B
 14024                           ;	unspecified, using default values
 14025                           ;	Configuration Register Write Protection bit
 14026                           ;	WRTC = 0x1, unprogrammed default
 14027                           ;	Boot Block Write Protection bit
 14028                           ;	WRTB = 0x1, unprogrammed default
 14029                           ;	Data EEPROM Write Protection bit
 14030                           ;	WRTD = 0x1, unprogrammed default
 14031  30000B                     	org	3145739
 14032  30000B  E0                 	db	224
 14033                           
 14034                           ;Config register CONFIG7L @ 0x30000C
 14035                           ;	unspecified, using default values
 14036                           ;	Table Read Protection Block 0
 14037                           ;	EBTR0 = 0x1, unprogrammed default
 14038                           ;	Table Read Protection Block 1
 14039                           ;	EBTR1 = 0x1, unprogrammed default
 14040                           ;	Table Read Protection Block 2
 14041                           ;	EBTR2 = 0x1, unprogrammed default
 14042                           ;	Table Read Protection Block 3
 14043                           ;	EBTR3 = 0x1, unprogrammed default
 14044  30000C                     	org	3145740
 14045  30000C  0F                 	db	15
 14046                           
 14047                           ;Config register CONFIG7H @ 0x30000D
 14048                           ;	unspecified, using default values
 14049                           ;	Boot Block Table Read Protection bit
 14050                           ;	EBTRB = 0x1, unprogrammed default
 14051  30000D                     	org	3145741
 14052  30000D  40                 	db	64
 14053                           tosu	equ	0xFFF
 14054                           tosh	equ	0xFFE
 14055                           tosl	equ	0xFFD
 14056                           stkptr	equ	0xFFC
 14057                           pclatu	equ	0xFFB
 14058                           pclath	equ	0xFFA
 14059                           pcl	equ	0xFF9
 14060                           tblptru	equ	0xFF8
 14061                           tblptrh	equ	0xFF7
 14062                           tblptrl	equ	0xFF6
 14063                           tablat	equ	0xFF5
 14064                           prodh	equ	0xFF4
 14065                           prodl	equ	0xFF3
 14066                           indf0	equ	0xFEF
 14067                           postinc0	equ	0xFEE
 14068                           postdec0	equ	0xFED
 14069                           preinc0	equ	0xFEC
 14070                           plusw0	equ	0xFEB
 14071                           fsr0h	equ	0xFEA
 14072                           fsr0l	equ	0xFE9
 14073                           wreg	equ	0xFE8
 14074                           indf1	equ	0xFE7
 14075                           postinc1	equ	0xFE6
 14076                           postdec1	equ	0xFE5
 14077                           preinc1	equ	0xFE4
 14078                           plusw1	equ	0xFE3
 14079                           fsr1h	equ	0xFE2
 14080                           fsr1l	equ	0xFE1
 14081                           bsr	equ	0xFE0
 14082                           indf2	equ	0xFDF
 14083                           postinc2	equ	0xFDE
 14084                           postdec2	equ	0xFDD
 14085                           preinc2	equ	0xFDC
 14086                           plusw2	equ	0xFDB
 14087                           fsr2h	equ	0xFDA
 14088                           fsr2l	equ	0xFD9
 14089                           status	equ	0xFD8

Data Sizes:
    Strings     42
    Constant    118
    Data        2
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     85     134
    BANK1           256     22      22
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 20
		 -> text(BANK0[20]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 20
		 -> text(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_6(CODE[13]), STR_5(CODE[13]), STR_4(CODE[13]), STR_3(CODE[16]), 
		 -> STR_2(CODE[13]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> text(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    writeI2C@Data	PTR unsigned char  size(1) Largest target is 4
		 -> data2(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TMR1_ISR in COMRAM

    _TMR1_ISR->i2_sprintf
    i2_writeI2C->i2_sendI2C
    i2_stopI2C->i2_readyI2C
    i2_startI2C->i2_readyI2C
    i2_sendI2C->i2_readyI2C
    i2_sprintf->i2___ftsub
    i2_scale->i2___ftmul
    i2_fround->i2___ftmul
    i2___lbdiv->i2___lbmod
    i2___ftmul->i2___awdiv
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2___ftmul
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2_map->i2___fttol
    i2___wmul->i2___awdiv
    i2___awdiv->i2___awmod
    i2_SettingsLCD->i2_LCD
    i2_DataLCD->i2_WriteLCD
    i2_DataLCD->i2_strlen
    i2_WriteLCD->i2_LCD
    ___awtoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf
    _writeI2C->_sendI2C
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___awdiv
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _settings->_setPWMFreq
    _setPWMFreq->___fttol
    _writeI2C1->_sendI2C
    _readI2C1->_receiveI2C
    _stopI2C->_readyI2C
    _startI2C->_readyI2C
    _sendI2C->_readyI2C
    _repeatedStart->_readyI2C
    _receiveI2C->_readyI2C
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftdiv->___lltoft
    _SettingsLCD->_LCD
    _map->___fttol
    ___wmul->___awdiv
    ___awdiv->___awmod
    _DataLCD->_WriteLCD
    _DataLCD->_strlen
    _WriteLCD->_LCD

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR1_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR1_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR1_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR1_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _TMR1_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _TMR1_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _TMR1_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _TMR1_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _TMR1_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _TMR1_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _TMR1_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _TMR1_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   74281
                            _DataLCD
                        _SettingsLCD
                            ___fttol
                                _map
                           _settings
                            _sprintf
                           _writeI2C
 ---------------------------------------------------------------------------------
 (1) _writeI2C                                             7     3      4    1323
                                             13 BANK0      7     3      4
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             43    36      7   53119
                                             72 BANK0     13     6      7
                                              0 BANK1     22    22      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               11     8      3   10779
                                             40 BANK0     11     8      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1513
                                             11 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             11 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              14    11      3    8115
                                             40 BANK0     14    11      3
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     502
                                             11 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     511
                                             15 BANK0      4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6752
                                             25 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             11 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             11 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     952
                                             24 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             11 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5739
                                             66 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5323
                                             54 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     155
                                             11 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _settings                                             2     2      0   12591
                                             75 BANK0      2     2      0
                        _SettingsLCD
                         _setPWMFreq
                          _writeI2C1
 ---------------------------------------------------------------------------------
 (2) _setPWMFreq                                          10     7      3   11611
                                             66 BANK0      9     6      3
                            ___ftdiv
                             ___ftge
                            ___fttol
                           ___lltoft
                           _readI2C1
                          _writeI2C1
 ---------------------------------------------------------------------------------
 (2) _writeI2C1                                            5     3      2     848
                                             13 BANK0      5     3      2
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (3) _readI2C1                                             7     3      4     408
                                             15 BANK0      7     3      4
                         _receiveI2C
                      _repeatedStart
                            _sendI2C
                           _startI2C
                            _stopI2C
 ---------------------------------------------------------------------------------
 (2) _stopI2C                                              0     0      0       0
                           _readyI2C
 ---------------------------------------------------------------------------------
 (2) _startI2C                                             0     0      0       0
                           _readyI2C
 ---------------------------------------------------------------------------------
 (2) _sendI2C                                              1     1      0      22
                                             12 BANK0      1     1      0
                           _readyI2C
 ---------------------------------------------------------------------------------
 (4) _repeatedStart                                        0     0      0       0
                           _readyI2C
 ---------------------------------------------------------------------------------
 (4) _receiveI2C                                           3     3      0      45
                                             12 BANK0      3     3      0
                           _readyI2C
 ---------------------------------------------------------------------------------
 (3) _readyI2C                                             1     1      0       0
                                             11 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3550
                                             19 BANK0      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1201
                                             51 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lltoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1098
                                             11 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4014
                                             28 BANK0     15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3268
                                             11 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _SettingsLCD                                          1     1      0     132
                                             13 BANK0      1     1      0
                                _LCD
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     0     10    5554
                                             66 BANK0     10     0     10
                            ___awdiv
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1102
                                             25 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1885
                                             17 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _DataLCD                                              2     2      0     361
                                             14 BANK0      2     2      0
                           _WriteLCD
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2     229
                                             11 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteLCD                                             1     1      0     132
                                             13 BANK0      1     1      0
                                _LCD
 ---------------------------------------------------------------------------------
 (3) _LCD                                                  2     2      0      88
                                             11 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                            11    11      0   24696
                                              0 BANK0     11    11      0
                           ___awtoft
                          i2_DataLCD
                      i2_SettingsLCD
                          i2___ftadd
                          i2___ftmul
                          i2___fttol
                              i2_map
                          i2_sprintf
                         i2_writeI2C
 ---------------------------------------------------------------------------------
 (7) i2_writeI2C                                           7     3      4     267
                                              2 COMRAM     7     3      4
                          i2_sendI2C
                         i2_startI2C
                          i2_stopI2C
 ---------------------------------------------------------------------------------
 (8) i2_stopI2C                                            0     0      0       0
                         i2_readyI2C
 ---------------------------------------------------------------------------------
 (8) i2_startI2C                                           0     0      0       0
                         i2_readyI2C
 ---------------------------------------------------------------------------------
 (8) i2_sendI2C                                            1     1      0      22
                                              1 COMRAM     1     1      0
                         i2_readyI2C
 ---------------------------------------------------------------------------------
 (9) i2_readyI2C                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2_sprintf                                           41    36      5   17445
                                             61 COMRAM    33    28      5
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_scale
 ---------------------------------------------------------------------------------
 (8) i2_scale                                             11     8      3    3522
                                             29 COMRAM    11     8      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     608
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2_fround                                            14    11      3    2477
                                             29 COMRAM    14    11      3
                          i2___ftmul
                          i2___lbdiv
                          i2___lbmod
 ---------------------------------------------------------------------------------
 (9) i2___lbmod                                            4     3      1     237
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (9) i2___lbdiv                                            4     3      1     240
                                              4 COMRAM     4     3      1
                          i2___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftmul                                           15     9      6    1755
                                             14 COMRAM    15     9      6
                           ___awtoft (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                          i2___lbdiv (ARG)
                          i2___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (8) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (8) i2__div_to_l_                                        12     6      6     498
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (8) i2___lltoft                                           9     5      4     638
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lldiv                                           13     5      8     318
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (8) i2___fttol                                           15    11      4     382
                                             29 COMRAM    15    11      4
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftsub                                            6     0      6    1762
                                             55 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1643
                                             43 COMRAM    12     6      6
                           ___awtoft (ARG)
                          i2___ftmul (ARG)
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) i2___ftge                                             9     3      6     292
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) i2_map                                               10     0     10    1445
                                             44 COMRAM    10     0     10
                          i2___awdiv
                          i2___fttol (ARG)
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     315
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___awdiv                                            8     4      4     716
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) i2_SettingsLCD                                        1     1      0     132
                                              2 COMRAM     1     1      0
                              i2_LCD
 ---------------------------------------------------------------------------------
 (7) i2_DataLCD                                            2     2      0     248
                                              3 COMRAM     2     2      0
                         i2_WriteLCD
                           i2_strlen
 ---------------------------------------------------------------------------------
 (8) i2_strlen                                             3     1      2     116
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (8) i2_WriteLCD                                           1     1      0     132
                                              2 COMRAM     1     1      0
                              i2_LCD
 ---------------------------------------------------------------------------------
 (8) i2_LCD                                                2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3     938
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     543
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DataLCD
     _WriteLCD
       _LCD
     _strlen
   _SettingsLCD
     _LCD
   ___fttol
     ___ftdiv (ARG)
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___lltoft (ARG)
     _scale (ARG)
       ___awdiv
       ___awmod
       ___ftmul
   _map
     ___awdiv
     ___fttol (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
   _settings
     _SettingsLCD
     _setPWMFreq
       ___ftdiv
       ___ftge
       ___fttol
       ___lltoft
       _readI2C1
         _receiveI2C
           _readyI2C
         _repeatedStart
           _readyI2C
         _sendI2C
           _readyI2C
         _startI2C
           _readyI2C
         _stopI2C
           _readyI2C
       _writeI2C1
         _sendI2C
         _startI2C
         _stopI2C
     _writeI2C1
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___ftmul
         ___lbdiv
         ___lbmod
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
     ___fttol
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _isdigit
     _scale
   _writeI2C
     _sendI2C
     _startI2C
     _stopI2C

 _TMR1_ISR (ROOT)
   ___awtoft
     i2___ftpack
   i2_DataLCD
     i2_WriteLCD
       i2_LCD
     i2_strlen
   i2_SettingsLCD
     i2_LCD
   i2___ftadd
     ___awtoft (ARG)
     i2___ftmul (ARG)
       ___awtoft (ARG)
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
       i2___ftpack (ARG)
       i2___lbdiv (ARG)
         i2___lbmod (ARG)
       i2___lbmod (ARG)
     i2___ftpack (ARG)
     i2_fround (ARG)
       i2___ftmul
       i2___lbdiv
       i2___lbmod
   i2___ftmul
   i2___fttol
     i2___ftmul (ARG)
   i2_map
     i2___awdiv
     i2___fttol (ARG)
     i2___wmul (ARG)
       i2___awdiv (ARG)
   i2_sprintf
     i2___awdiv
     i2___ftadd
     i2___ftge
     i2___ftmul
     i2___ftneg
     i2___ftsub
       i2___ftadd
       i2___lltoft (ARG)
         i2___ftpack
     i2___fttol
     i2___lldiv
     i2___llmod
       i2___lldiv (ARG)
     i2___lltoft
     i2___wmul
     i2__div_to_l_
     i2__tdiv_to_l_
     i2_fround
     i2_isdigit
     i2_scale
       i2___awdiv
       i2___awmod
       i2___ftmul
   i2_writeI2C
     i2_sendI2C
       i2_readyI2C
     i2_startI2C
       i2_readyI2C
     i2_stopI2C
       i2_readyI2C

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      48        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      16       7        8.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     55      86       5       83.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITBIGSFRlhll       4F      0       0      45        0.0%
BITBANK15           38      0       0      34        0.0%
BANK15              38      0       0      35        0.0%
BITBIGSFRhll        1C      0       0      37        0.0%
BITBIGSFRlhhhl      15      0       0      40        0.0%
BITBIGSFRhh          D      0       0      36        0.0%
BITBIGSFRlhhllh      C      0       0      42        0.0%
BITBIGSFRlhhhhh      7      0       0      38        0.0%
BITBIGSFRlhhlll      6      0       0      43        0.0%
BITBIGSFRlhlhl       5      0       0      44        0.0%
BITBIGSFRlhhhhl      1      0       0      39        0.0%
BITBIGSFRlhhlh       1      0       0      41        0.0%
BITBIGSFRll          1      0       0      46        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FA      47        0.0%
DATA                 0      0      FA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Nov 19 11:29:16 2022

                      _a 00BB                        _b 00B8                        _c 00B5  
                      _i 00C8             ___awdiv@sign 0076      ___wmul@multiplicand 007B  
             i2___ftpack 3D34               i2_WriteLCD 4A5E             ___ftadd@exp1 00A1  
           ___ftadd@exp2 00A0               i2___lltoft 450C             ___ftadd@sign 009F  
                    l222 3210                      l319 15B4                      l371 40AA  
                    l702 39C8                      l710 33EE                      l741 4910  
                    l709 33C6                      l691 2F9E                      l786 43DC  
                    _GIE 007F97                      _LCD 3DE2                      _led 00C0  
                    _map 464C                      _pos 00C4             ___awmod@sign 0070  
                    wreg 000FE8          i2sprintf@tmpval 0051            i2_SettingsLCD 4A48  
                   ?_LCD 0001             ___ftdiv@cntr 0085             ___ftdiv@sign 008A  
                   l6000 4788                     l4236 49B6                     l4238 49B8  
                   l6022 445A                     l3550 4106                     l6014 48C6  
                   l6006 48AE                     l6102 2256                     l6024 4466  
                   l6120 241E                     l5162 45E0                     l3546 40E4  
                   l6050 32BC                     l6034 31E4                     l6114 2386  
                   l6106 227C                     l3556 4114                     l6132 49A8  
                   l5158 45CC                     l6054 32D8                     l6142 3372  
                   ?_map 00A2                     l6304 43CE                     l6400 1154  
                   l6250 3620                     l6242 360C                     l6226 35E0  
                   l6218 35B0                     l6082 2C4A                     l6074 2BAA  
                   l6410 1196                     l6404 1160                     l5710 2F46  
                   l6238 35FC                     l6190 342C                     l6182 3418  
                   l4910 4596                     l5720 2F7A                     l6264 405C  
                   l6248 3614                     l6096 21BE                     l6600 182C  
                   l6520 1590                     l6504 14DC                     l6512 156E  
                   l6416 11AA                     l6408 1164                     l4904 4584  
                   l5650 3CE2                     l5642 3CA4                     l5706 2F32  
                   l6266 4068                     l6178 3408                     l6602 1830  
                   l6514 157A                     l6450 12E8                     l6442 1282  
                   l6426 11E6                     l5652 3D00                     l5644 3CAE  
                   l5708 2F3C                     l6284 46E6                     l6276 409C  
                   l6188 3420                     l5812 36BA                     l5654 3D0A  
                   l5646 3CCC                     l5726 2FBA                     l5718 2F70  
                   l6198 3562                     l5822 36E2                     l5910 430E  
                   l5902 42F6                     l6550 171A                     l6534 15D4  
                   l6526 15B8                     l6470 13C0                     l6454 130E  
                   l5752 3964                     l5736 2FEA                     l6296 439A  
                   l5816 36CA                     l6608 18AA                     l6480 1418  
                   l6392 10F0                     l6384 10C4                     l5842 3F46  
                   l5746 393C                     l5922 4204                     l6298 43A6  
                   l5826 36F2                     l5906 4300                     l6538 1626  
                   l6490 1482                     l6466 1398                     l6458 134E  
                   l6378 10AC                     l6650 293E                     l6618 27E0  
                   l5772 39A2                     l5684 2EE0                     l6580 178A  
                   l6556 1730                     l6548 170E                     l6484 147E  
                   l6652 2944                     l5854 3F6C                     l5870 3F9E  
                   l5918 41E2                     l5678 2EB8                     l6574 1786  
                   l6558 173A                     l6398 113E                     l5856 3F74  
                   l5848 3F56                     l5928 4230                     l5960 3B72  
                   l5792 3660                     l6568 176E                     l5874 3FAC  
                   l5866 3F94                     l5938 3B0C                     l5890 42C8  
                   l5956 3B62                     l6596 1814                     l5974 3BA2  
                   l5966 3B7A                     l5798 3688                     l5894 42D6  
                   l5886 42BC                     l5968 3B86                     l5984 4764  
                   l5896 42DE                     l5996 4780                     l5988 476A  
                   STR_1 1077                     STR_2 1094                     STR_3 1077  
                   STR_4 1094                     STR_5 1087                     STR_6 1094  
                   _LATD 000F8C                     _LATE 000F8D                     u3170 47AC  
                   u3188 47B0                     u7010 32C8                     _PEIE 007F96  
                   u6300 3C96                     u7111 3356                     u7200 3550  
                   u7120 3360                     u6410 2EAA                     u7131 3382  
                   u6340 3D14                     u6510 2F4E                     u6440 2ED2  
                   u6601 394C                     u7330 43AA                     u6371 2E78  
                   u6540 2F82                     u7260 3626                     u7500 1398  
                   u7420 1220                     u6381 2E8C                     u6470 2F10  
                   u7190 3432                     u6631 3648                     u6720 3F78  
                   u7280 406C                     u7425 1216                     u7530 14BE  
                   u6651 3670                     u6900 3B8C                     u7700 18DC  
                   u7460 1320                     u6581 3924                     u7470 1360  
                   u7560 159E                     u6841 3AF0                     u6850 3AFA  
                   u6930 476E                     u7650 17C6                     u7570 15AE  
                   u6860 3B2A                     u6780 42E2                     u7807 3E04  
                   u7817 3E26                     u6865 3B22                     u7737 45B2  
                   u7690 18BC                     u7827 3E4E                     u7747 3A8A  
                   u7837 3E7C                     u7757 3AC4                     u7847 3E86  
                   u7767 332A                     u7777 4862                     u7787 4130  
                   u6995 3284                     u7797 3DE8                     _flag 00E4  
                   _main 27DC             ___ftpack@arg 006B               i2_readyI2C 4A88  
           ___ftpack@exp 006E                     _text 00CC                     fsr2h 000FDA  
                   indf2 000FDF                     map@x 00A2                     fsr2l 000FD9  
                   btemp 005F             i2___ftadd@f1 002C             i2___ftadd@f2 002F  
           i2___ftge@ff1 0001             i2___ftge@ff2 0004          __end_of_DataLCD 4606  
                   prodh 000FF4                     prodl 000FF3                     start 03FE  
        __end_ofi2_scale 27DC         writeI2C1@Address 0071             i2___ftneg@f1 0001  
           _sprintf$1124 0100             ___ftmul@cntr 0086             i2___ftmul@f1 000F  
           i2___ftmul@f2 0012             ___param_bank 000000             ___ftmul@sign 0087  
           i2___ftsub@f1 0038             i2___ftsub@f2 003B             i2___fttol@f1 001E  
                  ??_LCD 006B               i2_startI2C 4AD2             ___fttol@exp1 00A1  
                  ??_map 00AC             i2___lltoft@c 0009             ___fttol@lval 009D  
             i2_writeI2C 44B0          writeI2C@Address 0073                    ?_main 0001  
        __end_of___awdiv 3FB6          __end_of___lbdiv 478C          __end_of___ftadd 3010  
        __end_of___awmod 4318          __end_of___lbmod 48CE          __end_of___ftdiv 39FA  
        __end_of___ftneg 491E          __end_of___lldiv 40BC          __end_of___ftmul 372C  
        ___awdiv@divisor 0073          __end_of___llmod 43EE          __end_of___ftsub 4710  
        __end_of___fttol 3BB4                    _RC1IE 007CED                    _RC1IF 007CF5  
                  _LATD6 007C66                    _LATD7 007C67                    i2l170 03DA  
                  i2l319 1DB0                    i2l371 41AE                    i2l710 34EC  
                  i2l741 4980                    i2l709 34C4                    i2l691 3146  
                  i2l786 4442          ___awdiv@counter 0075                    i2_LCD 3E8E  
           i2__div_to_l_ 3820                    _TRISB 000F93                    _TRISD 000F95  
                  _TRISE 000F96                    i2_map 468E             ___lltoft@exp 007B  
       __end_of_TMR1_ISR 03FE           ?i2_SettingsLCD 0001                    _data1 00CA  
                  _data2 00E0               i2isdigit@c 0003            ___awtoft@sign 000C  
        __end_of_dpowers 1077               i2scale@scl 0028                    _scale 20A8  
                  _inter 00BE          __end_of_isdigit 49B0          __end_of_sendI2C 4AA6  
          ___ftpack@sign 006F                    _servo 00CB                    tablat 000FF5  
       __end_ofi2___ftge 42A8         __end_ofi2___wmul 496A          __end_of_stopI2C 4ABA  
                  ttemp5 0060                    ttemp6 0063                    ttemp7 0067  
                  status 000FD8                    wtemp8 0060          __end_of_sprintf 18EA  
          i2___lbmod@rem 0004          ___lbdiv@divisor 006F         __end_ofi2_fround 2E68  
        ___lbdiv@counter 0071              i2map@In_Max 0031              i2map@In_Min 002F  
       __end_ofi2_strlen 49F4          __initialization 4870        i2___lldiv@divisor 0005  
           __end_of_main 2AAC        i2___lldiv@counter 000D            i2___ftmul@exp 0018  
            ?i2___ftpack 0001              ?i2_WriteLCD 0001    __end_of_repeatedStart 4ACA  
            ?i2___lltoft 0009                   ??_main 00B5            ___fttol@sign1 009C  
          __activetblptr 000002               i2sprintf@c 005E               i2sprintf@f 003F  
                 ?i2_LCD 0001                   ?i2_map 002D               i2strlen@cp 0003  
      writeI2C1@Register 006D           receiveI2C@flag 006D         ___llmod@dividend 0078  
                 ?_scale 0088         ___awdiv@dividend 0071         __end_of___awtoft 483A  
                 _ANSELB 000F39                   _ANSELC 000F3A                   _ANSELD 000F3B  
                 _ANSELE 000F3C         __end_of___ftpack 3D34         __end_of_WriteLCD 4A48  
              ??_DataLCD 006E             readI2C1@Data 0070         __end_of___lltoft 44B0  
                 _INT1IE 007F83                   _INT1IF 007F80                   i2l4020 4366  
                 i2l4012 4346                   i2l4004 432C                   i2l4014 434E  
                 i2l4040 3060                   i2l4024 4370                   i2l4008 4338  
                 i2l4114 377C                   i2l4132 37BE                   i2l4108 3754  
                 i2l4028 437E                   i2l4070 30E4                   i2l4046 3088  
                 i2l4142 37E6                   i2l4080 3118                   i2l4072 30EE  
                 i2l4128 37AE                   i2l4160 47E0                   i2l4082 3122  
                 i2l4138 37D6                   i2l5210 18F0                   i2l4068 30DA  
                 i2l4156 47DA                   i2l4172 47FE                   i2l5302 1BD4  
                 i2l5230 1974                   i2l4088 3162                   i2l4168 47F6  
                 i2l5400 1F56                   i2l5312 1C28                   i2l5240 199A  
                 i2l5224 192E                   i2l5232 198A                   i2l5216 1906  
                 i2l3490 3D7A                   i2l4098 3192                   i2l4186 48F0  
                 i2l4178 48D8                   i2l4522 2E26                   i2l4514 2D86  
                 i2l5322 1C90                   i2l5242 19C8                   i2l5172 4816  
                 i2l5412 1F72                   i2l5316 1C8C                   i2l5236 1996  
                 i2l3494 3D90                   i2l3486 3D52                   i2l5182 4612  
                 i2l4542 25EE                   i2l5406 1F6E                   i2l3496 3DAE  
                 i2l3488 3D5C                   i2l4712 4256                   i2l4704 351E  
                 i2l4560 27B6                   i2l4536 2556                   i2l5432 1FFA  
                 i2l5440 2072                   i2l5352 1D8C                   i2l5336 1CE2  
                 i2l5344 1D70                   i2l5248 19DC                   i2l5192 44CE  
                 i2l3498 3DB8                   i2l5186 4626                   i2l4722 42A4  
                 i2l4802 4512                   i2l4650 38FC                   i2l4642 38E8  
                 i2l4626 38BC                   i2l4618 388C                   i2l4706 352A  
                 i2l4554 271E                   i2l4546 2614                   i2l5434 1FFE  
                 i2l5370 1E1E                   i2l5346 1D7A                   i2l5290 1B6C  
                 i2l5282 1B0A                   i2l5274 1AA6                   i2l5258 1A16  
                 i2l4716 4278                   i2l4804 451E                   i2l5428 1FE4  
                 i2l5380 1EFC                   i2l4734 4726                   i2l4638 38D8  
                 i2l5382 1F06                   i2l5366 1DCE                   i2l5358 1DB4  
                 i2l5286 1B2E                   i2l5390 1F22                   i2l5198 44E2  
                 i2l5534 0078                   i2l5526 0058                   i2l4824 49D8  
                 i2l3960 3FCA                   i2l4744 3BE0                   i2l4576 4160  
                 i2l4648 38F0                   i2l5560 00F6                   i2l4826 49DA  
                 i2l4762 3C34                   i2l4578 416C                   i2l4658 3470  
                 i2l4818 4A0A                   i2l5298 1BB0                   i2l5570 01C0  
                 i2l3972 3FF0                   i2l4780 3C74                   i2l4772 3C4C  
                 i2l4588 41A0                   i2l5388 1F18                   i2l5580 023A  
                 i2l5564 0158                   i2l3974 3FF8                   i2l3966 3FDA  
                 i2l4774 3C58                   i2l4766 3C44                   i2l4790 440C  
                 i2l4598 383E                   i2l4694 3506                   i2l5590 026C  
                 i2l3992 4030                   i2l3984 4018                   i2l5592 0282  
                 i2l5576 0228                   i2l4698 3516                   i2l5586 0258  
                 i2l3988 4022                   i2l4796 4434                   i2l4788 4400  
                 u411_41 3020                   u412_41 3034                   u500_41 3480  
                 _RCREG1 000FAE                   u512_41 3BC4                   u432_41 373C  
              ??i2_scale 0021                   u434_41 3764                   _RCSTA1 000FAB  
                 _OSCCON 000FD3                   u498_41 3454                   _SPBRG1 000FAF  
            ?i2_readyI2C 0001       setPWMFreq@prescale 00A6                   _TXSTA1 000FAC  
                 i2map@x 002D        __end_ofi2_DataLCD 464C             i2_scale$1355 0025  
       __end_of__powers_ 1028          i2writeI2C@bytes 0005                   ___ftge 41C0  
       __end_of_readI2C1 413E                   ___wmul 491E         writeI2C@Register 006D  
              ??___awdiv 0075                ??___lbdiv 0070                ??___ftadd 009C  
              ??___awmod 006F                ??___lbmod 006C              ?i2_startI2C 0001  
              ??___ftdiv 0082                ??___ftneg 006E                ??___lldiv 0073  
              ??___ftmul 007F                ??___llmod 0080                ??___ftsub 00A8  
              ??___fttol 0097                   _confir 00C6         __end_of_readyI2C 4A88  
                 _fround 2AAC                   clear_0 488E         ___awdiv@quotient 0077  
        ___awmod@divisor 006D              ?i2_writeI2C 0003                   isa$std 000001  
        ___awmod@counter 006F                   _strlen 49B0           i2___awdiv@sign 000C  
  ___ftmul@f3_as_product 0083                ??_isdigit 006B                ??_sendI2C 006C  
      __end_ofi2___awdiv 403A          ??i2_SettingsLCD 0003        __end_ofi2___lbdiv 4802  
      __end_ofi2___ftadd 31B8        __end_ofi2___awmod 4388        __end_ofi2___lbmod 48F8  
         i2___ftadd@exp1 0037           i2___ftadd@exp2 0036        __end_ofi2___ftneg 498E  
      __end_ofi2___lldiv 41C0        __end_ofi2___ftmul 3820        __end_ofi2___llmod 4454  
      __end_ofi2___ftsub 4750        __end_ofi2___fttol 3C86           i2___ftadd@sign 0035  
           __mediumconst 0000            ??_SettingsLCD 006D         __end_of_settings 3ADE  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_of_startI2C 4AC2                ??_stopI2C 006C           i2___awmod@sign 0006  
              ??_sprintf 00AF         ___lbdiv@dividend 0070         __end_of_writeI2C 45C0  
            sendI2C@data 006C        __end_ofi2_isdigit 4A12        __end_ofi2_sendI2C 4AB2  
        ___lbmod@divisor 006B               __accesstop 0060  __end_of__initialization 4894  
           WriteLCD@word 006D          ___lbmod@counter 006D               ___ftadd@f1 0096  
             ___ftadd@f2 0099               ___ftge@ff1 006B               ___ftge@ff2 006E  
          i2sprintf@flag 004D            i2sprintf@eexp 004F            i2sprintf@fval 005B  
          ___rparam_used 000001        __end_ofi2_stopI2C 4AD2            i2sprintf@prec 0059  
             ___ftdiv@f1 007C               ___ftdiv@f2 007F               ___ftdiv@f3 0086  
         setPWMFreq@freq 00A2        __end_ofi2_sprintf 20A8               ___ftneg@f1 006B  
          __end_ofi2_LCD 3F32               ___awtoft@c 0009           i2___ftpack@arg 0001  
     i2__tdiv_to_l_@exp1 000F        i2___llmod@divisor 0012           i2___ftpack@exp 0004  
     i2__tdiv_to_l_@cntr 000E            __end_ofi2_map 46D0        i2___llmod@counter 0016  
     i2__tdiv_to_l_@quot 000A               ___ftmul@f1 0079               ___ftmul@f2 007C  
             ___ftsub@f1 00A2               ___ftsub@f2 00A5               ___fttol@f1 0093  
         __pcstackCOMRAM 0001       i2___lldiv@dividend 0001             __pidataBANK0 4ADA  
         i2_sprintf$1356 0049                ?_TMR1_ISR 0001               ___lltoft@c 0073  
         i2___ftmul@cntr 001C            __end_of_scale 2444           i2___ftmul@sign 001D  
           i2map@Out_Max 0035             i2map@Out_Min 0033         ___lbdiv@quotient 0072  
         i2___fttol@exp1 002C           i2___fttol@lval 0028                ?i2___ftge 0001  
              ?i2___wmul 000F            i2__tdiv_to_l_ 3444               __div_to_l_ 3542  
                ??i2_LCD 0001                  ??i2_map 0037                ?i2_fround 001E  
              ?i2_strlen 0001          __div_to_l_@exp1 0076          __div_to_l_@cntr 0075  
                ??_scale 008B           i2___lltoft@exp 0011          __div_to_l_@quot 0071  
     i2___lldiv@quotient 0009                  LCD@data 006C               __pbssBANK0 00B5  
            i2sprintf@ap 004C              i2sprintf@sp 003E         i2__tdiv_to_l_@f1 0001  
       i2__tdiv_to_l_@f2 0004      __end_of_SettingsLCD 4A2E            __div_to_l_@f1 006B  
          __div_to_l_@f2 006E                  ?___ftge 006B                  ?___wmul 0079  
             ??_TMR1_ISR 0060                  ?_fround 0088                ?___awtoft 0009  
              ?___ftpack 006B                ?_WriteLCD 0001                ?___lltoft 0073  
         ?i2__tdiv_to_l_ 0001                TMR1_ISR@d 006A               ??i2___ftge 0007  
                ?_strlen 006B               ??i2___wmul 0013                  _INTEDG1 007F8D  
             ??i2_fround 0021            readI2C1@bytes 0071                  _SSP1ADD 000FC8  
                _SSP1BUF 000FC9               ??i2_strlen 0003                  _DataLCD 45C0  
              ?_readI2C1 006F                  i2_scale 2444             writeI2C@Data 006E  
              ?_readyI2C 0001        __end_of__npowers_ 104F                  __Hparam 0000  
             _scale$1123 008F                  __Lparam 0000                ?_settings 0001  
                ___awdiv 3F32                  ___lbdiv 4750                  ___ftadd 2E68  
              ?_startI2C 0001                  ___awmod 42A8                  ___lbmod 48A2  
                ___ftdiv 3914                  ___ftneg 48F8                  ___lldiv 403A  
                ___ftmul 3638                  ___llmod 4388                  ___ftsub 46D0  
                ___fttol 3ADE             __psmallconst 1000                i2LCD@data 0002  
                __pcinit 4870             ??i2___ftpack 0006             ??i2_WriteLCD 0003  
             ??___awtoft 000C               ??___ftpack 0070               ??_WriteLCD 006D  
              ?_writeI2C 006D  i2___ftmul@f3_as_product 0019                  __ramtop 1000  
           ??i2___lltoft 000D          readI2C1@Address 0075               ??___lltoft 0077  
                __ptext0 27DC                  __ptext1 4568                  __ptext2 10A2  
                __ptext3 20A8                  __ptext4 42A8                  __ptext5 498E  
                __ptext6 2AAC                  __ptext7 48A2                  __ptext8 4750  
                __ptext9 3638            i2_fround$1353 0028            i2_fround$1354 0025  
            ?__div_to_l_ 006B            i2_isdigit$930 0002                  _dpowers 104F  
             _receiveI2C 478C             i2fround@prec 002B                  _isdigit 498E  
                _sendI2C 4A9A         ___awmod@dividend 006B               _setPWMFreq 31B8  
            _SettingsLCD 4A12                  _stopI2C 4AB2                  _sprintf 10A2  
   end_of_initialization 4894               ??_readI2C1 0073             ??i2_readyI2C 0001  
          __Lmediumconst 0000               ??_readyI2C 006B      i2___wmul@multiplier 000F  
     __end_ofi2___ftpack 3DE2       __end_ofi2_WriteLCD 4A74       __end_ofi2___lltoft 4568  
         i2WriteLCD@word 0003          ___lldiv@divisor 006F          ___lldiv@counter 0077  
                postdec2 000FDD               ??_settings 00AB                  postinc0 000FEE  
                postinc2 000FDE             ??i2_startI2C 0002               ??_startI2C 006C  
             map@Out_Max 00AA               map@Out_Min 00A8           __tdiv_to_l_@f1 006B  
         __tdiv_to_l_@f2 006E                i2_DataLCD 4606          ??i2__tdiv_to_l_ 0007  
                strlen@s 006B            ??__tdiv_to_l_ 0071             ??i2_writeI2C 0007  
             ??_writeI2C 0071        __end_of_writeI2C1 4870       __end_ofi2_readyI2C 4A9A  
       ___lbmod@dividend 006C    setPWMFreq@prescaleval 00A7                _TRISCbits 000F94  
              i2___awdiv 3FB6                i2___lbdiv 47C8                i2___ftadd 3010  
              i2___awmod 4318                i2___lbmod 48CE                i2___ftneg 496A  
              i2___lldiv 413E                i2___ftmul 372C                i2___llmod 43EE  
              i2___ftsub 4710                i2___fttol 3BB4       __end_ofi2_startI2C 4ADA  
            ___lbmod@rem 006E              ___ftdiv@exp 0089       i2___llmod@dividend 000E  
     i2___awdiv@dividend 0007       __end_ofi2_writeI2C 450C          i2___ftpack@sign 0005  
              i2_isdigit 49F4                i2_sendI2C 4AA6              ___ftmul@exp 0082  
              i2_stopI2C 4ACA                i2_sprintf 18EA           __end_of___ftge 4234  
             ?i2_DataLCD 0001           __end_of___wmul 4944           __end_of_fround 2C8C  
     i2writeI2C@Register 0003         i2___wmul@product 0013              ?_receiveI2C 0001  
              _DriverPin 00C2           __end_of_strlen 49D2              ?_setPWMFreq 00A2  
    start_initialization 4870              __end_of_LCD 3E8E       i2___awdiv@quotient 000D  
    __end_of__tdiv_to_l_ 3444    __end_ofi2_SettingsLCD 4A5E              __end_of_map 468E  
        i2___fttol@sign1 0027               ?i2___awdiv 0007               ?i2___lbdiv 0005  
             ?i2___ftadd 002C               ?i2___awmod 0001               ?i2___lbmod 0001  
             ?i2___ftneg 0001               ?i2___lldiv 0001               ?i2___ftmul 000F  
             ?i2___llmod 000E               ?i2___ftsub 0038               ?i2___fttol 001E  
              i2strlen@s 0001          ___llmod@divisor 007C          ___llmod@counter 0080  
     i2___lbdiv@dividend 0006               ?i2_isdigit 0001               ?i2_sendI2C 0001  
         i2writeI2C@Data 0004                 ??___ftge 0071               ?i2_stopI2C 0001  
               ??___wmul 007D               ?i2_sprintf 003E              __pdataBANK0 00E4  
               ??_fround 008B            sprintf@tmpval 0108            _repeatedStart 4AC2  
               ??_strlen 006D               fround@prec 0095            ?i2__div_to_l_ 0001  
           i2sprintf@val 0055            __pcstackBANK0 0060            __pcstackBANK1 0100  
     i2___lbdiv@quotient 0008        i2SettingsLCD@word 0003                 ?_DataLCD 0001  
               ?i2_scale 001E              sprintf@flag 0104              sprintf@eexp 0106  
            sprintf@fval 0112              sprintf@prec 0110         receiveI2C@buffer 006E  
              __pintcode 0008                 ?___awdiv 0071                 ?___lbdiv 006F  
               ?___ftadd 0096                 ?___awmod 006B                 ?___lbmod 006B  
               ?___ftdiv 007C                 ?___ftneg 006B                 ?___lldiv 006B  
               ?___ftmul 0079                 ?___llmod 0078                 ?___ftsub 00A2  
              __npowers_ 1028                 ?___fttol 0093              ??i2_DataLCD 0004  
         ?_repeatedStart 0001              __tdiv_to_l_ 3346           ??i2__div_to_l_ 0007  
           ??__div_to_l_ 0071              __smallconst 1000                 ?_isdigit 0001  
               ?_sendI2C 0001             ?_SettingsLCD 0001                 ?_stopI2C 0001  
            ??i2___awdiv 000B              ??i2___lbdiv 0006              ??i2___ftadd 0032  
            ??i2___awmod 0005                 ?_sprintf 00A8              ??i2___lbmod 0002  
            ??i2___ftneg 0004              ??i2___lldiv 0009              ??i2___ftmul 0015  
            ??i2___llmod 0016              ??i2___ftsub 003E              ??i2___fttol 0022  
         ___wmul@product 007D                 _LATDbits 000F8C                 _LATEbits 000F8D  
            ??i2_isdigit 0001              ??i2_sendI2C 0002                map@In_Max 00A6  
              map@In_Min 00A4                 i2u402_40 3FFC                 i2u332_40 3DC2  
               i2u421_40 30B8                 i2u415_40 3052                 i2u328_40 3D44  
               i2u408_40 4352                 i2u425_40 30F6                 i2u513_40 3BCE  
               i2u521_40 4410       __end_of__div_to_l_ 3638                 i2u418_40 307A  
               i2u514_40 3BFE                 i2u506_40 3530                 i2u602_40 2082  
               i2u514_45 3BF6                 i2u603_40 209C                 i2u428_40 312A  
               i2u518_40 3C5E                 i2u439_40 47E4                 i2u609_40 0072  
               i2u491_40 382C                 i2u619_40 00C8                 i2u580_40 1B7C  
               i2u590_40 1DAA                 i2u583_40 1BB0                 i2u575_40 1A4E  
               i2u575_45 1A44                 i2u489_40 4170                 i2u497_40 3902  
               i2u586_40 1CC8                 i2u499_40 345E                 i2u579_40 1B3E  
               i2u589_40 1D9A                 i2u598_40 1FAA                 i2u790_47 3ECE  
               i2u791_47 3EF4                 i2u792_47 3F20                 i2u793_47 3F2A  
               i2u785_47 0048                 i2u786_47 035A                 i2u787_47 44FC  
               i2u788_47 3E94                 i2u789_47 3EAE              ??i2_stopI2C 0002  
               _SSP1CON1 000FC6                 _SSP1CON2 000FC5                 _SSP1CON3 000FCB  
            ??i2_sprintf 0043                 _TMR1_ISR 0008                 _SSP1STAT 000FC7  
        i2__div_to_l_@f1 0001          i2__div_to_l_@f2 0004        ___wmul@multiplier 0079  
               i2___ftge 4234                 i2___wmul 4944            writeI2C1@Data 006E  
      i2writeI2C@Address 0009        i2___awdiv@divisor 0009                 i2_fround 2C8C  
              _writeI2C1 483A        i2___awdiv@counter 000B                 i2_strlen 49D2  
     i2___awmod@dividend 0001            writeI2C@bytes 006F                 __Hrparam 0000  
      i2___lbdiv@divisor 0005        i2___lbdiv@counter 0007                 __Lrparam 0000  
        ??_repeatedStart 006C    i2___wmul@multiplicand 0011                 ___awtoft 4802  
               ___ftpack 3C86                 _WriteLCD 4A2E              _fround$1121 0092  
            _fround$1122 008F                 ___lltoft 4454    __end_ofi2__tdiv_to_l_ 3542  
            _isdigit$930 006C             ??_receiveI2C 006C               sprintf@val 010C  
           ??_setPWMFreq 00A5               ?_writeI2C1 006D                 __ptext10 3346  
               __ptext11 3542                 __ptext20 40BC                 __ptext12 4388  
               __ptext21 4AB2                 __ptext13 403A                 __ptext30 3914  
               __ptext22 4ABA                 __ptext14 46D0                 __ptext31 3C86  
               __ptext23 4A9A                 __ptext15 2E68                 __ptext32 4A12  
               __ptext24 4AC2                 __ptext16 48F8                 __ptext41 44B0  
               __ptext33 464C                 __ptext25 478C                 __ptext17 39FA  
               __ptext50 2C8C                 __ptext42 4ACA                 __ptext34 491E  
               __ptext26 4A74                 __ptext18 31B8                 __ptext51 48CE  
               __ptext43 4AD2                 __ptext35 3F32                 __ptext27 4454  
               __ptext19 483A                 __ptext60 4710                 __ptext52 47C8  
               __ptext44 4AA6                 __ptext36 45C0                 __ptext28 3ADE  
               __ptext61 3010                 __ptext53 372C                 __ptext45 4A88  
               __ptext37 49B0                 __ptext29 41C0                 __ptext70 4A5E  
               __ptext62 496A                 __ptext54 3444                 __ptext46 18EA  
               __ptext38 4A2E                 __ptext71 3E8E                 __ptext63 4234  
               __ptext55 3820                 __ptext47 2444                 __ptext39 3DE2  
               __ptext72 4802                 __ptext64 468E                 __ptext56 450C  
               __ptext48 4318                 __ptext73 3D34                 __ptext65 4944  
               __ptext57 43EE                 __ptext49 49F4                 __ptext66 3FB6  
               __ptext58 413E                 __ptext67 4A48                 __ptext59 3BB4  
               __ptext68 4606                 __ptext69 49D2             _SSP1CON2bits 000FC5  
               __powers_ 1001                 _readI2C1 40BC       i2___lbmod@dividend 0002  
          i2sendI2C@data 0002                 _readyI2C 4A74     __end_ofi2__div_to_l_ 3914  
     __end_of_receiveI2C 47C8                 isa$xinst 000000       __end_of_setPWMFreq 3346  
               _settings 39FA                 int$flags 005F                 _startI2C 4ABA  
       readI2C1@Register 006F                 _writeI2C 4568        i2___awmod@divisor 0003  
      i2___awmod@counter 0005                 isdigit@c 006D                 scale@scl 0092  
               intlevel2 0000                sprintf@ap 0103         __tdiv_to_l_@exp1 0079  
              sprintf@sp 00A8         __tdiv_to_l_@cntr 0078         __tdiv_to_l_@quot 0074  
       ___lldiv@dividend 006B        i2___lbmod@divisor 0001        i2___lbmod@counter 0003  
           ?__tdiv_to_l_ 006B                 sprintf@c 0115                 sprintf@f 00A9  
       ___lldiv@quotient 0073                 strlen@cp 006D              ??_writeI2C1 006F  
        SettingsLCD@word 006D        i2__div_to_l_@exp1 000C        i2__div_to_l_@cntr 000B  
      i2__div_to_l_@quot 0007  
